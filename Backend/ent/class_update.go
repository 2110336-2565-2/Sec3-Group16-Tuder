// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/class"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/match"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/paymenthistory"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/predicate"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/schedule"
	"github.com/google/uuid"
)

// ClassUpdate is the builder for updating Class entities.
type ClassUpdate struct {
	config
	hooks    []Hook
	mutation *ClassMutation
}

// Where appends a list predicates to the ClassUpdate builder.
func (cu *ClassUpdate) Where(ps ...predicate.Class) *ClassUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetReviewAvaliable sets the "review_avaliable" field.
func (cu *ClassUpdate) SetReviewAvaliable(b bool) *ClassUpdate {
	cu.mutation.SetReviewAvaliable(b)
	return cu
}

// SetNillableReviewAvaliable sets the "review_avaliable" field if the given value is not nil.
func (cu *ClassUpdate) SetNillableReviewAvaliable(b *bool) *ClassUpdate {
	if b != nil {
		cu.SetReviewAvaliable(*b)
	}
	return cu
}

// SetTotalHour sets the "total_hour" field.
func (cu *ClassUpdate) SetTotalHour(i int) *ClassUpdate {
	cu.mutation.ResetTotalHour()
	cu.mutation.SetTotalHour(i)
	return cu
}

// AddTotalHour adds i to the "total_hour" field.
func (cu *ClassUpdate) AddTotalHour(i int) *ClassUpdate {
	cu.mutation.AddTotalHour(i)
	return cu
}

// SetSuccessHour sets the "success_hour" field.
func (cu *ClassUpdate) SetSuccessHour(i int) *ClassUpdate {
	cu.mutation.ResetSuccessHour()
	cu.mutation.SetSuccessHour(i)
	return cu
}

// AddSuccessHour adds i to the "success_hour" field.
func (cu *ClassUpdate) AddSuccessHour(i int) *ClassUpdate {
	cu.mutation.AddSuccessHour(i)
	return cu
}

// SetStatus sets the "status" field.
func (cu *ClassUpdate) SetStatus(c class.Status) *ClassUpdate {
	cu.mutation.SetStatus(c)
	return cu
}

// AddMatchIDs adds the "match" edge to the Match entity by IDs.
func (cu *ClassUpdate) AddMatchIDs(ids ...uuid.UUID) *ClassUpdate {
	cu.mutation.AddMatchIDs(ids...)
	return cu
}

// AddMatch adds the "match" edges to the Match entity.
func (cu *ClassUpdate) AddMatch(m ...*Match) *ClassUpdate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return cu.AddMatchIDs(ids...)
}

// SetScheduleID sets the "schedule" edge to the Schedule entity by ID.
func (cu *ClassUpdate) SetScheduleID(id uuid.UUID) *ClassUpdate {
	cu.mutation.SetScheduleID(id)
	return cu
}

// SetSchedule sets the "schedule" edge to the Schedule entity.
func (cu *ClassUpdate) SetSchedule(s *Schedule) *ClassUpdate {
	return cu.SetScheduleID(s.ID)
}

// SetPaymentHistoryID sets the "payment_history" edge to the PaymentHistory entity by ID.
func (cu *ClassUpdate) SetPaymentHistoryID(id uuid.UUID) *ClassUpdate {
	cu.mutation.SetPaymentHistoryID(id)
	return cu
}

// SetPaymentHistory sets the "payment_history" edge to the PaymentHistory entity.
func (cu *ClassUpdate) SetPaymentHistory(p *PaymentHistory) *ClassUpdate {
	return cu.SetPaymentHistoryID(p.ID)
}

// Mutation returns the ClassMutation object of the builder.
func (cu *ClassUpdate) Mutation() *ClassMutation {
	return cu.mutation
}

// ClearMatch clears all "match" edges to the Match entity.
func (cu *ClassUpdate) ClearMatch() *ClassUpdate {
	cu.mutation.ClearMatch()
	return cu
}

// RemoveMatchIDs removes the "match" edge to Match entities by IDs.
func (cu *ClassUpdate) RemoveMatchIDs(ids ...uuid.UUID) *ClassUpdate {
	cu.mutation.RemoveMatchIDs(ids...)
	return cu
}

// RemoveMatch removes "match" edges to Match entities.
func (cu *ClassUpdate) RemoveMatch(m ...*Match) *ClassUpdate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return cu.RemoveMatchIDs(ids...)
}

// ClearSchedule clears the "schedule" edge to the Schedule entity.
func (cu *ClassUpdate) ClearSchedule() *ClassUpdate {
	cu.mutation.ClearSchedule()
	return cu
}

// ClearPaymentHistory clears the "payment_history" edge to the PaymentHistory entity.
func (cu *ClassUpdate) ClearPaymentHistory() *ClassUpdate {
	cu.mutation.ClearPaymentHistory()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ClassUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, ClassMutation](ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ClassUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ClassUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ClassUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *ClassUpdate) check() error {
	if v, ok := cu.mutation.Status(); ok {
		if err := class.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Class.status": %w`, err)}
		}
	}
	if _, ok := cu.mutation.ScheduleID(); cu.mutation.ScheduleCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Class.schedule"`)
	}
	if _, ok := cu.mutation.PaymentHistoryID(); cu.mutation.PaymentHistoryCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Class.payment_history"`)
	}
	return nil
}

func (cu *ClassUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(class.Table, class.Columns, sqlgraph.NewFieldSpec(class.FieldID, field.TypeUUID))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.ReviewAvaliable(); ok {
		_spec.SetField(class.FieldReviewAvaliable, field.TypeBool, value)
	}
	if value, ok := cu.mutation.TotalHour(); ok {
		_spec.SetField(class.FieldTotalHour, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedTotalHour(); ok {
		_spec.AddField(class.FieldTotalHour, field.TypeInt, value)
	}
	if value, ok := cu.mutation.SuccessHour(); ok {
		_spec.SetField(class.FieldSuccessHour, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedSuccessHour(); ok {
		_spec.AddField(class.FieldSuccessHour, field.TypeInt, value)
	}
	if value, ok := cu.mutation.Status(); ok {
		_spec.SetField(class.FieldStatus, field.TypeEnum, value)
	}
	if cu.mutation.MatchCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   class.MatchTable,
			Columns: class.MatchPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: match.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedMatchIDs(); len(nodes) > 0 && !cu.mutation.MatchCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   class.MatchTable,
			Columns: class.MatchPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: match.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.MatchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   class.MatchTable,
			Columns: class.MatchPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: match.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ScheduleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   class.ScheduleTable,
			Columns: []string{class.ScheduleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: schedule.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ScheduleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   class.ScheduleTable,
			Columns: []string{class.ScheduleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: schedule.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.PaymentHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   class.PaymentHistoryTable,
			Columns: []string{class.PaymentHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: paymenthistory.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.PaymentHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   class.PaymentHistoryTable,
			Columns: []string{class.PaymentHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: paymenthistory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{class.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ClassUpdateOne is the builder for updating a single Class entity.
type ClassUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ClassMutation
}

// SetReviewAvaliable sets the "review_avaliable" field.
func (cuo *ClassUpdateOne) SetReviewAvaliable(b bool) *ClassUpdateOne {
	cuo.mutation.SetReviewAvaliable(b)
	return cuo
}

// SetNillableReviewAvaliable sets the "review_avaliable" field if the given value is not nil.
func (cuo *ClassUpdateOne) SetNillableReviewAvaliable(b *bool) *ClassUpdateOne {
	if b != nil {
		cuo.SetReviewAvaliable(*b)
	}
	return cuo
}

// SetTotalHour sets the "total_hour" field.
func (cuo *ClassUpdateOne) SetTotalHour(i int) *ClassUpdateOne {
	cuo.mutation.ResetTotalHour()
	cuo.mutation.SetTotalHour(i)
	return cuo
}

// AddTotalHour adds i to the "total_hour" field.
func (cuo *ClassUpdateOne) AddTotalHour(i int) *ClassUpdateOne {
	cuo.mutation.AddTotalHour(i)
	return cuo
}

// SetSuccessHour sets the "success_hour" field.
func (cuo *ClassUpdateOne) SetSuccessHour(i int) *ClassUpdateOne {
	cuo.mutation.ResetSuccessHour()
	cuo.mutation.SetSuccessHour(i)
	return cuo
}

// AddSuccessHour adds i to the "success_hour" field.
func (cuo *ClassUpdateOne) AddSuccessHour(i int) *ClassUpdateOne {
	cuo.mutation.AddSuccessHour(i)
	return cuo
}

// SetStatus sets the "status" field.
func (cuo *ClassUpdateOne) SetStatus(c class.Status) *ClassUpdateOne {
	cuo.mutation.SetStatus(c)
	return cuo
}

// AddMatchIDs adds the "match" edge to the Match entity by IDs.
func (cuo *ClassUpdateOne) AddMatchIDs(ids ...uuid.UUID) *ClassUpdateOne {
	cuo.mutation.AddMatchIDs(ids...)
	return cuo
}

// AddMatch adds the "match" edges to the Match entity.
func (cuo *ClassUpdateOne) AddMatch(m ...*Match) *ClassUpdateOne {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return cuo.AddMatchIDs(ids...)
}

// SetScheduleID sets the "schedule" edge to the Schedule entity by ID.
func (cuo *ClassUpdateOne) SetScheduleID(id uuid.UUID) *ClassUpdateOne {
	cuo.mutation.SetScheduleID(id)
	return cuo
}

// SetSchedule sets the "schedule" edge to the Schedule entity.
func (cuo *ClassUpdateOne) SetSchedule(s *Schedule) *ClassUpdateOne {
	return cuo.SetScheduleID(s.ID)
}

// SetPaymentHistoryID sets the "payment_history" edge to the PaymentHistory entity by ID.
func (cuo *ClassUpdateOne) SetPaymentHistoryID(id uuid.UUID) *ClassUpdateOne {
	cuo.mutation.SetPaymentHistoryID(id)
	return cuo
}

// SetPaymentHistory sets the "payment_history" edge to the PaymentHistory entity.
func (cuo *ClassUpdateOne) SetPaymentHistory(p *PaymentHistory) *ClassUpdateOne {
	return cuo.SetPaymentHistoryID(p.ID)
}

// Mutation returns the ClassMutation object of the builder.
func (cuo *ClassUpdateOne) Mutation() *ClassMutation {
	return cuo.mutation
}

// ClearMatch clears all "match" edges to the Match entity.
func (cuo *ClassUpdateOne) ClearMatch() *ClassUpdateOne {
	cuo.mutation.ClearMatch()
	return cuo
}

// RemoveMatchIDs removes the "match" edge to Match entities by IDs.
func (cuo *ClassUpdateOne) RemoveMatchIDs(ids ...uuid.UUID) *ClassUpdateOne {
	cuo.mutation.RemoveMatchIDs(ids...)
	return cuo
}

// RemoveMatch removes "match" edges to Match entities.
func (cuo *ClassUpdateOne) RemoveMatch(m ...*Match) *ClassUpdateOne {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return cuo.RemoveMatchIDs(ids...)
}

// ClearSchedule clears the "schedule" edge to the Schedule entity.
func (cuo *ClassUpdateOne) ClearSchedule() *ClassUpdateOne {
	cuo.mutation.ClearSchedule()
	return cuo
}

// ClearPaymentHistory clears the "payment_history" edge to the PaymentHistory entity.
func (cuo *ClassUpdateOne) ClearPaymentHistory() *ClassUpdateOne {
	cuo.mutation.ClearPaymentHistory()
	return cuo
}

// Where appends a list predicates to the ClassUpdate builder.
func (cuo *ClassUpdateOne) Where(ps ...predicate.Class) *ClassUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ClassUpdateOne) Select(field string, fields ...string) *ClassUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Class entity.
func (cuo *ClassUpdateOne) Save(ctx context.Context) (*Class, error) {
	return withHooks[*Class, ClassMutation](ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ClassUpdateOne) SaveX(ctx context.Context) *Class {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ClassUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ClassUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *ClassUpdateOne) check() error {
	if v, ok := cuo.mutation.Status(); ok {
		if err := class.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Class.status": %w`, err)}
		}
	}
	if _, ok := cuo.mutation.ScheduleID(); cuo.mutation.ScheduleCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Class.schedule"`)
	}
	if _, ok := cuo.mutation.PaymentHistoryID(); cuo.mutation.PaymentHistoryCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Class.payment_history"`)
	}
	return nil
}

func (cuo *ClassUpdateOne) sqlSave(ctx context.Context) (_node *Class, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(class.Table, class.Columns, sqlgraph.NewFieldSpec(class.FieldID, field.TypeUUID))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Class.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, class.FieldID)
		for _, f := range fields {
			if !class.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != class.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.ReviewAvaliable(); ok {
		_spec.SetField(class.FieldReviewAvaliable, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.TotalHour(); ok {
		_spec.SetField(class.FieldTotalHour, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedTotalHour(); ok {
		_spec.AddField(class.FieldTotalHour, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.SuccessHour(); ok {
		_spec.SetField(class.FieldSuccessHour, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedSuccessHour(); ok {
		_spec.AddField(class.FieldSuccessHour, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.Status(); ok {
		_spec.SetField(class.FieldStatus, field.TypeEnum, value)
	}
	if cuo.mutation.MatchCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   class.MatchTable,
			Columns: class.MatchPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: match.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedMatchIDs(); len(nodes) > 0 && !cuo.mutation.MatchCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   class.MatchTable,
			Columns: class.MatchPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: match.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.MatchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   class.MatchTable,
			Columns: class.MatchPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: match.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ScheduleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   class.ScheduleTable,
			Columns: []string{class.ScheduleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: schedule.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ScheduleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   class.ScheduleTable,
			Columns: []string{class.ScheduleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: schedule.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.PaymentHistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   class.PaymentHistoryTable,
			Columns: []string{class.PaymentHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: paymenthistory.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.PaymentHistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   class.PaymentHistoryTable,
			Columns: []string{class.PaymentHistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: paymenthistory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Class{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{class.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}

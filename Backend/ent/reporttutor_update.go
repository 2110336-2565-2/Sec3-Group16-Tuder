// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/predicate"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/reporttutor"
)

// ReportTutorUpdate is the builder for updating ReportTutor entities.
type ReportTutorUpdate struct {
	config
	hooks    []Hook
	mutation *ReportTutorMutation
}

// Where appends a list predicates to the ReportTutorUpdate builder.
func (rtu *ReportTutorUpdate) Where(ps ...predicate.ReportTutor) *ReportTutorUpdate {
	rtu.mutation.Where(ps...)
	return rtu
}

// SetScore sets the "score" field.
func (rtu *ReportTutorUpdate) SetScore(f float32) *ReportTutorUpdate {
	rtu.mutation.ResetScore()
	rtu.mutation.SetScore(f)
	return rtu
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (rtu *ReportTutorUpdate) SetNillableScore(f *float32) *ReportTutorUpdate {
	if f != nil {
		rtu.SetScore(*f)
	}
	return rtu
}

// AddScore adds f to the "score" field.
func (rtu *ReportTutorUpdate) AddScore(f float32) *ReportTutorUpdate {
	rtu.mutation.AddScore(f)
	return rtu
}

// ClearScore clears the value of the "score" field.
func (rtu *ReportTutorUpdate) ClearScore() *ReportTutorUpdate {
	rtu.mutation.ClearScore()
	return rtu
}

// SetReviewMsg sets the "review_msg" field.
func (rtu *ReportTutorUpdate) SetReviewMsg(s string) *ReportTutorUpdate {
	rtu.mutation.SetReviewMsg(s)
	return rtu
}

// SetNillableReviewMsg sets the "review_msg" field if the given value is not nil.
func (rtu *ReportTutorUpdate) SetNillableReviewMsg(s *string) *ReportTutorUpdate {
	if s != nil {
		rtu.SetReviewMsg(*s)
	}
	return rtu
}

// ClearReviewMsg clears the value of the "review_msg" field.
func (rtu *ReportTutorUpdate) ClearReviewMsg() *ReportTutorUpdate {
	rtu.mutation.ClearReviewMsg()
	return rtu
}

// Mutation returns the ReportTutorMutation object of the builder.
func (rtu *ReportTutorUpdate) Mutation() *ReportTutorMutation {
	return rtu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rtu *ReportTutorUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, ReportTutorMutation](ctx, rtu.sqlSave, rtu.mutation, rtu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rtu *ReportTutorUpdate) SaveX(ctx context.Context) int {
	affected, err := rtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rtu *ReportTutorUpdate) Exec(ctx context.Context) error {
	_, err := rtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rtu *ReportTutorUpdate) ExecX(ctx context.Context) {
	if err := rtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rtu *ReportTutorUpdate) check() error {
	if v, ok := rtu.mutation.Score(); ok {
		if err := reporttutor.ScoreValidator(v); err != nil {
			return &ValidationError{Name: "score", err: fmt.Errorf(`ent: validator failed for field "ReportTutor.score": %w`, err)}
		}
	}
	return nil
}

func (rtu *ReportTutorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := rtu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(reporttutor.Table, reporttutor.Columns, sqlgraph.NewFieldSpec(reporttutor.FieldID, field.TypeInt))
	if ps := rtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rtu.mutation.Score(); ok {
		_spec.SetField(reporttutor.FieldScore, field.TypeFloat32, value)
	}
	if value, ok := rtu.mutation.AddedScore(); ok {
		_spec.AddField(reporttutor.FieldScore, field.TypeFloat32, value)
	}
	if rtu.mutation.ScoreCleared() {
		_spec.ClearField(reporttutor.FieldScore, field.TypeFloat32)
	}
	if value, ok := rtu.mutation.ReviewMsg(); ok {
		_spec.SetField(reporttutor.FieldReviewMsg, field.TypeString, value)
	}
	if rtu.mutation.ReviewMsgCleared() {
		_spec.ClearField(reporttutor.FieldReviewMsg, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reporttutor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rtu.mutation.done = true
	return n, nil
}

// ReportTutorUpdateOne is the builder for updating a single ReportTutor entity.
type ReportTutorUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ReportTutorMutation
}

// SetScore sets the "score" field.
func (rtuo *ReportTutorUpdateOne) SetScore(f float32) *ReportTutorUpdateOne {
	rtuo.mutation.ResetScore()
	rtuo.mutation.SetScore(f)
	return rtuo
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (rtuo *ReportTutorUpdateOne) SetNillableScore(f *float32) *ReportTutorUpdateOne {
	if f != nil {
		rtuo.SetScore(*f)
	}
	return rtuo
}

// AddScore adds f to the "score" field.
func (rtuo *ReportTutorUpdateOne) AddScore(f float32) *ReportTutorUpdateOne {
	rtuo.mutation.AddScore(f)
	return rtuo
}

// ClearScore clears the value of the "score" field.
func (rtuo *ReportTutorUpdateOne) ClearScore() *ReportTutorUpdateOne {
	rtuo.mutation.ClearScore()
	return rtuo
}

// SetReviewMsg sets the "review_msg" field.
func (rtuo *ReportTutorUpdateOne) SetReviewMsg(s string) *ReportTutorUpdateOne {
	rtuo.mutation.SetReviewMsg(s)
	return rtuo
}

// SetNillableReviewMsg sets the "review_msg" field if the given value is not nil.
func (rtuo *ReportTutorUpdateOne) SetNillableReviewMsg(s *string) *ReportTutorUpdateOne {
	if s != nil {
		rtuo.SetReviewMsg(*s)
	}
	return rtuo
}

// ClearReviewMsg clears the value of the "review_msg" field.
func (rtuo *ReportTutorUpdateOne) ClearReviewMsg() *ReportTutorUpdateOne {
	rtuo.mutation.ClearReviewMsg()
	return rtuo
}

// Mutation returns the ReportTutorMutation object of the builder.
func (rtuo *ReportTutorUpdateOne) Mutation() *ReportTutorMutation {
	return rtuo.mutation
}

// Where appends a list predicates to the ReportTutorUpdate builder.
func (rtuo *ReportTutorUpdateOne) Where(ps ...predicate.ReportTutor) *ReportTutorUpdateOne {
	rtuo.mutation.Where(ps...)
	return rtuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rtuo *ReportTutorUpdateOne) Select(field string, fields ...string) *ReportTutorUpdateOne {
	rtuo.fields = append([]string{field}, fields...)
	return rtuo
}

// Save executes the query and returns the updated ReportTutor entity.
func (rtuo *ReportTutorUpdateOne) Save(ctx context.Context) (*ReportTutor, error) {
	return withHooks[*ReportTutor, ReportTutorMutation](ctx, rtuo.sqlSave, rtuo.mutation, rtuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rtuo *ReportTutorUpdateOne) SaveX(ctx context.Context) *ReportTutor {
	node, err := rtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rtuo *ReportTutorUpdateOne) Exec(ctx context.Context) error {
	_, err := rtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rtuo *ReportTutorUpdateOne) ExecX(ctx context.Context) {
	if err := rtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rtuo *ReportTutorUpdateOne) check() error {
	if v, ok := rtuo.mutation.Score(); ok {
		if err := reporttutor.ScoreValidator(v); err != nil {
			return &ValidationError{Name: "score", err: fmt.Errorf(`ent: validator failed for field "ReportTutor.score": %w`, err)}
		}
	}
	return nil
}

func (rtuo *ReportTutorUpdateOne) sqlSave(ctx context.Context) (_node *ReportTutor, err error) {
	if err := rtuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(reporttutor.Table, reporttutor.Columns, sqlgraph.NewFieldSpec(reporttutor.FieldID, field.TypeInt))
	id, ok := rtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ReportTutor.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, reporttutor.FieldID)
		for _, f := range fields {
			if !reporttutor.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != reporttutor.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rtuo.mutation.Score(); ok {
		_spec.SetField(reporttutor.FieldScore, field.TypeFloat32, value)
	}
	if value, ok := rtuo.mutation.AddedScore(); ok {
		_spec.AddField(reporttutor.FieldScore, field.TypeFloat32, value)
	}
	if rtuo.mutation.ScoreCleared() {
		_spec.ClearField(reporttutor.FieldScore, field.TypeFloat32)
	}
	if value, ok := rtuo.mutation.ReviewMsg(); ok {
		_spec.SetField(reporttutor.FieldReviewMsg, field.TypeString, value)
	}
	if rtuo.mutation.ReviewMsgCleared() {
		_spec.ClearField(reporttutor.FieldReviewMsg, field.TypeString)
	}
	_node = &ReportTutor{config: rtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reporttutor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rtuo.mutation.done = true
	return _node, nil
}

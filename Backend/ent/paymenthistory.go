// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/paymenthistory"
	"github.com/google/uuid"
)

// PaymentHistory is the model entity for the PaymentHistory schema.
type PaymentHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount *float64 `json:"amount,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PaymentHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case paymenthistory.FieldAmount:
			values[i] = new(sql.NullFloat64)
		case paymenthistory.FieldType:
			values[i] = new(sql.NullString)
		case paymenthistory.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type PaymentHistory", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PaymentHistory fields.
func (ph *PaymentHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case paymenthistory.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ph.ID = *value
			}
		case paymenthistory.FieldAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				ph.Amount = new(float64)
				*ph.Amount = value.Float64
			}
		case paymenthistory.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				ph.Type = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this PaymentHistory.
// Note that you need to call PaymentHistory.Unwrap() before calling this method if this PaymentHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (ph *PaymentHistory) Update() *PaymentHistoryUpdateOne {
	return NewPaymentHistoryClient(ph.config).UpdateOne(ph)
}

// Unwrap unwraps the PaymentHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ph *PaymentHistory) Unwrap() *PaymentHistory {
	_tx, ok := ph.config.driver.(*txDriver)
	if !ok {
		panic("ent: PaymentHistory is not a transactional entity")
	}
	ph.config.driver = _tx.drv
	return ph
}

// String implements the fmt.Stringer.
func (ph *PaymentHistory) String() string {
	var builder strings.Builder
	builder.WriteString("PaymentHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ph.ID))
	if v := ph.Amount; v != nil {
		builder.WriteString("amount=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(ph.Type)
	builder.WriteByte(')')
	return builder.String()
}

// PaymentHistories is a parsable slice of PaymentHistory.
type PaymentHistories []*PaymentHistory

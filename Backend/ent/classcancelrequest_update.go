// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/classcancelrequest"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/match"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/predicate"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/user"
	"github.com/google/uuid"
)

// ClassCancelRequestUpdate is the builder for updating ClassCancelRequest entities.
type ClassCancelRequestUpdate struct {
	config
	hooks    []Hook
	mutation *ClassCancelRequestMutation
}

// Where appends a list predicates to the ClassCancelRequestUpdate builder.
func (ccru *ClassCancelRequestUpdate) Where(ps ...predicate.ClassCancelRequest) *ClassCancelRequestUpdate {
	ccru.mutation.Where(ps...)
	return ccru
}

// SetTitle sets the "title" field.
func (ccru *ClassCancelRequestUpdate) SetTitle(s string) *ClassCancelRequestUpdate {
	ccru.mutation.SetTitle(s)
	return ccru
}

// SetReportDate sets the "report_date" field.
func (ccru *ClassCancelRequestUpdate) SetReportDate(t time.Time) *ClassCancelRequestUpdate {
	ccru.mutation.SetReportDate(t)
	return ccru
}

// SetNillableReportDate sets the "report_date" field if the given value is not nil.
func (ccru *ClassCancelRequestUpdate) SetNillableReportDate(t *time.Time) *ClassCancelRequestUpdate {
	if t != nil {
		ccru.SetReportDate(*t)
	}
	return ccru
}

// SetImgURL sets the "img_url" field.
func (ccru *ClassCancelRequestUpdate) SetImgURL(s string) *ClassCancelRequestUpdate {
	ccru.mutation.SetImgURL(s)
	return ccru
}

// SetDescription sets the "description" field.
func (ccru *ClassCancelRequestUpdate) SetDescription(s string) *ClassCancelRequestUpdate {
	ccru.mutation.SetDescription(s)
	return ccru
}

// SetStatus sets the "status" field.
func (ccru *ClassCancelRequestUpdate) SetStatus(c classcancelrequest.Status) *ClassCancelRequestUpdate {
	ccru.mutation.SetStatus(c)
	return ccru
}

// SetMatchID sets the "match" edge to the Match entity by ID.
func (ccru *ClassCancelRequestUpdate) SetMatchID(id uuid.UUID) *ClassCancelRequestUpdate {
	ccru.mutation.SetMatchID(id)
	return ccru
}

// SetMatch sets the "match" edge to the Match entity.
func (ccru *ClassCancelRequestUpdate) SetMatch(m *Match) *ClassCancelRequestUpdate {
	return ccru.SetMatchID(m.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ccru *ClassCancelRequestUpdate) SetUserID(id uuid.UUID) *ClassCancelRequestUpdate {
	ccru.mutation.SetUserID(id)
	return ccru
}

// SetUser sets the "user" edge to the User entity.
func (ccru *ClassCancelRequestUpdate) SetUser(u *User) *ClassCancelRequestUpdate {
	return ccru.SetUserID(u.ID)
}

// Mutation returns the ClassCancelRequestMutation object of the builder.
func (ccru *ClassCancelRequestUpdate) Mutation() *ClassCancelRequestMutation {
	return ccru.mutation
}

// ClearMatch clears the "match" edge to the Match entity.
func (ccru *ClassCancelRequestUpdate) ClearMatch() *ClassCancelRequestUpdate {
	ccru.mutation.ClearMatch()
	return ccru
}

// ClearUser clears the "user" edge to the User entity.
func (ccru *ClassCancelRequestUpdate) ClearUser() *ClassCancelRequestUpdate {
	ccru.mutation.ClearUser()
	return ccru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ccru *ClassCancelRequestUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, ClassCancelRequestMutation](ctx, ccru.sqlSave, ccru.mutation, ccru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ccru *ClassCancelRequestUpdate) SaveX(ctx context.Context) int {
	affected, err := ccru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ccru *ClassCancelRequestUpdate) Exec(ctx context.Context) error {
	_, err := ccru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccru *ClassCancelRequestUpdate) ExecX(ctx context.Context) {
	if err := ccru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ccru *ClassCancelRequestUpdate) check() error {
	if v, ok := ccru.mutation.Title(); ok {
		if err := classcancelrequest.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "ClassCancelRequest.title": %w`, err)}
		}
	}
	if v, ok := ccru.mutation.Description(); ok {
		if err := classcancelrequest.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "ClassCancelRequest.description": %w`, err)}
		}
	}
	if v, ok := ccru.mutation.Status(); ok {
		if err := classcancelrequest.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "ClassCancelRequest.status": %w`, err)}
		}
	}
	if _, ok := ccru.mutation.MatchID(); ccru.mutation.MatchCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ClassCancelRequest.match"`)
	}
	if _, ok := ccru.mutation.UserID(); ccru.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ClassCancelRequest.user"`)
	}
	return nil
}

func (ccru *ClassCancelRequestUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ccru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(classcancelrequest.Table, classcancelrequest.Columns, sqlgraph.NewFieldSpec(classcancelrequest.FieldID, field.TypeUUID))
	if ps := ccru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ccru.mutation.Title(); ok {
		_spec.SetField(classcancelrequest.FieldTitle, field.TypeString, value)
	}
	if value, ok := ccru.mutation.ReportDate(); ok {
		_spec.SetField(classcancelrequest.FieldReportDate, field.TypeTime, value)
	}
	if value, ok := ccru.mutation.ImgURL(); ok {
		_spec.SetField(classcancelrequest.FieldImgURL, field.TypeString, value)
	}
	if value, ok := ccru.mutation.Description(); ok {
		_spec.SetField(classcancelrequest.FieldDescription, field.TypeString, value)
	}
	if value, ok := ccru.mutation.Status(); ok {
		_spec.SetField(classcancelrequest.FieldStatus, field.TypeEnum, value)
	}
	if ccru.mutation.MatchCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   classcancelrequest.MatchTable,
			Columns: []string{classcancelrequest.MatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: match.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccru.mutation.MatchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   classcancelrequest.MatchTable,
			Columns: []string{classcancelrequest.MatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: match.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ccru.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   classcancelrequest.UserTable,
			Columns: []string{classcancelrequest.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccru.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   classcancelrequest.UserTable,
			Columns: []string{classcancelrequest.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ccru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{classcancelrequest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ccru.mutation.done = true
	return n, nil
}

// ClassCancelRequestUpdateOne is the builder for updating a single ClassCancelRequest entity.
type ClassCancelRequestUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ClassCancelRequestMutation
}

// SetTitle sets the "title" field.
func (ccruo *ClassCancelRequestUpdateOne) SetTitle(s string) *ClassCancelRequestUpdateOne {
	ccruo.mutation.SetTitle(s)
	return ccruo
}

// SetReportDate sets the "report_date" field.
func (ccruo *ClassCancelRequestUpdateOne) SetReportDate(t time.Time) *ClassCancelRequestUpdateOne {
	ccruo.mutation.SetReportDate(t)
	return ccruo
}

// SetNillableReportDate sets the "report_date" field if the given value is not nil.
func (ccruo *ClassCancelRequestUpdateOne) SetNillableReportDate(t *time.Time) *ClassCancelRequestUpdateOne {
	if t != nil {
		ccruo.SetReportDate(*t)
	}
	return ccruo
}

// SetImgURL sets the "img_url" field.
func (ccruo *ClassCancelRequestUpdateOne) SetImgURL(s string) *ClassCancelRequestUpdateOne {
	ccruo.mutation.SetImgURL(s)
	return ccruo
}

// SetDescription sets the "description" field.
func (ccruo *ClassCancelRequestUpdateOne) SetDescription(s string) *ClassCancelRequestUpdateOne {
	ccruo.mutation.SetDescription(s)
	return ccruo
}

// SetStatus sets the "status" field.
func (ccruo *ClassCancelRequestUpdateOne) SetStatus(c classcancelrequest.Status) *ClassCancelRequestUpdateOne {
	ccruo.mutation.SetStatus(c)
	return ccruo
}

// SetMatchID sets the "match" edge to the Match entity by ID.
func (ccruo *ClassCancelRequestUpdateOne) SetMatchID(id uuid.UUID) *ClassCancelRequestUpdateOne {
	ccruo.mutation.SetMatchID(id)
	return ccruo
}

// SetMatch sets the "match" edge to the Match entity.
func (ccruo *ClassCancelRequestUpdateOne) SetMatch(m *Match) *ClassCancelRequestUpdateOne {
	return ccruo.SetMatchID(m.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ccruo *ClassCancelRequestUpdateOne) SetUserID(id uuid.UUID) *ClassCancelRequestUpdateOne {
	ccruo.mutation.SetUserID(id)
	return ccruo
}

// SetUser sets the "user" edge to the User entity.
func (ccruo *ClassCancelRequestUpdateOne) SetUser(u *User) *ClassCancelRequestUpdateOne {
	return ccruo.SetUserID(u.ID)
}

// Mutation returns the ClassCancelRequestMutation object of the builder.
func (ccruo *ClassCancelRequestUpdateOne) Mutation() *ClassCancelRequestMutation {
	return ccruo.mutation
}

// ClearMatch clears the "match" edge to the Match entity.
func (ccruo *ClassCancelRequestUpdateOne) ClearMatch() *ClassCancelRequestUpdateOne {
	ccruo.mutation.ClearMatch()
	return ccruo
}

// ClearUser clears the "user" edge to the User entity.
func (ccruo *ClassCancelRequestUpdateOne) ClearUser() *ClassCancelRequestUpdateOne {
	ccruo.mutation.ClearUser()
	return ccruo
}

// Where appends a list predicates to the ClassCancelRequestUpdate builder.
func (ccruo *ClassCancelRequestUpdateOne) Where(ps ...predicate.ClassCancelRequest) *ClassCancelRequestUpdateOne {
	ccruo.mutation.Where(ps...)
	return ccruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ccruo *ClassCancelRequestUpdateOne) Select(field string, fields ...string) *ClassCancelRequestUpdateOne {
	ccruo.fields = append([]string{field}, fields...)
	return ccruo
}

// Save executes the query and returns the updated ClassCancelRequest entity.
func (ccruo *ClassCancelRequestUpdateOne) Save(ctx context.Context) (*ClassCancelRequest, error) {
	return withHooks[*ClassCancelRequest, ClassCancelRequestMutation](ctx, ccruo.sqlSave, ccruo.mutation, ccruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ccruo *ClassCancelRequestUpdateOne) SaveX(ctx context.Context) *ClassCancelRequest {
	node, err := ccruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ccruo *ClassCancelRequestUpdateOne) Exec(ctx context.Context) error {
	_, err := ccruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccruo *ClassCancelRequestUpdateOne) ExecX(ctx context.Context) {
	if err := ccruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ccruo *ClassCancelRequestUpdateOne) check() error {
	if v, ok := ccruo.mutation.Title(); ok {
		if err := classcancelrequest.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "ClassCancelRequest.title": %w`, err)}
		}
	}
	if v, ok := ccruo.mutation.Description(); ok {
		if err := classcancelrequest.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "ClassCancelRequest.description": %w`, err)}
		}
	}
	if v, ok := ccruo.mutation.Status(); ok {
		if err := classcancelrequest.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "ClassCancelRequest.status": %w`, err)}
		}
	}
	if _, ok := ccruo.mutation.MatchID(); ccruo.mutation.MatchCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ClassCancelRequest.match"`)
	}
	if _, ok := ccruo.mutation.UserID(); ccruo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ClassCancelRequest.user"`)
	}
	return nil
}

func (ccruo *ClassCancelRequestUpdateOne) sqlSave(ctx context.Context) (_node *ClassCancelRequest, err error) {
	if err := ccruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(classcancelrequest.Table, classcancelrequest.Columns, sqlgraph.NewFieldSpec(classcancelrequest.FieldID, field.TypeUUID))
	id, ok := ccruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ClassCancelRequest.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ccruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, classcancelrequest.FieldID)
		for _, f := range fields {
			if !classcancelrequest.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != classcancelrequest.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ccruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ccruo.mutation.Title(); ok {
		_spec.SetField(classcancelrequest.FieldTitle, field.TypeString, value)
	}
	if value, ok := ccruo.mutation.ReportDate(); ok {
		_spec.SetField(classcancelrequest.FieldReportDate, field.TypeTime, value)
	}
	if value, ok := ccruo.mutation.ImgURL(); ok {
		_spec.SetField(classcancelrequest.FieldImgURL, field.TypeString, value)
	}
	if value, ok := ccruo.mutation.Description(); ok {
		_spec.SetField(classcancelrequest.FieldDescription, field.TypeString, value)
	}
	if value, ok := ccruo.mutation.Status(); ok {
		_spec.SetField(classcancelrequest.FieldStatus, field.TypeEnum, value)
	}
	if ccruo.mutation.MatchCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   classcancelrequest.MatchTable,
			Columns: []string{classcancelrequest.MatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: match.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccruo.mutation.MatchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   classcancelrequest.MatchTable,
			Columns: []string{classcancelrequest.MatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: match.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ccruo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   classcancelrequest.UserTable,
			Columns: []string{classcancelrequest.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ccruo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   classcancelrequest.UserTable,
			Columns: []string{classcancelrequest.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ClassCancelRequest{config: ccruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ccruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{classcancelrequest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ccruo.mutation.done = true
	return _node, nil
}

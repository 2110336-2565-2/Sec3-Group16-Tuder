// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/appointment"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/match"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/predicate"
	"github.com/google/uuid"
)

// AppointmentUpdate is the builder for updating Appointment entities.
type AppointmentUpdate struct {
	config
	hooks    []Hook
	mutation *AppointmentMutation
}

// Where appends a list predicates to the AppointmentUpdate builder.
func (au *AppointmentUpdate) Where(ps ...predicate.Appointment) *AppointmentUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetStatus sets the "status" field.
func (au *AppointmentUpdate) SetStatus(a appointment.Status) *AppointmentUpdate {
	au.mutation.SetStatus(a)
	return au
}

// SetMatchID sets the "match" edge to the Match entity by ID.
func (au *AppointmentUpdate) SetMatchID(id uuid.UUID) *AppointmentUpdate {
	au.mutation.SetMatchID(id)
	return au
}

// SetNillableMatchID sets the "match" edge to the Match entity by ID if the given value is not nil.
func (au *AppointmentUpdate) SetNillableMatchID(id *uuid.UUID) *AppointmentUpdate {
	if id != nil {
		au = au.SetMatchID(*id)
	}
	return au
}

// SetMatch sets the "match" edge to the Match entity.
func (au *AppointmentUpdate) SetMatch(m *Match) *AppointmentUpdate {
	return au.SetMatchID(m.ID)
}

// Mutation returns the AppointmentMutation object of the builder.
func (au *AppointmentUpdate) Mutation() *AppointmentMutation {
	return au.mutation
}

// ClearMatch clears the "match" edge to the Match entity.
func (au *AppointmentUpdate) ClearMatch() *AppointmentUpdate {
	au.mutation.ClearMatch()
	return au
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AppointmentUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, AppointmentMutation](ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AppointmentUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AppointmentUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AppointmentUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AppointmentUpdate) check() error {
	if v, ok := au.mutation.Status(); ok {
		if err := appointment.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Appointment.status": %w`, err)}
		}
	}
	return nil
}

func (au *AppointmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(appointment.Table, appointment.Columns, sqlgraph.NewFieldSpec(appointment.FieldID, field.TypeUUID))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Status(); ok {
		_spec.SetField(appointment.FieldStatus, field.TypeEnum, value)
	}
	if au.mutation.MatchCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appointment.MatchTable,
			Columns: []string{appointment.MatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: match.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.MatchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appointment.MatchTable,
			Columns: []string{appointment.MatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: match.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appointment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AppointmentUpdateOne is the builder for updating a single Appointment entity.
type AppointmentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AppointmentMutation
}

// SetStatus sets the "status" field.
func (auo *AppointmentUpdateOne) SetStatus(a appointment.Status) *AppointmentUpdateOne {
	auo.mutation.SetStatus(a)
	return auo
}

// SetMatchID sets the "match" edge to the Match entity by ID.
func (auo *AppointmentUpdateOne) SetMatchID(id uuid.UUID) *AppointmentUpdateOne {
	auo.mutation.SetMatchID(id)
	return auo
}

// SetNillableMatchID sets the "match" edge to the Match entity by ID if the given value is not nil.
func (auo *AppointmentUpdateOne) SetNillableMatchID(id *uuid.UUID) *AppointmentUpdateOne {
	if id != nil {
		auo = auo.SetMatchID(*id)
	}
	return auo
}

// SetMatch sets the "match" edge to the Match entity.
func (auo *AppointmentUpdateOne) SetMatch(m *Match) *AppointmentUpdateOne {
	return auo.SetMatchID(m.ID)
}

// Mutation returns the AppointmentMutation object of the builder.
func (auo *AppointmentUpdateOne) Mutation() *AppointmentMutation {
	return auo.mutation
}

// ClearMatch clears the "match" edge to the Match entity.
func (auo *AppointmentUpdateOne) ClearMatch() *AppointmentUpdateOne {
	auo.mutation.ClearMatch()
	return auo
}

// Where appends a list predicates to the AppointmentUpdate builder.
func (auo *AppointmentUpdateOne) Where(ps ...predicate.Appointment) *AppointmentUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AppointmentUpdateOne) Select(field string, fields ...string) *AppointmentUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Appointment entity.
func (auo *AppointmentUpdateOne) Save(ctx context.Context) (*Appointment, error) {
	return withHooks[*Appointment, AppointmentMutation](ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AppointmentUpdateOne) SaveX(ctx context.Context) *Appointment {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AppointmentUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AppointmentUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AppointmentUpdateOne) check() error {
	if v, ok := auo.mutation.Status(); ok {
		if err := appointment.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Appointment.status": %w`, err)}
		}
	}
	return nil
}

func (auo *AppointmentUpdateOne) sqlSave(ctx context.Context) (_node *Appointment, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(appointment.Table, appointment.Columns, sqlgraph.NewFieldSpec(appointment.FieldID, field.TypeUUID))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Appointment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appointment.FieldID)
		for _, f := range fields {
			if !appointment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != appointment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Status(); ok {
		_spec.SetField(appointment.FieldStatus, field.TypeEnum, value)
	}
	if auo.mutation.MatchCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appointment.MatchTable,
			Columns: []string{appointment.MatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: match.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.MatchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appointment.MatchTable,
			Columns: []string{appointment.MatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: match.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Appointment{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appointment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/reviewtutor"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/tutor"
	"github.com/google/uuid"
)

// ReviewTutorCreate is the builder for creating a ReviewTutor entity.
type ReviewTutorCreate struct {
	config
	mutation *ReviewTutorMutation
	hooks    []Hook
}

// SetScore sets the "score" field.
func (rtc *ReviewTutorCreate) SetScore(f float32) *ReviewTutorCreate {
	rtc.mutation.SetScore(f)
	return rtc
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (rtc *ReviewTutorCreate) SetNillableScore(f *float32) *ReviewTutorCreate {
	if f != nil {
		rtc.SetScore(*f)
	}
	return rtc
}

// SetReviewMsg sets the "review_msg" field.
func (rtc *ReviewTutorCreate) SetReviewMsg(s string) *ReviewTutorCreate {
	rtc.mutation.SetReviewMsg(s)
	return rtc
}

// SetNillableReviewMsg sets the "review_msg" field if the given value is not nil.
func (rtc *ReviewTutorCreate) SetNillableReviewMsg(s *string) *ReviewTutorCreate {
	if s != nil {
		rtc.SetReviewMsg(*s)
	}
	return rtc
}

// SetTutorID sets the "tutor" edge to the Tutor entity by ID.
func (rtc *ReviewTutorCreate) SetTutorID(id uuid.UUID) *ReviewTutorCreate {
	rtc.mutation.SetTutorID(id)
	return rtc
}

// SetTutor sets the "tutor" edge to the Tutor entity.
func (rtc *ReviewTutorCreate) SetTutor(t *Tutor) *ReviewTutorCreate {
	return rtc.SetTutorID(t.ID)
}

// Mutation returns the ReviewTutorMutation object of the builder.
func (rtc *ReviewTutorCreate) Mutation() *ReviewTutorMutation {
	return rtc.mutation
}

// Save creates the ReviewTutor in the database.
func (rtc *ReviewTutorCreate) Save(ctx context.Context) (*ReviewTutor, error) {
	return withHooks[*ReviewTutor, ReviewTutorMutation](ctx, rtc.sqlSave, rtc.mutation, rtc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rtc *ReviewTutorCreate) SaveX(ctx context.Context) *ReviewTutor {
	v, err := rtc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rtc *ReviewTutorCreate) Exec(ctx context.Context) error {
	_, err := rtc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rtc *ReviewTutorCreate) ExecX(ctx context.Context) {
	if err := rtc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rtc *ReviewTutorCreate) check() error {
	if v, ok := rtc.mutation.Score(); ok {
		if err := reviewtutor.ScoreValidator(v); err != nil {
			return &ValidationError{Name: "score", err: fmt.Errorf(`ent: validator failed for field "ReviewTutor.score": %w`, err)}
		}
	}
	if _, ok := rtc.mutation.TutorID(); !ok {
		return &ValidationError{Name: "tutor", err: errors.New(`ent: missing required edge "ReviewTutor.tutor"`)}
	}
	return nil
}

func (rtc *ReviewTutorCreate) sqlSave(ctx context.Context) (*ReviewTutor, error) {
	if err := rtc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rtc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rtc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rtc.mutation.id = &_node.ID
	rtc.mutation.done = true
	return _node, nil
}

func (rtc *ReviewTutorCreate) createSpec() (*ReviewTutor, *sqlgraph.CreateSpec) {
	var (
		_node = &ReviewTutor{config: rtc.config}
		_spec = sqlgraph.NewCreateSpec(reviewtutor.Table, sqlgraph.NewFieldSpec(reviewtutor.FieldID, field.TypeInt))
	)
	if value, ok := rtc.mutation.Score(); ok {
		_spec.SetField(reviewtutor.FieldScore, field.TypeFloat32, value)
		_node.Score = &value
	}
	if value, ok := rtc.mutation.ReviewMsg(); ok {
		_spec.SetField(reviewtutor.FieldReviewMsg, field.TypeString, value)
		_node.ReviewMsg = &value
	}
	if nodes := rtc.mutation.TutorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reviewtutor.TutorTable,
			Columns: []string{reviewtutor.TutorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: tutor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.tutor_review_tutor = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ReviewTutorCreateBulk is the builder for creating many ReviewTutor entities in bulk.
type ReviewTutorCreateBulk struct {
	config
	builders []*ReviewTutorCreate
}

// Save creates the ReviewTutor entities in the database.
func (rtcb *ReviewTutorCreateBulk) Save(ctx context.Context) ([]*ReviewTutor, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rtcb.builders))
	nodes := make([]*ReviewTutor, len(rtcb.builders))
	mutators := make([]Mutator, len(rtcb.builders))
	for i := range rtcb.builders {
		func(i int, root context.Context) {
			builder := rtcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ReviewTutorMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rtcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rtcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rtcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rtcb *ReviewTutorCreateBulk) SaveX(ctx context.Context) []*ReviewTutor {
	v, err := rtcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rtcb *ReviewTutorCreateBulk) Exec(ctx context.Context) error {
	_, err := rtcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rtcb *ReviewTutorCreateBulk) ExecX(ctx context.Context) {
	if err := rtcb.Exec(ctx); err != nil {
		panic(err)
	}
}

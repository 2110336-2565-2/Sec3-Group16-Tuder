// Code generated by ent, DO NOT EDIT.

package classcancelrequest

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(sql.FieldLTE(FieldID, id))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(sql.FieldEQ(FieldTitle, v))
}

// ReportDate applies equality check predicate on the "report_date" field. It's identical to ReportDateEQ.
func ReportDate(v time.Time) predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(sql.FieldEQ(FieldReportDate, v))
}

// ImgURL applies equality check predicate on the "img_url" field. It's identical to ImgURLEQ.
func ImgURL(v string) predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(sql.FieldEQ(FieldImgURL, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(sql.FieldEQ(FieldDescription, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(sql.FieldContainsFold(FieldTitle, v))
}

// ReportDateEQ applies the EQ predicate on the "report_date" field.
func ReportDateEQ(v time.Time) predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(sql.FieldEQ(FieldReportDate, v))
}

// ReportDateNEQ applies the NEQ predicate on the "report_date" field.
func ReportDateNEQ(v time.Time) predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(sql.FieldNEQ(FieldReportDate, v))
}

// ReportDateIn applies the In predicate on the "report_date" field.
func ReportDateIn(vs ...time.Time) predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(sql.FieldIn(FieldReportDate, vs...))
}

// ReportDateNotIn applies the NotIn predicate on the "report_date" field.
func ReportDateNotIn(vs ...time.Time) predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(sql.FieldNotIn(FieldReportDate, vs...))
}

// ReportDateGT applies the GT predicate on the "report_date" field.
func ReportDateGT(v time.Time) predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(sql.FieldGT(FieldReportDate, v))
}

// ReportDateGTE applies the GTE predicate on the "report_date" field.
func ReportDateGTE(v time.Time) predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(sql.FieldGTE(FieldReportDate, v))
}

// ReportDateLT applies the LT predicate on the "report_date" field.
func ReportDateLT(v time.Time) predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(sql.FieldLT(FieldReportDate, v))
}

// ReportDateLTE applies the LTE predicate on the "report_date" field.
func ReportDateLTE(v time.Time) predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(sql.FieldLTE(FieldReportDate, v))
}

// ImgURLEQ applies the EQ predicate on the "img_url" field.
func ImgURLEQ(v string) predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(sql.FieldEQ(FieldImgURL, v))
}

// ImgURLNEQ applies the NEQ predicate on the "img_url" field.
func ImgURLNEQ(v string) predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(sql.FieldNEQ(FieldImgURL, v))
}

// ImgURLIn applies the In predicate on the "img_url" field.
func ImgURLIn(vs ...string) predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(sql.FieldIn(FieldImgURL, vs...))
}

// ImgURLNotIn applies the NotIn predicate on the "img_url" field.
func ImgURLNotIn(vs ...string) predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(sql.FieldNotIn(FieldImgURL, vs...))
}

// ImgURLGT applies the GT predicate on the "img_url" field.
func ImgURLGT(v string) predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(sql.FieldGT(FieldImgURL, v))
}

// ImgURLGTE applies the GTE predicate on the "img_url" field.
func ImgURLGTE(v string) predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(sql.FieldGTE(FieldImgURL, v))
}

// ImgURLLT applies the LT predicate on the "img_url" field.
func ImgURLLT(v string) predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(sql.FieldLT(FieldImgURL, v))
}

// ImgURLLTE applies the LTE predicate on the "img_url" field.
func ImgURLLTE(v string) predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(sql.FieldLTE(FieldImgURL, v))
}

// ImgURLContains applies the Contains predicate on the "img_url" field.
func ImgURLContains(v string) predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(sql.FieldContains(FieldImgURL, v))
}

// ImgURLHasPrefix applies the HasPrefix predicate on the "img_url" field.
func ImgURLHasPrefix(v string) predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(sql.FieldHasPrefix(FieldImgURL, v))
}

// ImgURLHasSuffix applies the HasSuffix predicate on the "img_url" field.
func ImgURLHasSuffix(v string) predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(sql.FieldHasSuffix(FieldImgURL, v))
}

// ImgURLEqualFold applies the EqualFold predicate on the "img_url" field.
func ImgURLEqualFold(v string) predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(sql.FieldEqualFold(FieldImgURL, v))
}

// ImgURLContainsFold applies the ContainsFold predicate on the "img_url" field.
func ImgURLContainsFold(v string) predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(sql.FieldContainsFold(FieldImgURL, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(sql.FieldContainsFold(FieldDescription, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(sql.FieldNotIn(FieldStatus, vs...))
}

// HasMatch applies the HasEdge predicate on the "match" edge.
func HasMatch() predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, MatchTable, MatchColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMatchWith applies the HasEdge predicate on the "match" edge with a given conditions (other predicates).
func HasMatchWith(preds ...predicate.Match) predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MatchInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, MatchTable, MatchColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ClassCancelRequest) predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ClassCancelRequest) predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ClassCancelRequest) predicate.ClassCancelRequest {
	return predicate.ClassCancelRequest(func(s *sql.Selector) {
		p(s.Not())
	})
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/cancelrequest"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/predicate"
)

// CancelRequestDelete is the builder for deleting a CancelRequest entity.
type CancelRequestDelete struct {
	config
	hooks    []Hook
	mutation *CancelRequestMutation
}

// Where appends a list predicates to the CancelRequestDelete builder.
func (crd *CancelRequestDelete) Where(ps ...predicate.CancelRequest) *CancelRequestDelete {
	crd.mutation.Where(ps...)
	return crd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (crd *CancelRequestDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, CancelRequestMutation](ctx, crd.sqlExec, crd.mutation, crd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (crd *CancelRequestDelete) ExecX(ctx context.Context) int {
	n, err := crd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (crd *CancelRequestDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(cancelrequest.Table, sqlgraph.NewFieldSpec(cancelrequest.FieldID, field.TypeUUID))
	if ps := crd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, crd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	crd.mutation.done = true
	return affected, err
}

// CancelRequestDeleteOne is the builder for deleting a single CancelRequest entity.
type CancelRequestDeleteOne struct {
	crd *CancelRequestDelete
}

// Where appends a list predicates to the CancelRequestDelete builder.
func (crdo *CancelRequestDeleteOne) Where(ps ...predicate.CancelRequest) *CancelRequestDeleteOne {
	crdo.crd.mutation.Where(ps...)
	return crdo
}

// Exec executes the deletion query.
func (crdo *CancelRequestDeleteOne) Exec(ctx context.Context) error {
	n, err := crdo.crd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{cancelrequest.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (crdo *CancelRequestDeleteOne) ExecX(ctx context.Context) {
	if err := crdo.Exec(ctx); err != nil {
		panic(err)
	}
}

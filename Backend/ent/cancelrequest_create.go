// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/cancelrequest"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/match"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/user"
	"github.com/google/uuid"
)

// CancelRequestCreate is the builder for creating a CancelRequest entity.
type CancelRequestCreate struct {
	config
	mutation *CancelRequestMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (crc *CancelRequestCreate) SetTitle(s string) *CancelRequestCreate {
	crc.mutation.SetTitle(s)
	return crc
}

// SetReportDate sets the "report_date" field.
func (crc *CancelRequestCreate) SetReportDate(t time.Time) *CancelRequestCreate {
	crc.mutation.SetReportDate(t)
	return crc
}

// SetNillableReportDate sets the "report_date" field if the given value is not nil.
func (crc *CancelRequestCreate) SetNillableReportDate(t *time.Time) *CancelRequestCreate {
	if t != nil {
		crc.SetReportDate(*t)
	}
	return crc
}

// SetImgURL sets the "img_url" field.
func (crc *CancelRequestCreate) SetImgURL(s string) *CancelRequestCreate {
	crc.mutation.SetImgURL(s)
	return crc
}

// SetDescription sets the "description" field.
func (crc *CancelRequestCreate) SetDescription(s string) *CancelRequestCreate {
	crc.mutation.SetDescription(s)
	return crc
}

// SetStatus sets the "status" field.
func (crc *CancelRequestCreate) SetStatus(c cancelrequest.Status) *CancelRequestCreate {
	crc.mutation.SetStatus(c)
	return crc
}

// SetID sets the "id" field.
func (crc *CancelRequestCreate) SetID(u uuid.UUID) *CancelRequestCreate {
	crc.mutation.SetID(u)
	return crc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (crc *CancelRequestCreate) SetNillableID(u *uuid.UUID) *CancelRequestCreate {
	if u != nil {
		crc.SetID(*u)
	}
	return crc
}

// SetMatchID sets the "match" edge to the Match entity by ID.
func (crc *CancelRequestCreate) SetMatchID(id uuid.UUID) *CancelRequestCreate {
	crc.mutation.SetMatchID(id)
	return crc
}

// SetMatch sets the "match" edge to the Match entity.
func (crc *CancelRequestCreate) SetMatch(m *Match) *CancelRequestCreate {
	return crc.SetMatchID(m.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (crc *CancelRequestCreate) SetUserID(id uuid.UUID) *CancelRequestCreate {
	crc.mutation.SetUserID(id)
	return crc
}

// SetUser sets the "user" edge to the User entity.
func (crc *CancelRequestCreate) SetUser(u *User) *CancelRequestCreate {
	return crc.SetUserID(u.ID)
}

// Mutation returns the CancelRequestMutation object of the builder.
func (crc *CancelRequestCreate) Mutation() *CancelRequestMutation {
	return crc.mutation
}

// Save creates the CancelRequest in the database.
func (crc *CancelRequestCreate) Save(ctx context.Context) (*CancelRequest, error) {
	crc.defaults()
	return withHooks[*CancelRequest, CancelRequestMutation](ctx, crc.sqlSave, crc.mutation, crc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (crc *CancelRequestCreate) SaveX(ctx context.Context) *CancelRequest {
	v, err := crc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (crc *CancelRequestCreate) Exec(ctx context.Context) error {
	_, err := crc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (crc *CancelRequestCreate) ExecX(ctx context.Context) {
	if err := crc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (crc *CancelRequestCreate) defaults() {
	if _, ok := crc.mutation.ReportDate(); !ok {
		v := cancelrequest.DefaultReportDate()
		crc.mutation.SetReportDate(v)
	}
	if _, ok := crc.mutation.ID(); !ok {
		v := cancelrequest.DefaultID()
		crc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (crc *CancelRequestCreate) check() error {
	if _, ok := crc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "CancelRequest.title"`)}
	}
	if v, ok := crc.mutation.Title(); ok {
		if err := cancelrequest.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "CancelRequest.title": %w`, err)}
		}
	}
	if _, ok := crc.mutation.ReportDate(); !ok {
		return &ValidationError{Name: "report_date", err: errors.New(`ent: missing required field "CancelRequest.report_date"`)}
	}
	if _, ok := crc.mutation.ImgURL(); !ok {
		return &ValidationError{Name: "img_url", err: errors.New(`ent: missing required field "CancelRequest.img_url"`)}
	}
	if _, ok := crc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "CancelRequest.description"`)}
	}
	if v, ok := crc.mutation.Description(); ok {
		if err := cancelrequest.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "CancelRequest.description": %w`, err)}
		}
	}
	if _, ok := crc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "CancelRequest.status"`)}
	}
	if v, ok := crc.mutation.Status(); ok {
		if err := cancelrequest.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "CancelRequest.status": %w`, err)}
		}
	}
	if _, ok := crc.mutation.MatchID(); !ok {
		return &ValidationError{Name: "match", err: errors.New(`ent: missing required edge "CancelRequest.match"`)}
	}
	if _, ok := crc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "CancelRequest.user"`)}
	}
	return nil
}

func (crc *CancelRequestCreate) sqlSave(ctx context.Context) (*CancelRequest, error) {
	if err := crc.check(); err != nil {
		return nil, err
	}
	_node, _spec := crc.createSpec()
	if err := sqlgraph.CreateNode(ctx, crc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	crc.mutation.id = &_node.ID
	crc.mutation.done = true
	return _node, nil
}

func (crc *CancelRequestCreate) createSpec() (*CancelRequest, *sqlgraph.CreateSpec) {
	var (
		_node = &CancelRequest{config: crc.config}
		_spec = sqlgraph.NewCreateSpec(cancelrequest.Table, sqlgraph.NewFieldSpec(cancelrequest.FieldID, field.TypeUUID))
	)
	if id, ok := crc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := crc.mutation.Title(); ok {
		_spec.SetField(cancelrequest.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := crc.mutation.ReportDate(); ok {
		_spec.SetField(cancelrequest.FieldReportDate, field.TypeTime, value)
		_node.ReportDate = value
	}
	if value, ok := crc.mutation.ImgURL(); ok {
		_spec.SetField(cancelrequest.FieldImgURL, field.TypeString, value)
		_node.ImgURL = value
	}
	if value, ok := crc.mutation.Description(); ok {
		_spec.SetField(cancelrequest.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := crc.mutation.Status(); ok {
		_spec.SetField(cancelrequest.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if nodes := crc.mutation.MatchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   cancelrequest.MatchTable,
			Columns: []string{cancelrequest.MatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(match.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.cancel_request_match = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := crc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cancelrequest.UserTable,
			Columns: []string{cancelrequest.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_cancel_request = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CancelRequestCreateBulk is the builder for creating many CancelRequest entities in bulk.
type CancelRequestCreateBulk struct {
	config
	builders []*CancelRequestCreate
}

// Save creates the CancelRequest entities in the database.
func (crcb *CancelRequestCreateBulk) Save(ctx context.Context) ([]*CancelRequest, error) {
	specs := make([]*sqlgraph.CreateSpec, len(crcb.builders))
	nodes := make([]*CancelRequest, len(crcb.builders))
	mutators := make([]Mutator, len(crcb.builders))
	for i := range crcb.builders {
		func(i int, root context.Context) {
			builder := crcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CancelRequestMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, crcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, crcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, crcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (crcb *CancelRequestCreateBulk) SaveX(ctx context.Context) []*CancelRequest {
	v, err := crcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (crcb *CancelRequestCreateBulk) Exec(ctx context.Context) error {
	_, err := crcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (crcb *CancelRequestCreateBulk) ExecX(ctx context.Context) {
	if err := crcb.Exec(ctx); err != nil {
		panic(err)
	}
}

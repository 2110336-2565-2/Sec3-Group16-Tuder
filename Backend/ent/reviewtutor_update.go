// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/predicate"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/reviewtutor"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/student"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/tutor"
	"github.com/google/uuid"
)

// ReviewTutorUpdate is the builder for updating ReviewTutor entities.
type ReviewTutorUpdate struct {
	config
	hooks    []Hook
	mutation *ReviewTutorMutation
}

// Where appends a list predicates to the ReviewTutorUpdate builder.
func (rtu *ReviewTutorUpdate) Where(ps ...predicate.ReviewTutor) *ReviewTutorUpdate {
	rtu.mutation.Where(ps...)
	return rtu
}

// SetScore sets the "score" field.
func (rtu *ReviewTutorUpdate) SetScore(f float32) *ReviewTutorUpdate {
	rtu.mutation.ResetScore()
	rtu.mutation.SetScore(f)
	return rtu
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (rtu *ReviewTutorUpdate) SetNillableScore(f *float32) *ReviewTutorUpdate {
	if f != nil {
		rtu.SetScore(*f)
	}
	return rtu
}

// AddScore adds f to the "score" field.
func (rtu *ReviewTutorUpdate) AddScore(f float32) *ReviewTutorUpdate {
	rtu.mutation.AddScore(f)
	return rtu
}

// ClearScore clears the value of the "score" field.
func (rtu *ReviewTutorUpdate) ClearScore() *ReviewTutorUpdate {
	rtu.mutation.ClearScore()
	return rtu
}

// SetReviewMsg sets the "review_msg" field.
func (rtu *ReviewTutorUpdate) SetReviewMsg(s string) *ReviewTutorUpdate {
	rtu.mutation.SetReviewMsg(s)
	return rtu
}

// SetNillableReviewMsg sets the "review_msg" field if the given value is not nil.
func (rtu *ReviewTutorUpdate) SetNillableReviewMsg(s *string) *ReviewTutorUpdate {
	if s != nil {
		rtu.SetReviewMsg(*s)
	}
	return rtu
}

// ClearReviewMsg clears the value of the "review_msg" field.
func (rtu *ReviewTutorUpdate) ClearReviewMsg() *ReviewTutorUpdate {
	rtu.mutation.ClearReviewMsg()
	return rtu
}

// AddTutorIDs adds the "tutor" edge to the Tutor entity by IDs.
func (rtu *ReviewTutorUpdate) AddTutorIDs(ids ...uuid.UUID) *ReviewTutorUpdate {
	rtu.mutation.AddTutorIDs(ids...)
	return rtu
}

// AddTutor adds the "tutor" edges to the Tutor entity.
func (rtu *ReviewTutorUpdate) AddTutor(t ...*Tutor) *ReviewTutorUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return rtu.AddTutorIDs(ids...)
}

// AddStudentIDs adds the "student" edge to the Student entity by IDs.
func (rtu *ReviewTutorUpdate) AddStudentIDs(ids ...uuid.UUID) *ReviewTutorUpdate {
	rtu.mutation.AddStudentIDs(ids...)
	return rtu
}

// AddStudent adds the "student" edges to the Student entity.
func (rtu *ReviewTutorUpdate) AddStudent(s ...*Student) *ReviewTutorUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return rtu.AddStudentIDs(ids...)
}

// Mutation returns the ReviewTutorMutation object of the builder.
func (rtu *ReviewTutorUpdate) Mutation() *ReviewTutorMutation {
	return rtu.mutation
}

// ClearTutor clears all "tutor" edges to the Tutor entity.
func (rtu *ReviewTutorUpdate) ClearTutor() *ReviewTutorUpdate {
	rtu.mutation.ClearTutor()
	return rtu
}

// RemoveTutorIDs removes the "tutor" edge to Tutor entities by IDs.
func (rtu *ReviewTutorUpdate) RemoveTutorIDs(ids ...uuid.UUID) *ReviewTutorUpdate {
	rtu.mutation.RemoveTutorIDs(ids...)
	return rtu
}

// RemoveTutor removes "tutor" edges to Tutor entities.
func (rtu *ReviewTutorUpdate) RemoveTutor(t ...*Tutor) *ReviewTutorUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return rtu.RemoveTutorIDs(ids...)
}

// ClearStudent clears all "student" edges to the Student entity.
func (rtu *ReviewTutorUpdate) ClearStudent() *ReviewTutorUpdate {
	rtu.mutation.ClearStudent()
	return rtu
}

// RemoveStudentIDs removes the "student" edge to Student entities by IDs.
func (rtu *ReviewTutorUpdate) RemoveStudentIDs(ids ...uuid.UUID) *ReviewTutorUpdate {
	rtu.mutation.RemoveStudentIDs(ids...)
	return rtu
}

// RemoveStudent removes "student" edges to Student entities.
func (rtu *ReviewTutorUpdate) RemoveStudent(s ...*Student) *ReviewTutorUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return rtu.RemoveStudentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rtu *ReviewTutorUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, ReviewTutorMutation](ctx, rtu.sqlSave, rtu.mutation, rtu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rtu *ReviewTutorUpdate) SaveX(ctx context.Context) int {
	affected, err := rtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rtu *ReviewTutorUpdate) Exec(ctx context.Context) error {
	_, err := rtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rtu *ReviewTutorUpdate) ExecX(ctx context.Context) {
	if err := rtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rtu *ReviewTutorUpdate) check() error {
	if v, ok := rtu.mutation.Score(); ok {
		if err := reviewtutor.ScoreValidator(v); err != nil {
			return &ValidationError{Name: "score", err: fmt.Errorf(`ent: validator failed for field "ReviewTutor.score": %w`, err)}
		}
	}
	return nil
}

func (rtu *ReviewTutorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := rtu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(reviewtutor.Table, reviewtutor.Columns, sqlgraph.NewFieldSpec(reviewtutor.FieldID, field.TypeInt))
	if ps := rtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rtu.mutation.Score(); ok {
		_spec.SetField(reviewtutor.FieldScore, field.TypeFloat32, value)
	}
	if value, ok := rtu.mutation.AddedScore(); ok {
		_spec.AddField(reviewtutor.FieldScore, field.TypeFloat32, value)
	}
	if rtu.mutation.ScoreCleared() {
		_spec.ClearField(reviewtutor.FieldScore, field.TypeFloat32)
	}
	if value, ok := rtu.mutation.ReviewMsg(); ok {
		_spec.SetField(reviewtutor.FieldReviewMsg, field.TypeString, value)
	}
	if rtu.mutation.ReviewMsgCleared() {
		_spec.ClearField(reviewtutor.FieldReviewMsg, field.TypeString)
	}
	if rtu.mutation.TutorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   reviewtutor.TutorTable,
			Columns: reviewtutor.TutorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: tutor.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtu.mutation.RemovedTutorIDs(); len(nodes) > 0 && !rtu.mutation.TutorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   reviewtutor.TutorTable,
			Columns: reviewtutor.TutorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: tutor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtu.mutation.TutorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   reviewtutor.TutorTable,
			Columns: reviewtutor.TutorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: tutor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rtu.mutation.StudentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   reviewtutor.StudentTable,
			Columns: reviewtutor.StudentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: student.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtu.mutation.RemovedStudentIDs(); len(nodes) > 0 && !rtu.mutation.StudentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   reviewtutor.StudentTable,
			Columns: reviewtutor.StudentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: student.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtu.mutation.StudentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   reviewtutor.StudentTable,
			Columns: reviewtutor.StudentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: student.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reviewtutor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rtu.mutation.done = true
	return n, nil
}

// ReviewTutorUpdateOne is the builder for updating a single ReviewTutor entity.
type ReviewTutorUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ReviewTutorMutation
}

// SetScore sets the "score" field.
func (rtuo *ReviewTutorUpdateOne) SetScore(f float32) *ReviewTutorUpdateOne {
	rtuo.mutation.ResetScore()
	rtuo.mutation.SetScore(f)
	return rtuo
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (rtuo *ReviewTutorUpdateOne) SetNillableScore(f *float32) *ReviewTutorUpdateOne {
	if f != nil {
		rtuo.SetScore(*f)
	}
	return rtuo
}

// AddScore adds f to the "score" field.
func (rtuo *ReviewTutorUpdateOne) AddScore(f float32) *ReviewTutorUpdateOne {
	rtuo.mutation.AddScore(f)
	return rtuo
}

// ClearScore clears the value of the "score" field.
func (rtuo *ReviewTutorUpdateOne) ClearScore() *ReviewTutorUpdateOne {
	rtuo.mutation.ClearScore()
	return rtuo
}

// SetReviewMsg sets the "review_msg" field.
func (rtuo *ReviewTutorUpdateOne) SetReviewMsg(s string) *ReviewTutorUpdateOne {
	rtuo.mutation.SetReviewMsg(s)
	return rtuo
}

// SetNillableReviewMsg sets the "review_msg" field if the given value is not nil.
func (rtuo *ReviewTutorUpdateOne) SetNillableReviewMsg(s *string) *ReviewTutorUpdateOne {
	if s != nil {
		rtuo.SetReviewMsg(*s)
	}
	return rtuo
}

// ClearReviewMsg clears the value of the "review_msg" field.
func (rtuo *ReviewTutorUpdateOne) ClearReviewMsg() *ReviewTutorUpdateOne {
	rtuo.mutation.ClearReviewMsg()
	return rtuo
}

// AddTutorIDs adds the "tutor" edge to the Tutor entity by IDs.
func (rtuo *ReviewTutorUpdateOne) AddTutorIDs(ids ...uuid.UUID) *ReviewTutorUpdateOne {
	rtuo.mutation.AddTutorIDs(ids...)
	return rtuo
}

// AddTutor adds the "tutor" edges to the Tutor entity.
func (rtuo *ReviewTutorUpdateOne) AddTutor(t ...*Tutor) *ReviewTutorUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return rtuo.AddTutorIDs(ids...)
}

// AddStudentIDs adds the "student" edge to the Student entity by IDs.
func (rtuo *ReviewTutorUpdateOne) AddStudentIDs(ids ...uuid.UUID) *ReviewTutorUpdateOne {
	rtuo.mutation.AddStudentIDs(ids...)
	return rtuo
}

// AddStudent adds the "student" edges to the Student entity.
func (rtuo *ReviewTutorUpdateOne) AddStudent(s ...*Student) *ReviewTutorUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return rtuo.AddStudentIDs(ids...)
}

// Mutation returns the ReviewTutorMutation object of the builder.
func (rtuo *ReviewTutorUpdateOne) Mutation() *ReviewTutorMutation {
	return rtuo.mutation
}

// ClearTutor clears all "tutor" edges to the Tutor entity.
func (rtuo *ReviewTutorUpdateOne) ClearTutor() *ReviewTutorUpdateOne {
	rtuo.mutation.ClearTutor()
	return rtuo
}

// RemoveTutorIDs removes the "tutor" edge to Tutor entities by IDs.
func (rtuo *ReviewTutorUpdateOne) RemoveTutorIDs(ids ...uuid.UUID) *ReviewTutorUpdateOne {
	rtuo.mutation.RemoveTutorIDs(ids...)
	return rtuo
}

// RemoveTutor removes "tutor" edges to Tutor entities.
func (rtuo *ReviewTutorUpdateOne) RemoveTutor(t ...*Tutor) *ReviewTutorUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return rtuo.RemoveTutorIDs(ids...)
}

// ClearStudent clears all "student" edges to the Student entity.
func (rtuo *ReviewTutorUpdateOne) ClearStudent() *ReviewTutorUpdateOne {
	rtuo.mutation.ClearStudent()
	return rtuo
}

// RemoveStudentIDs removes the "student" edge to Student entities by IDs.
func (rtuo *ReviewTutorUpdateOne) RemoveStudentIDs(ids ...uuid.UUID) *ReviewTutorUpdateOne {
	rtuo.mutation.RemoveStudentIDs(ids...)
	return rtuo
}

// RemoveStudent removes "student" edges to Student entities.
func (rtuo *ReviewTutorUpdateOne) RemoveStudent(s ...*Student) *ReviewTutorUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return rtuo.RemoveStudentIDs(ids...)
}

// Where appends a list predicates to the ReviewTutorUpdate builder.
func (rtuo *ReviewTutorUpdateOne) Where(ps ...predicate.ReviewTutor) *ReviewTutorUpdateOne {
	rtuo.mutation.Where(ps...)
	return rtuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rtuo *ReviewTutorUpdateOne) Select(field string, fields ...string) *ReviewTutorUpdateOne {
	rtuo.fields = append([]string{field}, fields...)
	return rtuo
}

// Save executes the query and returns the updated ReviewTutor entity.
func (rtuo *ReviewTutorUpdateOne) Save(ctx context.Context) (*ReviewTutor, error) {
	return withHooks[*ReviewTutor, ReviewTutorMutation](ctx, rtuo.sqlSave, rtuo.mutation, rtuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rtuo *ReviewTutorUpdateOne) SaveX(ctx context.Context) *ReviewTutor {
	node, err := rtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rtuo *ReviewTutorUpdateOne) Exec(ctx context.Context) error {
	_, err := rtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rtuo *ReviewTutorUpdateOne) ExecX(ctx context.Context) {
	if err := rtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rtuo *ReviewTutorUpdateOne) check() error {
	if v, ok := rtuo.mutation.Score(); ok {
		if err := reviewtutor.ScoreValidator(v); err != nil {
			return &ValidationError{Name: "score", err: fmt.Errorf(`ent: validator failed for field "ReviewTutor.score": %w`, err)}
		}
	}
	return nil
}

func (rtuo *ReviewTutorUpdateOne) sqlSave(ctx context.Context) (_node *ReviewTutor, err error) {
	if err := rtuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(reviewtutor.Table, reviewtutor.Columns, sqlgraph.NewFieldSpec(reviewtutor.FieldID, field.TypeInt))
	id, ok := rtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ReviewTutor.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, reviewtutor.FieldID)
		for _, f := range fields {
			if !reviewtutor.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != reviewtutor.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rtuo.mutation.Score(); ok {
		_spec.SetField(reviewtutor.FieldScore, field.TypeFloat32, value)
	}
	if value, ok := rtuo.mutation.AddedScore(); ok {
		_spec.AddField(reviewtutor.FieldScore, field.TypeFloat32, value)
	}
	if rtuo.mutation.ScoreCleared() {
		_spec.ClearField(reviewtutor.FieldScore, field.TypeFloat32)
	}
	if value, ok := rtuo.mutation.ReviewMsg(); ok {
		_spec.SetField(reviewtutor.FieldReviewMsg, field.TypeString, value)
	}
	if rtuo.mutation.ReviewMsgCleared() {
		_spec.ClearField(reviewtutor.FieldReviewMsg, field.TypeString)
	}
	if rtuo.mutation.TutorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   reviewtutor.TutorTable,
			Columns: reviewtutor.TutorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: tutor.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtuo.mutation.RemovedTutorIDs(); len(nodes) > 0 && !rtuo.mutation.TutorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   reviewtutor.TutorTable,
			Columns: reviewtutor.TutorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: tutor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtuo.mutation.TutorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   reviewtutor.TutorTable,
			Columns: reviewtutor.TutorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: tutor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rtuo.mutation.StudentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   reviewtutor.StudentTable,
			Columns: reviewtutor.StudentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: student.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtuo.mutation.RemovedStudentIDs(); len(nodes) > 0 && !rtuo.mutation.StudentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   reviewtutor.StudentTable,
			Columns: reviewtutor.StudentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: student.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtuo.mutation.StudentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   reviewtutor.StudentTable,
			Columns: reviewtutor.StudentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: student.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ReviewTutor{config: rtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reviewtutor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rtuo.mutation.done = true
	return _node, nil
}

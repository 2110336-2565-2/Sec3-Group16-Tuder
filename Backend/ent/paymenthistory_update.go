// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/class"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/payment"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/paymenthistory"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/predicate"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/user"
	"github.com/google/uuid"
)

// PaymentHistoryUpdate is the builder for updating PaymentHistory entities.
type PaymentHistoryUpdate struct {
	config
	hooks    []Hook
	mutation *PaymentHistoryMutation
}

// Where appends a list predicates to the PaymentHistoryUpdate builder.
func (phu *PaymentHistoryUpdate) Where(ps ...predicate.PaymentHistory) *PaymentHistoryUpdate {
	phu.mutation.Where(ps...)
	return phu
}

// AddClasIDs adds the "class" edge to the Class entity by IDs.
func (phu *PaymentHistoryUpdate) AddClasIDs(ids ...uuid.UUID) *PaymentHistoryUpdate {
	phu.mutation.AddClasIDs(ids...)
	return phu
}

// AddClass adds the "class" edges to the Class entity.
func (phu *PaymentHistoryUpdate) AddClass(c ...*Class) *PaymentHistoryUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return phu.AddClasIDs(ids...)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (phu *PaymentHistoryUpdate) SetUserID(id uuid.UUID) *PaymentHistoryUpdate {
	phu.mutation.SetUserID(id)
	return phu
}

// SetUser sets the "user" edge to the User entity.
func (phu *PaymentHistoryUpdate) SetUser(u *User) *PaymentHistoryUpdate {
	return phu.SetUserID(u.ID)
}

// SetPaymentID sets the "payment" edge to the Payment entity by ID.
func (phu *PaymentHistoryUpdate) SetPaymentID(id uuid.UUID) *PaymentHistoryUpdate {
	phu.mutation.SetPaymentID(id)
	return phu
}

// SetPayment sets the "payment" edge to the Payment entity.
func (phu *PaymentHistoryUpdate) SetPayment(p *Payment) *PaymentHistoryUpdate {
	return phu.SetPaymentID(p.ID)
}

// Mutation returns the PaymentHistoryMutation object of the builder.
func (phu *PaymentHistoryUpdate) Mutation() *PaymentHistoryMutation {
	return phu.mutation
}

// ClearClass clears all "class" edges to the Class entity.
func (phu *PaymentHistoryUpdate) ClearClass() *PaymentHistoryUpdate {
	phu.mutation.ClearClass()
	return phu
}

// RemoveClasIDs removes the "class" edge to Class entities by IDs.
func (phu *PaymentHistoryUpdate) RemoveClasIDs(ids ...uuid.UUID) *PaymentHistoryUpdate {
	phu.mutation.RemoveClasIDs(ids...)
	return phu
}

// RemoveClass removes "class" edges to Class entities.
func (phu *PaymentHistoryUpdate) RemoveClass(c ...*Class) *PaymentHistoryUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return phu.RemoveClasIDs(ids...)
}

// ClearUser clears the "user" edge to the User entity.
func (phu *PaymentHistoryUpdate) ClearUser() *PaymentHistoryUpdate {
	phu.mutation.ClearUser()
	return phu
}

// ClearPayment clears the "payment" edge to the Payment entity.
func (phu *PaymentHistoryUpdate) ClearPayment() *PaymentHistoryUpdate {
	phu.mutation.ClearPayment()
	return phu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (phu *PaymentHistoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, PaymentHistoryMutation](ctx, phu.sqlSave, phu.mutation, phu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (phu *PaymentHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := phu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (phu *PaymentHistoryUpdate) Exec(ctx context.Context) error {
	_, err := phu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (phu *PaymentHistoryUpdate) ExecX(ctx context.Context) {
	if err := phu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (phu *PaymentHistoryUpdate) check() error {
	if _, ok := phu.mutation.UserID(); phu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PaymentHistory.user"`)
	}
	if _, ok := phu.mutation.PaymentID(); phu.mutation.PaymentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PaymentHistory.payment"`)
	}
	return nil
}

func (phu *PaymentHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := phu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(paymenthistory.Table, paymenthistory.Columns, sqlgraph.NewFieldSpec(paymenthistory.FieldID, field.TypeUUID))
	if ps := phu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if phu.mutation.ClassCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paymenthistory.ClassTable,
			Columns: []string{paymenthistory.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: class.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phu.mutation.RemovedClassIDs(); len(nodes) > 0 && !phu.mutation.ClassCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paymenthistory.ClassTable,
			Columns: []string{paymenthistory.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: class.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phu.mutation.ClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paymenthistory.ClassTable,
			Columns: []string{paymenthistory.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: class.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if phu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymenthistory.UserTable,
			Columns: []string{paymenthistory.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymenthistory.UserTable,
			Columns: []string{paymenthistory.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if phu.mutation.PaymentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymenthistory.PaymentTable,
			Columns: []string{paymenthistory.PaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: payment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phu.mutation.PaymentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymenthistory.PaymentTable,
			Columns: []string{paymenthistory.PaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: payment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, phu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{paymenthistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	phu.mutation.done = true
	return n, nil
}

// PaymentHistoryUpdateOne is the builder for updating a single PaymentHistory entity.
type PaymentHistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PaymentHistoryMutation
}

// AddClasIDs adds the "class" edge to the Class entity by IDs.
func (phuo *PaymentHistoryUpdateOne) AddClasIDs(ids ...uuid.UUID) *PaymentHistoryUpdateOne {
	phuo.mutation.AddClasIDs(ids...)
	return phuo
}

// AddClass adds the "class" edges to the Class entity.
func (phuo *PaymentHistoryUpdateOne) AddClass(c ...*Class) *PaymentHistoryUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return phuo.AddClasIDs(ids...)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (phuo *PaymentHistoryUpdateOne) SetUserID(id uuid.UUID) *PaymentHistoryUpdateOne {
	phuo.mutation.SetUserID(id)
	return phuo
}

// SetUser sets the "user" edge to the User entity.
func (phuo *PaymentHistoryUpdateOne) SetUser(u *User) *PaymentHistoryUpdateOne {
	return phuo.SetUserID(u.ID)
}

// SetPaymentID sets the "payment" edge to the Payment entity by ID.
func (phuo *PaymentHistoryUpdateOne) SetPaymentID(id uuid.UUID) *PaymentHistoryUpdateOne {
	phuo.mutation.SetPaymentID(id)
	return phuo
}

// SetPayment sets the "payment" edge to the Payment entity.
func (phuo *PaymentHistoryUpdateOne) SetPayment(p *Payment) *PaymentHistoryUpdateOne {
	return phuo.SetPaymentID(p.ID)
}

// Mutation returns the PaymentHistoryMutation object of the builder.
func (phuo *PaymentHistoryUpdateOne) Mutation() *PaymentHistoryMutation {
	return phuo.mutation
}

// ClearClass clears all "class" edges to the Class entity.
func (phuo *PaymentHistoryUpdateOne) ClearClass() *PaymentHistoryUpdateOne {
	phuo.mutation.ClearClass()
	return phuo
}

// RemoveClasIDs removes the "class" edge to Class entities by IDs.
func (phuo *PaymentHistoryUpdateOne) RemoveClasIDs(ids ...uuid.UUID) *PaymentHistoryUpdateOne {
	phuo.mutation.RemoveClasIDs(ids...)
	return phuo
}

// RemoveClass removes "class" edges to Class entities.
func (phuo *PaymentHistoryUpdateOne) RemoveClass(c ...*Class) *PaymentHistoryUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return phuo.RemoveClasIDs(ids...)
}

// ClearUser clears the "user" edge to the User entity.
func (phuo *PaymentHistoryUpdateOne) ClearUser() *PaymentHistoryUpdateOne {
	phuo.mutation.ClearUser()
	return phuo
}

// ClearPayment clears the "payment" edge to the Payment entity.
func (phuo *PaymentHistoryUpdateOne) ClearPayment() *PaymentHistoryUpdateOne {
	phuo.mutation.ClearPayment()
	return phuo
}

// Where appends a list predicates to the PaymentHistoryUpdate builder.
func (phuo *PaymentHistoryUpdateOne) Where(ps ...predicate.PaymentHistory) *PaymentHistoryUpdateOne {
	phuo.mutation.Where(ps...)
	return phuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (phuo *PaymentHistoryUpdateOne) Select(field string, fields ...string) *PaymentHistoryUpdateOne {
	phuo.fields = append([]string{field}, fields...)
	return phuo
}

// Save executes the query and returns the updated PaymentHistory entity.
func (phuo *PaymentHistoryUpdateOne) Save(ctx context.Context) (*PaymentHistory, error) {
	return withHooks[*PaymentHistory, PaymentHistoryMutation](ctx, phuo.sqlSave, phuo.mutation, phuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (phuo *PaymentHistoryUpdateOne) SaveX(ctx context.Context) *PaymentHistory {
	node, err := phuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (phuo *PaymentHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := phuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (phuo *PaymentHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := phuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (phuo *PaymentHistoryUpdateOne) check() error {
	if _, ok := phuo.mutation.UserID(); phuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PaymentHistory.user"`)
	}
	if _, ok := phuo.mutation.PaymentID(); phuo.mutation.PaymentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PaymentHistory.payment"`)
	}
	return nil
}

func (phuo *PaymentHistoryUpdateOne) sqlSave(ctx context.Context) (_node *PaymentHistory, err error) {
	if err := phuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(paymenthistory.Table, paymenthistory.Columns, sqlgraph.NewFieldSpec(paymenthistory.FieldID, field.TypeUUID))
	id, ok := phuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PaymentHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := phuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, paymenthistory.FieldID)
		for _, f := range fields {
			if !paymenthistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != paymenthistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := phuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if phuo.mutation.ClassCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paymenthistory.ClassTable,
			Columns: []string{paymenthistory.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: class.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phuo.mutation.RemovedClassIDs(); len(nodes) > 0 && !phuo.mutation.ClassCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paymenthistory.ClassTable,
			Columns: []string{paymenthistory.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: class.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phuo.mutation.ClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   paymenthistory.ClassTable,
			Columns: []string{paymenthistory.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: class.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if phuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymenthistory.UserTable,
			Columns: []string{paymenthistory.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymenthistory.UserTable,
			Columns: []string{paymenthistory.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if phuo.mutation.PaymentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymenthistory.PaymentTable,
			Columns: []string{paymenthistory.PaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: payment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := phuo.mutation.PaymentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   paymenthistory.PaymentTable,
			Columns: []string{paymenthistory.PaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: payment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PaymentHistory{config: phuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, phuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{paymenthistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	phuo.mutation.done = true
	return _node, nil
}

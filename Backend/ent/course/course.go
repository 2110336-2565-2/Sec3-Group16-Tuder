// Code generated by ent, DO NOT EDIT.

package course

import (
	"fmt"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the course type in the database.
	Label = "course"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldSubject holds the string denoting the subject field in the database.
	FieldSubject = "subject"
	// FieldTopic holds the string denoting the topic field in the database.
	FieldTopic = "topic"
	// FieldEstimatedTime holds the string denoting the estimated_time field in the database.
	FieldEstimatedTime = "estimated_time"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldPricePerHour holds the string denoting the price_per_hour field in the database.
	FieldPricePerHour = "price_per_hour"
	// FieldLevel holds the string denoting the level field in the database.
	FieldLevel = "level"
	// FieldCoursePictureURL holds the string denoting the course_picture_url field in the database.
	FieldCoursePictureURL = "course_picture_url"
	// EdgeReviewCourse holds the string denoting the review_course edge name in mutations.
	EdgeReviewCourse = "review_course"
	// EdgeClass holds the string denoting the class edge name in mutations.
	EdgeClass = "class"
	// EdgeTutor holds the string denoting the tutor edge name in mutations.
	EdgeTutor = "tutor"
	// Table holds the table name of the course in the database.
	Table = "courses"
	// ReviewCourseTable is the table that holds the review_course relation/edge.
	ReviewCourseTable = "review_courses"
	// ReviewCourseInverseTable is the table name for the ReviewCourse entity.
	// It exists in this package in order to avoid circular dependency with the "reviewcourse" package.
	ReviewCourseInverseTable = "review_courses"
	// ReviewCourseColumn is the table column denoting the review_course relation/edge.
	ReviewCourseColumn = "course_review_course"
	// ClassTable is the table that holds the class relation/edge.
	ClassTable = "classes"
	// ClassInverseTable is the table name for the Class entity.
	// It exists in this package in order to avoid circular dependency with the "class" package.
	ClassInverseTable = "classes"
	// ClassColumn is the table column denoting the class relation/edge.
	ClassColumn = "course_class"
	// TutorTable is the table that holds the tutor relation/edge.
	TutorTable = "courses"
	// TutorInverseTable is the table name for the Tutor entity.
	// It exists in this package in order to avoid circular dependency with the "tutor" package.
	TutorInverseTable = "tutors"
	// TutorColumn is the table column denoting the tutor relation/edge.
	TutorColumn = "tutor_course"
)

// Columns holds all SQL columns for course fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldSubject,
	FieldTopic,
	FieldEstimatedTime,
	FieldDescription,
	FieldPricePerHour,
	FieldLevel,
	FieldCoursePictureURL,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "courses"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"tutor_course",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// SubjectValidator is a validator for the "subject" field. It is called by the builders before save.
	SubjectValidator func(string) error
	// TopicValidator is a validator for the "topic" field. It is called by the builders before save.
	TopicValidator func(string) error
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
	// PricePerHourValidator is a validator for the "price_per_hour" field. It is called by the builders before save.
	PricePerHourValidator func(int) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Level defines the type for the "level" enum field.
type Level string

// Level values.
const (
	LevelGrade1  Level = "Grade1"
	LevelGrade2  Level = "Grade2"
	LevelGrade3  Level = "Grade3"
	LevelGrade4  Level = "Grade4"
	LevelGrade5  Level = "Grade5"
	LevelGrade6  Level = "Grade6"
	LevelGrade7  Level = "Grade7"
	LevelGrade8  Level = "Grade8"
	LevelGrade9  Level = "Grade9"
	LevelGrade10 Level = "Grade10"
	LevelGrade11 Level = "Grade11"
	LevelGrade12 Level = "Grade12"
)

func (l Level) String() string {
	return string(l)
}

// LevelValidator is a validator for the "level" field enum values. It is called by the builders before save.
func LevelValidator(l Level) error {
	switch l {
	case LevelGrade1, LevelGrade2, LevelGrade3, LevelGrade4, LevelGrade5, LevelGrade6, LevelGrade7, LevelGrade8, LevelGrade9, LevelGrade10, LevelGrade11, LevelGrade12:
		return nil
	default:
		return fmt.Errorf("course: invalid enum value for level field: %q", l)
	}
}

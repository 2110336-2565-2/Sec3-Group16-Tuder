// Code generated by ent, DO NOT EDIT.

package course

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Course {
	return predicate.Course(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Course {
	return predicate.Course(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Course {
	return predicate.Course(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Course {
	return predicate.Course(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Course {
	return predicate.Course(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Course {
	return predicate.Course(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Course {
	return predicate.Course(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Course {
	return predicate.Course(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Course {
	return predicate.Course(sql.FieldLTE(FieldID, id))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Course {
	return predicate.Course(sql.FieldEQ(FieldTitle, v))
}

// EstimatedTime applies equality check predicate on the "estimated_time" field. It's identical to EstimatedTimeEQ.
func EstimatedTime(v time.Time) predicate.Course {
	return predicate.Course(sql.FieldEQ(FieldEstimatedTime, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Course {
	return predicate.Course(sql.FieldEQ(FieldDescription, v))
}

// CourseStatus applies equality check predicate on the "course_status" field. It's identical to CourseStatusEQ.
func CourseStatus(v string) predicate.Course {
	return predicate.Course(sql.FieldEQ(FieldCourseStatus, v))
}

// PricePerHour applies equality check predicate on the "price_per_hour" field. It's identical to PricePerHourEQ.
func PricePerHour(v int) predicate.Course {
	return predicate.Course(sql.FieldEQ(FieldPricePerHour, v))
}

// LevelID applies equality check predicate on the "level_id" field. It's identical to LevelIDEQ.
func LevelID(v string) predicate.Course {
	return predicate.Course(sql.FieldEQ(FieldLevelID, v))
}

// CoursePictureURL applies equality check predicate on the "course_picture_url" field. It's identical to CoursePictureURLEQ.
func CoursePictureURL(v string) predicate.Course {
	return predicate.Course(sql.FieldEQ(FieldCoursePictureURL, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Course {
	return predicate.Course(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Course {
	return predicate.Course(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Course {
	return predicate.Course(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Course {
	return predicate.Course(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Course {
	return predicate.Course(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Course {
	return predicate.Course(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Course {
	return predicate.Course(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Course {
	return predicate.Course(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Course {
	return predicate.Course(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Course {
	return predicate.Course(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Course {
	return predicate.Course(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Course {
	return predicate.Course(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Course {
	return predicate.Course(sql.FieldContainsFold(FieldTitle, v))
}

// EstimatedTimeEQ applies the EQ predicate on the "estimated_time" field.
func EstimatedTimeEQ(v time.Time) predicate.Course {
	return predicate.Course(sql.FieldEQ(FieldEstimatedTime, v))
}

// EstimatedTimeNEQ applies the NEQ predicate on the "estimated_time" field.
func EstimatedTimeNEQ(v time.Time) predicate.Course {
	return predicate.Course(sql.FieldNEQ(FieldEstimatedTime, v))
}

// EstimatedTimeIn applies the In predicate on the "estimated_time" field.
func EstimatedTimeIn(vs ...time.Time) predicate.Course {
	return predicate.Course(sql.FieldIn(FieldEstimatedTime, vs...))
}

// EstimatedTimeNotIn applies the NotIn predicate on the "estimated_time" field.
func EstimatedTimeNotIn(vs ...time.Time) predicate.Course {
	return predicate.Course(sql.FieldNotIn(FieldEstimatedTime, vs...))
}

// EstimatedTimeGT applies the GT predicate on the "estimated_time" field.
func EstimatedTimeGT(v time.Time) predicate.Course {
	return predicate.Course(sql.FieldGT(FieldEstimatedTime, v))
}

// EstimatedTimeGTE applies the GTE predicate on the "estimated_time" field.
func EstimatedTimeGTE(v time.Time) predicate.Course {
	return predicate.Course(sql.FieldGTE(FieldEstimatedTime, v))
}

// EstimatedTimeLT applies the LT predicate on the "estimated_time" field.
func EstimatedTimeLT(v time.Time) predicate.Course {
	return predicate.Course(sql.FieldLT(FieldEstimatedTime, v))
}

// EstimatedTimeLTE applies the LTE predicate on the "estimated_time" field.
func EstimatedTimeLTE(v time.Time) predicate.Course {
	return predicate.Course(sql.FieldLTE(FieldEstimatedTime, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Course {
	return predicate.Course(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Course {
	return predicate.Course(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Course {
	return predicate.Course(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Course {
	return predicate.Course(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Course {
	return predicate.Course(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Course {
	return predicate.Course(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Course {
	return predicate.Course(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Course {
	return predicate.Course(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Course {
	return predicate.Course(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Course {
	return predicate.Course(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Course {
	return predicate.Course(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Course {
	return predicate.Course(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Course {
	return predicate.Course(sql.FieldContainsFold(FieldDescription, v))
}

// CourseStatusEQ applies the EQ predicate on the "course_status" field.
func CourseStatusEQ(v string) predicate.Course {
	return predicate.Course(sql.FieldEQ(FieldCourseStatus, v))
}

// CourseStatusNEQ applies the NEQ predicate on the "course_status" field.
func CourseStatusNEQ(v string) predicate.Course {
	return predicate.Course(sql.FieldNEQ(FieldCourseStatus, v))
}

// CourseStatusIn applies the In predicate on the "course_status" field.
func CourseStatusIn(vs ...string) predicate.Course {
	return predicate.Course(sql.FieldIn(FieldCourseStatus, vs...))
}

// CourseStatusNotIn applies the NotIn predicate on the "course_status" field.
func CourseStatusNotIn(vs ...string) predicate.Course {
	return predicate.Course(sql.FieldNotIn(FieldCourseStatus, vs...))
}

// CourseStatusGT applies the GT predicate on the "course_status" field.
func CourseStatusGT(v string) predicate.Course {
	return predicate.Course(sql.FieldGT(FieldCourseStatus, v))
}

// CourseStatusGTE applies the GTE predicate on the "course_status" field.
func CourseStatusGTE(v string) predicate.Course {
	return predicate.Course(sql.FieldGTE(FieldCourseStatus, v))
}

// CourseStatusLT applies the LT predicate on the "course_status" field.
func CourseStatusLT(v string) predicate.Course {
	return predicate.Course(sql.FieldLT(FieldCourseStatus, v))
}

// CourseStatusLTE applies the LTE predicate on the "course_status" field.
func CourseStatusLTE(v string) predicate.Course {
	return predicate.Course(sql.FieldLTE(FieldCourseStatus, v))
}

// CourseStatusContains applies the Contains predicate on the "course_status" field.
func CourseStatusContains(v string) predicate.Course {
	return predicate.Course(sql.FieldContains(FieldCourseStatus, v))
}

// CourseStatusHasPrefix applies the HasPrefix predicate on the "course_status" field.
func CourseStatusHasPrefix(v string) predicate.Course {
	return predicate.Course(sql.FieldHasPrefix(FieldCourseStatus, v))
}

// CourseStatusHasSuffix applies the HasSuffix predicate on the "course_status" field.
func CourseStatusHasSuffix(v string) predicate.Course {
	return predicate.Course(sql.FieldHasSuffix(FieldCourseStatus, v))
}

// CourseStatusEqualFold applies the EqualFold predicate on the "course_status" field.
func CourseStatusEqualFold(v string) predicate.Course {
	return predicate.Course(sql.FieldEqualFold(FieldCourseStatus, v))
}

// CourseStatusContainsFold applies the ContainsFold predicate on the "course_status" field.
func CourseStatusContainsFold(v string) predicate.Course {
	return predicate.Course(sql.FieldContainsFold(FieldCourseStatus, v))
}

// PricePerHourEQ applies the EQ predicate on the "price_per_hour" field.
func PricePerHourEQ(v int) predicate.Course {
	return predicate.Course(sql.FieldEQ(FieldPricePerHour, v))
}

// PricePerHourNEQ applies the NEQ predicate on the "price_per_hour" field.
func PricePerHourNEQ(v int) predicate.Course {
	return predicate.Course(sql.FieldNEQ(FieldPricePerHour, v))
}

// PricePerHourIn applies the In predicate on the "price_per_hour" field.
func PricePerHourIn(vs ...int) predicate.Course {
	return predicate.Course(sql.FieldIn(FieldPricePerHour, vs...))
}

// PricePerHourNotIn applies the NotIn predicate on the "price_per_hour" field.
func PricePerHourNotIn(vs ...int) predicate.Course {
	return predicate.Course(sql.FieldNotIn(FieldPricePerHour, vs...))
}

// PricePerHourGT applies the GT predicate on the "price_per_hour" field.
func PricePerHourGT(v int) predicate.Course {
	return predicate.Course(sql.FieldGT(FieldPricePerHour, v))
}

// PricePerHourGTE applies the GTE predicate on the "price_per_hour" field.
func PricePerHourGTE(v int) predicate.Course {
	return predicate.Course(sql.FieldGTE(FieldPricePerHour, v))
}

// PricePerHourLT applies the LT predicate on the "price_per_hour" field.
func PricePerHourLT(v int) predicate.Course {
	return predicate.Course(sql.FieldLT(FieldPricePerHour, v))
}

// PricePerHourLTE applies the LTE predicate on the "price_per_hour" field.
func PricePerHourLTE(v int) predicate.Course {
	return predicate.Course(sql.FieldLTE(FieldPricePerHour, v))
}

// LevelIDEQ applies the EQ predicate on the "level_id" field.
func LevelIDEQ(v string) predicate.Course {
	return predicate.Course(sql.FieldEQ(FieldLevelID, v))
}

// LevelIDNEQ applies the NEQ predicate on the "level_id" field.
func LevelIDNEQ(v string) predicate.Course {
	return predicate.Course(sql.FieldNEQ(FieldLevelID, v))
}

// LevelIDIn applies the In predicate on the "level_id" field.
func LevelIDIn(vs ...string) predicate.Course {
	return predicate.Course(sql.FieldIn(FieldLevelID, vs...))
}

// LevelIDNotIn applies the NotIn predicate on the "level_id" field.
func LevelIDNotIn(vs ...string) predicate.Course {
	return predicate.Course(sql.FieldNotIn(FieldLevelID, vs...))
}

// LevelIDGT applies the GT predicate on the "level_id" field.
func LevelIDGT(v string) predicate.Course {
	return predicate.Course(sql.FieldGT(FieldLevelID, v))
}

// LevelIDGTE applies the GTE predicate on the "level_id" field.
func LevelIDGTE(v string) predicate.Course {
	return predicate.Course(sql.FieldGTE(FieldLevelID, v))
}

// LevelIDLT applies the LT predicate on the "level_id" field.
func LevelIDLT(v string) predicate.Course {
	return predicate.Course(sql.FieldLT(FieldLevelID, v))
}

// LevelIDLTE applies the LTE predicate on the "level_id" field.
func LevelIDLTE(v string) predicate.Course {
	return predicate.Course(sql.FieldLTE(FieldLevelID, v))
}

// LevelIDContains applies the Contains predicate on the "level_id" field.
func LevelIDContains(v string) predicate.Course {
	return predicate.Course(sql.FieldContains(FieldLevelID, v))
}

// LevelIDHasPrefix applies the HasPrefix predicate on the "level_id" field.
func LevelIDHasPrefix(v string) predicate.Course {
	return predicate.Course(sql.FieldHasPrefix(FieldLevelID, v))
}

// LevelIDHasSuffix applies the HasSuffix predicate on the "level_id" field.
func LevelIDHasSuffix(v string) predicate.Course {
	return predicate.Course(sql.FieldHasSuffix(FieldLevelID, v))
}

// LevelIDEqualFold applies the EqualFold predicate on the "level_id" field.
func LevelIDEqualFold(v string) predicate.Course {
	return predicate.Course(sql.FieldEqualFold(FieldLevelID, v))
}

// LevelIDContainsFold applies the ContainsFold predicate on the "level_id" field.
func LevelIDContainsFold(v string) predicate.Course {
	return predicate.Course(sql.FieldContainsFold(FieldLevelID, v))
}

// CoursePictureURLEQ applies the EQ predicate on the "course_picture_url" field.
func CoursePictureURLEQ(v string) predicate.Course {
	return predicate.Course(sql.FieldEQ(FieldCoursePictureURL, v))
}

// CoursePictureURLNEQ applies the NEQ predicate on the "course_picture_url" field.
func CoursePictureURLNEQ(v string) predicate.Course {
	return predicate.Course(sql.FieldNEQ(FieldCoursePictureURL, v))
}

// CoursePictureURLIn applies the In predicate on the "course_picture_url" field.
func CoursePictureURLIn(vs ...string) predicate.Course {
	return predicate.Course(sql.FieldIn(FieldCoursePictureURL, vs...))
}

// CoursePictureURLNotIn applies the NotIn predicate on the "course_picture_url" field.
func CoursePictureURLNotIn(vs ...string) predicate.Course {
	return predicate.Course(sql.FieldNotIn(FieldCoursePictureURL, vs...))
}

// CoursePictureURLGT applies the GT predicate on the "course_picture_url" field.
func CoursePictureURLGT(v string) predicate.Course {
	return predicate.Course(sql.FieldGT(FieldCoursePictureURL, v))
}

// CoursePictureURLGTE applies the GTE predicate on the "course_picture_url" field.
func CoursePictureURLGTE(v string) predicate.Course {
	return predicate.Course(sql.FieldGTE(FieldCoursePictureURL, v))
}

// CoursePictureURLLT applies the LT predicate on the "course_picture_url" field.
func CoursePictureURLLT(v string) predicate.Course {
	return predicate.Course(sql.FieldLT(FieldCoursePictureURL, v))
}

// CoursePictureURLLTE applies the LTE predicate on the "course_picture_url" field.
func CoursePictureURLLTE(v string) predicate.Course {
	return predicate.Course(sql.FieldLTE(FieldCoursePictureURL, v))
}

// CoursePictureURLContains applies the Contains predicate on the "course_picture_url" field.
func CoursePictureURLContains(v string) predicate.Course {
	return predicate.Course(sql.FieldContains(FieldCoursePictureURL, v))
}

// CoursePictureURLHasPrefix applies the HasPrefix predicate on the "course_picture_url" field.
func CoursePictureURLHasPrefix(v string) predicate.Course {
	return predicate.Course(sql.FieldHasPrefix(FieldCoursePictureURL, v))
}

// CoursePictureURLHasSuffix applies the HasSuffix predicate on the "course_picture_url" field.
func CoursePictureURLHasSuffix(v string) predicate.Course {
	return predicate.Course(sql.FieldHasSuffix(FieldCoursePictureURL, v))
}

// CoursePictureURLIsNil applies the IsNil predicate on the "course_picture_url" field.
func CoursePictureURLIsNil() predicate.Course {
	return predicate.Course(sql.FieldIsNull(FieldCoursePictureURL))
}

// CoursePictureURLNotNil applies the NotNil predicate on the "course_picture_url" field.
func CoursePictureURLNotNil() predicate.Course {
	return predicate.Course(sql.FieldNotNull(FieldCoursePictureURL))
}

// CoursePictureURLEqualFold applies the EqualFold predicate on the "course_picture_url" field.
func CoursePictureURLEqualFold(v string) predicate.Course {
	return predicate.Course(sql.FieldEqualFold(FieldCoursePictureURL, v))
}

// CoursePictureURLContainsFold applies the ContainsFold predicate on the "course_picture_url" field.
func CoursePictureURLContainsFold(v string) predicate.Course {
	return predicate.Course(sql.FieldContainsFold(FieldCoursePictureURL, v))
}

// HasReviewCourse applies the HasEdge predicate on the "review_course" edge.
func HasReviewCourse() predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ReviewCourseTable, ReviewCourseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReviewCourseWith applies the HasEdge predicate on the "review_course" edge with a given conditions (other predicates).
func HasReviewCourseWith(preds ...predicate.ReviewCourse) predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ReviewCourseInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ReviewCourseTable, ReviewCourseColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasClass applies the HasEdge predicate on the "class" edge.
func HasClass() predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ClassTable, ClassColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClassWith applies the HasEdge predicate on the "class" edge with a given conditions (other predicates).
func HasClassWith(preds ...predicate.Class) predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ClassInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ClassTable, ClassColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStudent applies the HasEdge predicate on the "student" edge.
func HasStudent() predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, StudentTable, StudentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStudentWith applies the HasEdge predicate on the "student" edge with a given conditions (other predicates).
func HasStudentWith(preds ...predicate.Student) predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StudentInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, StudentTable, StudentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTutor applies the HasEdge predicate on the "tutor" edge.
func HasTutor() predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TutorTable, TutorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTutorWith applies the HasEdge predicate on the "tutor" edge with a given conditions (other predicates).
func HasTutorWith(preds ...predicate.Tutor) predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TutorInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TutorTable, TutorColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Course) predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Course) predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Course) predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		p(s.Not())
	})
}

// Code generated by ent, DO NOT EDIT.

package tutor

import (
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the tutor type in the database.
	Label = "tutor"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldOmiseBankToken holds the string denoting the omise_bank_token field in the database.
	FieldOmiseBankToken = "omise_bank_token"
	// FieldCitizenID holds the string denoting the citizen_id field in the database.
	FieldCitizenID = "citizen_id"
	// EdgeIssueReport holds the string denoting the issue_report edge name in mutations.
	EdgeIssueReport = "issue_report"
	// EdgeCourse holds the string denoting the course edge name in mutations.
	EdgeCourse = "course"
	// EdgeReviewTutor holds the string denoting the review_tutor edge name in mutations.
	EdgeReviewTutor = "review_tutor"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeSchedule holds the string denoting the schedule edge name in mutations.
	EdgeSchedule = "schedule"
	// Table holds the table name of the tutor in the database.
	Table = "tutors"
	// IssueReportTable is the table that holds the issue_report relation/edge.
	IssueReportTable = "issue_reports"
	// IssueReportInverseTable is the table name for the IssueReport entity.
	// It exists in this package in order to avoid circular dependency with the "issuereport" package.
	IssueReportInverseTable = "issue_reports"
	// IssueReportColumn is the table column denoting the issue_report relation/edge.
	IssueReportColumn = "tutor_issue_report"
	// CourseTable is the table that holds the course relation/edge.
	CourseTable = "courses"
	// CourseInverseTable is the table name for the Course entity.
	// It exists in this package in order to avoid circular dependency with the "course" package.
	CourseInverseTable = "courses"
	// CourseColumn is the table column denoting the course relation/edge.
	CourseColumn = "tutor_course"
	// ReviewTutorTable is the table that holds the review_tutor relation/edge.
	ReviewTutorTable = "review_tutors"
	// ReviewTutorInverseTable is the table name for the ReviewTutor entity.
	// It exists in this package in order to avoid circular dependency with the "reviewtutor" package.
	ReviewTutorInverseTable = "review_tutors"
	// ReviewTutorColumn is the table column denoting the review_tutor relation/edge.
	ReviewTutorColumn = "tutor_review_tutor"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "tutors"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_tutor"
	// ScheduleTable is the table that holds the schedule relation/edge.
	ScheduleTable = "tutors"
	// ScheduleInverseTable is the table name for the Schedule entity.
	// It exists in this package in order to avoid circular dependency with the "schedule" package.
	ScheduleInverseTable = "schedules"
	// ScheduleColumn is the table column denoting the schedule relation/edge.
	ScheduleColumn = "schedule_tutor"
)

// Columns holds all SQL columns for tutor fields.
var Columns = []string{
	FieldID,
	FieldDescription,
	FieldOmiseBankToken,
	FieldCitizenID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "tutors"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"schedule_tutor",
	"user_tutor",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// CitizenIDValidator is a validator for the "citizen_id" field. It is called by the builders before save.
	CitizenIDValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

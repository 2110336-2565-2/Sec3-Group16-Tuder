// Code generated by ent, DO NOT EDIT.

package tutor

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Tutor {
	return predicate.Tutor(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Tutor {
	return predicate.Tutor(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Tutor {
	return predicate.Tutor(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Tutor {
	return predicate.Tutor(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Tutor {
	return predicate.Tutor(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Tutor {
	return predicate.Tutor(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Tutor {
	return predicate.Tutor(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Tutor {
	return predicate.Tutor(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Tutor {
	return predicate.Tutor(sql.FieldLTE(FieldID, id))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Tutor {
	return predicate.Tutor(sql.FieldEQ(FieldDescription, v))
}

// OmiseBankToken applies equality check predicate on the "omise_bank_token" field. It's identical to OmiseBankTokenEQ.
func OmiseBankToken(v string) predicate.Tutor {
	return predicate.Tutor(sql.FieldEQ(FieldOmiseBankToken, v))
}

// CitizenID applies equality check predicate on the "citizen_id" field. It's identical to CitizenIDEQ.
func CitizenID(v string) predicate.Tutor {
	return predicate.Tutor(sql.FieldEQ(FieldCitizenID, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Tutor {
	return predicate.Tutor(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Tutor {
	return predicate.Tutor(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Tutor {
	return predicate.Tutor(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Tutor {
	return predicate.Tutor(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Tutor {
	return predicate.Tutor(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Tutor {
	return predicate.Tutor(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Tutor {
	return predicate.Tutor(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Tutor {
	return predicate.Tutor(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Tutor {
	return predicate.Tutor(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Tutor {
	return predicate.Tutor(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Tutor {
	return predicate.Tutor(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Tutor {
	return predicate.Tutor(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Tutor {
	return predicate.Tutor(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Tutor {
	return predicate.Tutor(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Tutor {
	return predicate.Tutor(sql.FieldContainsFold(FieldDescription, v))
}

// OmiseBankTokenEQ applies the EQ predicate on the "omise_bank_token" field.
func OmiseBankTokenEQ(v string) predicate.Tutor {
	return predicate.Tutor(sql.FieldEQ(FieldOmiseBankToken, v))
}

// OmiseBankTokenNEQ applies the NEQ predicate on the "omise_bank_token" field.
func OmiseBankTokenNEQ(v string) predicate.Tutor {
	return predicate.Tutor(sql.FieldNEQ(FieldOmiseBankToken, v))
}

// OmiseBankTokenIn applies the In predicate on the "omise_bank_token" field.
func OmiseBankTokenIn(vs ...string) predicate.Tutor {
	return predicate.Tutor(sql.FieldIn(FieldOmiseBankToken, vs...))
}

// OmiseBankTokenNotIn applies the NotIn predicate on the "omise_bank_token" field.
func OmiseBankTokenNotIn(vs ...string) predicate.Tutor {
	return predicate.Tutor(sql.FieldNotIn(FieldOmiseBankToken, vs...))
}

// OmiseBankTokenGT applies the GT predicate on the "omise_bank_token" field.
func OmiseBankTokenGT(v string) predicate.Tutor {
	return predicate.Tutor(sql.FieldGT(FieldOmiseBankToken, v))
}

// OmiseBankTokenGTE applies the GTE predicate on the "omise_bank_token" field.
func OmiseBankTokenGTE(v string) predicate.Tutor {
	return predicate.Tutor(sql.FieldGTE(FieldOmiseBankToken, v))
}

// OmiseBankTokenLT applies the LT predicate on the "omise_bank_token" field.
func OmiseBankTokenLT(v string) predicate.Tutor {
	return predicate.Tutor(sql.FieldLT(FieldOmiseBankToken, v))
}

// OmiseBankTokenLTE applies the LTE predicate on the "omise_bank_token" field.
func OmiseBankTokenLTE(v string) predicate.Tutor {
	return predicate.Tutor(sql.FieldLTE(FieldOmiseBankToken, v))
}

// OmiseBankTokenContains applies the Contains predicate on the "omise_bank_token" field.
func OmiseBankTokenContains(v string) predicate.Tutor {
	return predicate.Tutor(sql.FieldContains(FieldOmiseBankToken, v))
}

// OmiseBankTokenHasPrefix applies the HasPrefix predicate on the "omise_bank_token" field.
func OmiseBankTokenHasPrefix(v string) predicate.Tutor {
	return predicate.Tutor(sql.FieldHasPrefix(FieldOmiseBankToken, v))
}

// OmiseBankTokenHasSuffix applies the HasSuffix predicate on the "omise_bank_token" field.
func OmiseBankTokenHasSuffix(v string) predicate.Tutor {
	return predicate.Tutor(sql.FieldHasSuffix(FieldOmiseBankToken, v))
}

// OmiseBankTokenIsNil applies the IsNil predicate on the "omise_bank_token" field.
func OmiseBankTokenIsNil() predicate.Tutor {
	return predicate.Tutor(sql.FieldIsNull(FieldOmiseBankToken))
}

// OmiseBankTokenNotNil applies the NotNil predicate on the "omise_bank_token" field.
func OmiseBankTokenNotNil() predicate.Tutor {
	return predicate.Tutor(sql.FieldNotNull(FieldOmiseBankToken))
}

// OmiseBankTokenEqualFold applies the EqualFold predicate on the "omise_bank_token" field.
func OmiseBankTokenEqualFold(v string) predicate.Tutor {
	return predicate.Tutor(sql.FieldEqualFold(FieldOmiseBankToken, v))
}

// OmiseBankTokenContainsFold applies the ContainsFold predicate on the "omise_bank_token" field.
func OmiseBankTokenContainsFold(v string) predicate.Tutor {
	return predicate.Tutor(sql.FieldContainsFold(FieldOmiseBankToken, v))
}

// CitizenIDEQ applies the EQ predicate on the "citizen_id" field.
func CitizenIDEQ(v string) predicate.Tutor {
	return predicate.Tutor(sql.FieldEQ(FieldCitizenID, v))
}

// CitizenIDNEQ applies the NEQ predicate on the "citizen_id" field.
func CitizenIDNEQ(v string) predicate.Tutor {
	return predicate.Tutor(sql.FieldNEQ(FieldCitizenID, v))
}

// CitizenIDIn applies the In predicate on the "citizen_id" field.
func CitizenIDIn(vs ...string) predicate.Tutor {
	return predicate.Tutor(sql.FieldIn(FieldCitizenID, vs...))
}

// CitizenIDNotIn applies the NotIn predicate on the "citizen_id" field.
func CitizenIDNotIn(vs ...string) predicate.Tutor {
	return predicate.Tutor(sql.FieldNotIn(FieldCitizenID, vs...))
}

// CitizenIDGT applies the GT predicate on the "citizen_id" field.
func CitizenIDGT(v string) predicate.Tutor {
	return predicate.Tutor(sql.FieldGT(FieldCitizenID, v))
}

// CitizenIDGTE applies the GTE predicate on the "citizen_id" field.
func CitizenIDGTE(v string) predicate.Tutor {
	return predicate.Tutor(sql.FieldGTE(FieldCitizenID, v))
}

// CitizenIDLT applies the LT predicate on the "citizen_id" field.
func CitizenIDLT(v string) predicate.Tutor {
	return predicate.Tutor(sql.FieldLT(FieldCitizenID, v))
}

// CitizenIDLTE applies the LTE predicate on the "citizen_id" field.
func CitizenIDLTE(v string) predicate.Tutor {
	return predicate.Tutor(sql.FieldLTE(FieldCitizenID, v))
}

// CitizenIDContains applies the Contains predicate on the "citizen_id" field.
func CitizenIDContains(v string) predicate.Tutor {
	return predicate.Tutor(sql.FieldContains(FieldCitizenID, v))
}

// CitizenIDHasPrefix applies the HasPrefix predicate on the "citizen_id" field.
func CitizenIDHasPrefix(v string) predicate.Tutor {
	return predicate.Tutor(sql.FieldHasPrefix(FieldCitizenID, v))
}

// CitizenIDHasSuffix applies the HasSuffix predicate on the "citizen_id" field.
func CitizenIDHasSuffix(v string) predicate.Tutor {
	return predicate.Tutor(sql.FieldHasSuffix(FieldCitizenID, v))
}

// CitizenIDEqualFold applies the EqualFold predicate on the "citizen_id" field.
func CitizenIDEqualFold(v string) predicate.Tutor {
	return predicate.Tutor(sql.FieldEqualFold(FieldCitizenID, v))
}

// CitizenIDContainsFold applies the ContainsFold predicate on the "citizen_id" field.
func CitizenIDContainsFold(v string) predicate.Tutor {
	return predicate.Tutor(sql.FieldContainsFold(FieldCitizenID, v))
}

// HasIssueReport applies the HasEdge predicate on the "issue_report" edge.
func HasIssueReport() predicate.Tutor {
	return predicate.Tutor(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, IssueReportTable, IssueReportColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIssueReportWith applies the HasEdge predicate on the "issue_report" edge with a given conditions (other predicates).
func HasIssueReportWith(preds ...predicate.IssueReport) predicate.Tutor {
	return predicate.Tutor(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(IssueReportInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, IssueReportTable, IssueReportColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCourse applies the HasEdge predicate on the "course" edge.
func HasCourse() predicate.Tutor {
	return predicate.Tutor(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CourseTable, CourseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCourseWith applies the HasEdge predicate on the "course" edge with a given conditions (other predicates).
func HasCourseWith(preds ...predicate.Course) predicate.Tutor {
	return predicate.Tutor(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CourseInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CourseTable, CourseColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReviewTutor applies the HasEdge predicate on the "review_tutor" edge.
func HasReviewTutor() predicate.Tutor {
	return predicate.Tutor(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ReviewTutorTable, ReviewTutorPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReviewTutorWith applies the HasEdge predicate on the "review_tutor" edge with a given conditions (other predicates).
func HasReviewTutorWith(preds ...predicate.ReviewTutor) predicate.Tutor {
	return predicate.Tutor(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ReviewTutorInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ReviewTutorTable, ReviewTutorPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Tutor {
	return predicate.Tutor(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Tutor {
	return predicate.Tutor(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSchedule applies the HasEdge predicate on the "schedule" edge.
func HasSchedule() predicate.Tutor {
	return predicate.Tutor(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ScheduleTable, ScheduleColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasScheduleWith applies the HasEdge predicate on the "schedule" edge with a given conditions (other predicates).
func HasScheduleWith(preds ...predicate.Schedule) predicate.Tutor {
	return predicate.Tutor(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ScheduleInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ScheduleTable, ScheduleColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Tutor) predicate.Tutor {
	return predicate.Tutor(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Tutor) predicate.Tutor {
	return predicate.Tutor(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Tutor) predicate.Tutor {
	return predicate.Tutor(func(s *sql.Selector) {
		p(s.Not())
	})
}

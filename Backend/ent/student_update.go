// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/predicate"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/student"
)

// StudentUpdate is the builder for updating Student entities.
type StudentUpdate struct {
	config
	hooks    []Hook
	mutation *StudentMutation
}

// Where appends a list predicates to the StudentUpdate builder.
func (su *StudentUpdate) Where(ps ...predicate.Student) *StudentUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUsername sets the "username" field.
func (su *StudentUpdate) SetUsername(s string) *StudentUpdate {
	su.mutation.SetUsername(s)
	return su
}

// SetPassword sets the "password" field.
func (su *StudentUpdate) SetPassword(s string) *StudentUpdate {
	su.mutation.SetPassword(s)
	return su
}

// SetEmail sets the "email" field.
func (su *StudentUpdate) SetEmail(s string) *StudentUpdate {
	su.mutation.SetEmail(s)
	return su
}

// SetFirstName sets the "first_name" field.
func (su *StudentUpdate) SetFirstName(s string) *StudentUpdate {
	su.mutation.SetFirstName(s)
	return su
}

// SetLastName sets the "last_name" field.
func (su *StudentUpdate) SetLastName(s string) *StudentUpdate {
	su.mutation.SetLastName(s)
	return su
}

// SetAddress sets the "address" field.
func (su *StudentUpdate) SetAddress(s string) *StudentUpdate {
	su.mutation.SetAddress(s)
	return su
}

// SetPhone sets the "phone" field.
func (su *StudentUpdate) SetPhone(s string) *StudentUpdate {
	su.mutation.SetPhone(s)
	return su
}

// SetBirthDate sets the "birth_date" field.
func (su *StudentUpdate) SetBirthDate(t time.Time) *StudentUpdate {
	su.mutation.SetBirthDate(t)
	return su
}

// SetGender sets the "gender" field.
func (su *StudentUpdate) SetGender(s string) *StudentUpdate {
	su.mutation.SetGender(s)
	return su
}

// SetProfilePictureURL sets the "profile_picture_URL" field.
func (su *StudentUpdate) SetProfilePictureURL(s string) *StudentUpdate {
	su.mutation.SetProfilePictureURL(s)
	return su
}

// SetNillableProfilePictureURL sets the "profile_picture_URL" field if the given value is not nil.
func (su *StudentUpdate) SetNillableProfilePictureURL(s *string) *StudentUpdate {
	if s != nil {
		su.SetProfilePictureURL(*s)
	}
	return su
}

// ClearProfilePictureURL clears the value of the "profile_picture_URL" field.
func (su *StudentUpdate) ClearProfilePictureURL() *StudentUpdate {
	su.mutation.ClearProfilePictureURL()
	return su
}

// SetSchool sets the "school" field.
func (su *StudentUpdate) SetSchool(s string) *StudentUpdate {
	su.mutation.SetSchool(s)
	return su
}

// Mutation returns the StudentMutation object of the builder.
func (su *StudentUpdate) Mutation() *StudentMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *StudentUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, StudentMutation](ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *StudentUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *StudentUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *StudentUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *StudentUpdate) check() error {
	if v, ok := su.mutation.Username(); ok {
		if err := student.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "Student.username": %w`, err)}
		}
	}
	if v, ok := su.mutation.Password(); ok {
		if err := student.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "Student.password": %w`, err)}
		}
	}
	if v, ok := su.mutation.Email(); ok {
		if err := student.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Student.email": %w`, err)}
		}
	}
	if v, ok := su.mutation.FirstName(); ok {
		if err := student.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`ent: validator failed for field "Student.first_name": %w`, err)}
		}
	}
	if v, ok := su.mutation.LastName(); ok {
		if err := student.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`ent: validator failed for field "Student.last_name": %w`, err)}
		}
	}
	if v, ok := su.mutation.Address(); ok {
		if err := student.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf(`ent: validator failed for field "Student.address": %w`, err)}
		}
	}
	if v, ok := su.mutation.Phone(); ok {
		if err := student.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "Student.phone": %w`, err)}
		}
	}
	if v, ok := su.mutation.Gender(); ok {
		if err := student.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`ent: validator failed for field "Student.gender": %w`, err)}
		}
	}
	if v, ok := su.mutation.School(); ok {
		if err := student.SchoolValidator(v); err != nil {
			return &ValidationError{Name: "school", err: fmt.Errorf(`ent: validator failed for field "Student.school": %w`, err)}
		}
	}
	return nil
}

func (su *StudentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(student.Table, student.Columns, sqlgraph.NewFieldSpec(student.FieldID, field.TypeUUID))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Username(); ok {
		_spec.SetField(student.FieldUsername, field.TypeString, value)
	}
	if value, ok := su.mutation.Password(); ok {
		_spec.SetField(student.FieldPassword, field.TypeString, value)
	}
	if value, ok := su.mutation.Email(); ok {
		_spec.SetField(student.FieldEmail, field.TypeString, value)
	}
	if value, ok := su.mutation.FirstName(); ok {
		_spec.SetField(student.FieldFirstName, field.TypeString, value)
	}
	if value, ok := su.mutation.LastName(); ok {
		_spec.SetField(student.FieldLastName, field.TypeString, value)
	}
	if value, ok := su.mutation.Address(); ok {
		_spec.SetField(student.FieldAddress, field.TypeString, value)
	}
	if value, ok := su.mutation.Phone(); ok {
		_spec.SetField(student.FieldPhone, field.TypeString, value)
	}
	if value, ok := su.mutation.BirthDate(); ok {
		_spec.SetField(student.FieldBirthDate, field.TypeTime, value)
	}
	if value, ok := su.mutation.Gender(); ok {
		_spec.SetField(student.FieldGender, field.TypeString, value)
	}
	if value, ok := su.mutation.ProfilePictureURL(); ok {
		_spec.SetField(student.FieldProfilePictureURL, field.TypeString, value)
	}
	if su.mutation.ProfilePictureURLCleared() {
		_spec.ClearField(student.FieldProfilePictureURL, field.TypeString)
	}
	if value, ok := su.mutation.School(); ok {
		_spec.SetField(student.FieldSchool, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{student.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// StudentUpdateOne is the builder for updating a single Student entity.
type StudentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StudentMutation
}

// SetUsername sets the "username" field.
func (suo *StudentUpdateOne) SetUsername(s string) *StudentUpdateOne {
	suo.mutation.SetUsername(s)
	return suo
}

// SetPassword sets the "password" field.
func (suo *StudentUpdateOne) SetPassword(s string) *StudentUpdateOne {
	suo.mutation.SetPassword(s)
	return suo
}

// SetEmail sets the "email" field.
func (suo *StudentUpdateOne) SetEmail(s string) *StudentUpdateOne {
	suo.mutation.SetEmail(s)
	return suo
}

// SetFirstName sets the "first_name" field.
func (suo *StudentUpdateOne) SetFirstName(s string) *StudentUpdateOne {
	suo.mutation.SetFirstName(s)
	return suo
}

// SetLastName sets the "last_name" field.
func (suo *StudentUpdateOne) SetLastName(s string) *StudentUpdateOne {
	suo.mutation.SetLastName(s)
	return suo
}

// SetAddress sets the "address" field.
func (suo *StudentUpdateOne) SetAddress(s string) *StudentUpdateOne {
	suo.mutation.SetAddress(s)
	return suo
}

// SetPhone sets the "phone" field.
func (suo *StudentUpdateOne) SetPhone(s string) *StudentUpdateOne {
	suo.mutation.SetPhone(s)
	return suo
}

// SetBirthDate sets the "birth_date" field.
func (suo *StudentUpdateOne) SetBirthDate(t time.Time) *StudentUpdateOne {
	suo.mutation.SetBirthDate(t)
	return suo
}

// SetGender sets the "gender" field.
func (suo *StudentUpdateOne) SetGender(s string) *StudentUpdateOne {
	suo.mutation.SetGender(s)
	return suo
}

// SetProfilePictureURL sets the "profile_picture_URL" field.
func (suo *StudentUpdateOne) SetProfilePictureURL(s string) *StudentUpdateOne {
	suo.mutation.SetProfilePictureURL(s)
	return suo
}

// SetNillableProfilePictureURL sets the "profile_picture_URL" field if the given value is not nil.
func (suo *StudentUpdateOne) SetNillableProfilePictureURL(s *string) *StudentUpdateOne {
	if s != nil {
		suo.SetProfilePictureURL(*s)
	}
	return suo
}

// ClearProfilePictureURL clears the value of the "profile_picture_URL" field.
func (suo *StudentUpdateOne) ClearProfilePictureURL() *StudentUpdateOne {
	suo.mutation.ClearProfilePictureURL()
	return suo
}

// SetSchool sets the "school" field.
func (suo *StudentUpdateOne) SetSchool(s string) *StudentUpdateOne {
	suo.mutation.SetSchool(s)
	return suo
}

// Mutation returns the StudentMutation object of the builder.
func (suo *StudentUpdateOne) Mutation() *StudentMutation {
	return suo.mutation
}

// Where appends a list predicates to the StudentUpdate builder.
func (suo *StudentUpdateOne) Where(ps ...predicate.Student) *StudentUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *StudentUpdateOne) Select(field string, fields ...string) *StudentUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Student entity.
func (suo *StudentUpdateOne) Save(ctx context.Context) (*Student, error) {
	return withHooks[*Student, StudentMutation](ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *StudentUpdateOne) SaveX(ctx context.Context) *Student {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *StudentUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *StudentUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *StudentUpdateOne) check() error {
	if v, ok := suo.mutation.Username(); ok {
		if err := student.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "Student.username": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Password(); ok {
		if err := student.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "Student.password": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Email(); ok {
		if err := student.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Student.email": %w`, err)}
		}
	}
	if v, ok := suo.mutation.FirstName(); ok {
		if err := student.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`ent: validator failed for field "Student.first_name": %w`, err)}
		}
	}
	if v, ok := suo.mutation.LastName(); ok {
		if err := student.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`ent: validator failed for field "Student.last_name": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Address(); ok {
		if err := student.AddressValidator(v); err != nil {
			return &ValidationError{Name: "address", err: fmt.Errorf(`ent: validator failed for field "Student.address": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Phone(); ok {
		if err := student.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "Student.phone": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Gender(); ok {
		if err := student.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`ent: validator failed for field "Student.gender": %w`, err)}
		}
	}
	if v, ok := suo.mutation.School(); ok {
		if err := student.SchoolValidator(v); err != nil {
			return &ValidationError{Name: "school", err: fmt.Errorf(`ent: validator failed for field "Student.school": %w`, err)}
		}
	}
	return nil
}

func (suo *StudentUpdateOne) sqlSave(ctx context.Context) (_node *Student, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(student.Table, student.Columns, sqlgraph.NewFieldSpec(student.FieldID, field.TypeUUID))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Student.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, student.FieldID)
		for _, f := range fields {
			if !student.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != student.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Username(); ok {
		_spec.SetField(student.FieldUsername, field.TypeString, value)
	}
	if value, ok := suo.mutation.Password(); ok {
		_spec.SetField(student.FieldPassword, field.TypeString, value)
	}
	if value, ok := suo.mutation.Email(); ok {
		_spec.SetField(student.FieldEmail, field.TypeString, value)
	}
	if value, ok := suo.mutation.FirstName(); ok {
		_spec.SetField(student.FieldFirstName, field.TypeString, value)
	}
	if value, ok := suo.mutation.LastName(); ok {
		_spec.SetField(student.FieldLastName, field.TypeString, value)
	}
	if value, ok := suo.mutation.Address(); ok {
		_spec.SetField(student.FieldAddress, field.TypeString, value)
	}
	if value, ok := suo.mutation.Phone(); ok {
		_spec.SetField(student.FieldPhone, field.TypeString, value)
	}
	if value, ok := suo.mutation.BirthDate(); ok {
		_spec.SetField(student.FieldBirthDate, field.TypeTime, value)
	}
	if value, ok := suo.mutation.Gender(); ok {
		_spec.SetField(student.FieldGender, field.TypeString, value)
	}
	if value, ok := suo.mutation.ProfilePictureURL(); ok {
		_spec.SetField(student.FieldProfilePictureURL, field.TypeString, value)
	}
	if suo.mutation.ProfilePictureURLCleared() {
		_spec.ClearField(student.FieldProfilePictureURL, field.TypeString)
	}
	if value, ok := suo.mutation.School(); ok {
		_spec.SetField(student.FieldSchool, field.TypeString, value)
	}
	_node = &Student{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{student.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}

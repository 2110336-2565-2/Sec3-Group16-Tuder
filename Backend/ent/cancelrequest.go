// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/cancelrequest"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/match"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/user"
	"github.com/google/uuid"
)

// CancelRequest is the model entity for the CancelRequest schema.
type CancelRequest struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// ReportDate holds the value of the "report_date" field.
	ReportDate time.Time `json:"report_date,omitempty"`
	// ImgURL holds the value of the "img_url" field.
	ImgURL string `json:"img_url,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Status holds the value of the "status" field.
	Status cancelrequest.Status `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CancelRequestQuery when eager-loading is set.
	Edges                CancelRequestEdges `json:"edges"`
	cancel_request_match *uuid.UUID
	user_cancel_request  *uuid.UUID
}

// CancelRequestEdges holds the relations/edges for other nodes in the graph.
type CancelRequestEdges struct {
	// Match holds the value of the match edge.
	Match *Match `json:"match,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// MatchOrErr returns the Match value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CancelRequestEdges) MatchOrErr() (*Match, error) {
	if e.loadedTypes[0] {
		if e.Match == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: match.Label}
		}
		return e.Match, nil
	}
	return nil, &NotLoadedError{edge: "match"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CancelRequestEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CancelRequest) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case cancelrequest.FieldTitle, cancelrequest.FieldImgURL, cancelrequest.FieldDescription, cancelrequest.FieldStatus:
			values[i] = new(sql.NullString)
		case cancelrequest.FieldReportDate:
			values[i] = new(sql.NullTime)
		case cancelrequest.FieldID:
			values[i] = new(uuid.UUID)
		case cancelrequest.ForeignKeys[0]: // cancel_request_match
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case cancelrequest.ForeignKeys[1]: // user_cancel_request
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type CancelRequest", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CancelRequest fields.
func (cr *CancelRequest) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cancelrequest.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				cr.ID = *value
			}
		case cancelrequest.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				cr.Title = value.String
			}
		case cancelrequest.FieldReportDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field report_date", values[i])
			} else if value.Valid {
				cr.ReportDate = value.Time
			}
		case cancelrequest.FieldImgURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field img_url", values[i])
			} else if value.Valid {
				cr.ImgURL = value.String
			}
		case cancelrequest.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				cr.Description = value.String
			}
		case cancelrequest.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				cr.Status = cancelrequest.Status(value.String)
			}
		case cancelrequest.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field cancel_request_match", values[i])
			} else if value.Valid {
				cr.cancel_request_match = new(uuid.UUID)
				*cr.cancel_request_match = *value.S.(*uuid.UUID)
			}
		case cancelrequest.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_cancel_request", values[i])
			} else if value.Valid {
				cr.user_cancel_request = new(uuid.UUID)
				*cr.user_cancel_request = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryMatch queries the "match" edge of the CancelRequest entity.
func (cr *CancelRequest) QueryMatch() *MatchQuery {
	return NewCancelRequestClient(cr.config).QueryMatch(cr)
}

// QueryUser queries the "user" edge of the CancelRequest entity.
func (cr *CancelRequest) QueryUser() *UserQuery {
	return NewCancelRequestClient(cr.config).QueryUser(cr)
}

// Update returns a builder for updating this CancelRequest.
// Note that you need to call CancelRequest.Unwrap() before calling this method if this CancelRequest
// was returned from a transaction, and the transaction was committed or rolled back.
func (cr *CancelRequest) Update() *CancelRequestUpdateOne {
	return NewCancelRequestClient(cr.config).UpdateOne(cr)
}

// Unwrap unwraps the CancelRequest entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cr *CancelRequest) Unwrap() *CancelRequest {
	_tx, ok := cr.config.driver.(*txDriver)
	if !ok {
		panic("ent: CancelRequest is not a transactional entity")
	}
	cr.config.driver = _tx.drv
	return cr
}

// String implements the fmt.Stringer.
func (cr *CancelRequest) String() string {
	var builder strings.Builder
	builder.WriteString("CancelRequest(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cr.ID))
	builder.WriteString("title=")
	builder.WriteString(cr.Title)
	builder.WriteString(", ")
	builder.WriteString("report_date=")
	builder.WriteString(cr.ReportDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("img_url=")
	builder.WriteString(cr.ImgURL)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(cr.Description)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", cr.Status))
	builder.WriteByte(')')
	return builder.String()
}

// CancelRequests is a parsable slice of CancelRequest.
type CancelRequests []*CancelRequest

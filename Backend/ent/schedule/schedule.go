// Code generated by ent, DO NOT EDIT.

package schedule

import (
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the schedule type in the database.
	Label = "schedule"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDay0 holds the string denoting the day_0 field in the database.
	FieldDay0 = "day_0"
	// FieldDay1 holds the string denoting the day_1 field in the database.
	FieldDay1 = "day_1"
	// FieldDay2 holds the string denoting the day_2 field in the database.
	FieldDay2 = "day_2"
	// FieldDay3 holds the string denoting the day_3 field in the database.
	FieldDay3 = "day_3"
	// FieldDay4 holds the string denoting the day_4 field in the database.
	FieldDay4 = "day_4"
	// FieldDay5 holds the string denoting the day_5 field in the database.
	FieldDay5 = "day_5"
	// FieldDay6 holds the string denoting the day_6 field in the database.
	FieldDay6 = "day_6"
	// EdgeTutor holds the string denoting the tutor edge name in mutations.
	EdgeTutor = "tutor"
	// EdgeClass holds the string denoting the class edge name in mutations.
	EdgeClass = "class"
	// Table holds the table name of the schedule in the database.
	Table = "schedules"
	// TutorTable is the table that holds the tutor relation/edge.
	TutorTable = "schedules"
	// TutorInverseTable is the table name for the Tutor entity.
	// It exists in this package in order to avoid circular dependency with the "tutor" package.
	TutorInverseTable = "tutors"
	// TutorColumn is the table column denoting the tutor relation/edge.
	TutorColumn = "tutor_schedule"
	// ClassTable is the table that holds the class relation/edge.
	ClassTable = "schedules"
	// ClassInverseTable is the table name for the Class entity.
	// It exists in this package in order to avoid circular dependency with the "class" package.
	ClassInverseTable = "classes"
	// ClassColumn is the table column denoting the class relation/edge.
	ClassColumn = "class_schedule"
)

// Columns holds all SQL columns for schedule fields.
var Columns = []string{
	FieldID,
	FieldDay0,
	FieldDay1,
	FieldDay2,
	FieldDay3,
	FieldDay4,
	FieldDay5,
	FieldDay6,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "schedules"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"class_schedule",
	"tutor_schedule",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultDay0 holds the default value on creation for the "day_0" field.
	DefaultDay0 bool
	// DefaultDay1 holds the default value on creation for the "day_1" field.
	DefaultDay1 bool
	// DefaultDay2 holds the default value on creation for the "day_2" field.
	DefaultDay2 bool
	// DefaultDay3 holds the default value on creation for the "day_3" field.
	DefaultDay3 bool
	// DefaultDay4 holds the default value on creation for the "day_4" field.
	DefaultDay4 bool
	// DefaultDay5 holds the default value on creation for the "day_5" field.
	DefaultDay5 bool
	// DefaultDay6 holds the default value on creation for the "day_6" field.
	DefaultDay6 bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

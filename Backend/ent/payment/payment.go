// Code generated by ent, DO NOT EDIT.

package payment

import (
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the payment type in the database.
	Label = "payment"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldQrPictureURL holds the string denoting the qr_picture_url field in the database.
	FieldQrPictureURL = "qr_picture_url"
	// FieldPaymentStatus holds the string denoting the payment_status field in the database.
	FieldPaymentStatus = "payment_status"
	// FieldCard holds the string denoting the card field in the database.
	FieldCard = "card"
	// FieldAmount holds the string denoting the amount field in the database.
	FieldAmount = "amount"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgePaymentHistory holds the string denoting the payment_history edge name in mutations.
	EdgePaymentHistory = "payment_history"
	// Table holds the table name of the payment in the database.
	Table = "payments"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "payments"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_payment"
	// PaymentHistoryTable is the table that holds the payment_history relation/edge.
	PaymentHistoryTable = "payment_histories"
	// PaymentHistoryInverseTable is the table name for the PaymentHistory entity.
	// It exists in this package in order to avoid circular dependency with the "paymenthistory" package.
	PaymentHistoryInverseTable = "payment_histories"
	// PaymentHistoryColumn is the table column denoting the payment_history relation/edge.
	PaymentHistoryColumn = "payment_payment_history"
)

// Columns holds all SQL columns for payment fields.
var Columns = []string{
	FieldID,
	FieldQrPictureURL,
	FieldPaymentStatus,
	FieldCard,
	FieldAmount,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "payments"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_payment",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// PaymentStatusValidator is a validator for the "payment_status" field. It is called by the builders before save.
	PaymentStatusValidator func(string) error
	// CardValidator is a validator for the "card" field. It is called by the builders before save.
	CardValidator func(string) error
	// AmountValidator is a validator for the "amount" field. It is called by the builders before save.
	AmountValidator func(int) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

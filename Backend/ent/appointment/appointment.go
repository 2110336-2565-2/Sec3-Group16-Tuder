// Code generated by ent, DO NOT EDIT.

package appointment

import (
	"fmt"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the appointment type in the database.
	Label = "appointment"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldBeginAt holds the string denoting the begin_at field in the database.
	FieldBeginAt = "begin_at"
	// FieldEndAt holds the string denoting the end_at field in the database.
	FieldEndAt = "end_at"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// EdgeMatch holds the string denoting the match edge name in mutations.
	EdgeMatch = "match"
	// Table holds the table name of the appointment in the database.
	Table = "appointments"
	// MatchTable is the table that holds the match relation/edge.
	MatchTable = "appointments"
	// MatchInverseTable is the table name for the Match entity.
	// It exists in this package in order to avoid circular dependency with the "match" package.
	MatchInverseTable = "matches"
	// MatchColumn is the table column denoting the match relation/edge.
	MatchColumn = "appointment_match"
)

// Columns holds all SQL columns for appointment fields.
var Columns = []string{
	FieldID,
	FieldBeginAt,
	FieldEndAt,
	FieldStatus,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "appointments"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"appointment_match",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusOngoing    Status = "ongoing"
	StatusCompleted  Status = "completed"
	StatusCancelling Status = "cancelling"
	StatusRejected   Status = "rejected"
	StatusCancelled  Status = "cancelled"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusOngoing, StatusCompleted, StatusCancelling, StatusRejected, StatusCancelled:
		return nil
	default:
		return fmt.Errorf("appointment: invalid enum value for status field: %q", s)
	}
}

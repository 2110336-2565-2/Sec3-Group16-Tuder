// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/class"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/classcancelrequest"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/course"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/match"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/predicate"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/student"
	"github.com/google/uuid"
)

// MatchUpdate is the builder for updating Match entities.
type MatchUpdate struct {
	config
	hooks    []Hook
	mutation *MatchMutation
}

// Where appends a list predicates to the MatchUpdate builder.
func (mu *MatchUpdate) Where(ps ...predicate.Match) *MatchUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetStudentID sets the "student" edge to the Student entity by ID.
func (mu *MatchUpdate) SetStudentID(id uuid.UUID) *MatchUpdate {
	mu.mutation.SetStudentID(id)
	return mu
}

// SetStudent sets the "student" edge to the Student entity.
func (mu *MatchUpdate) SetStudent(s *Student) *MatchUpdate {
	return mu.SetStudentID(s.ID)
}

// SetCourseID sets the "course" edge to the Course entity by ID.
func (mu *MatchUpdate) SetCourseID(id uuid.UUID) *MatchUpdate {
	mu.mutation.SetCourseID(id)
	return mu
}

// SetCourse sets the "course" edge to the Course entity.
func (mu *MatchUpdate) SetCourse(c *Course) *MatchUpdate {
	return mu.SetCourseID(c.ID)
}

// SetClassID sets the "class" edge to the Class entity by ID.
func (mu *MatchUpdate) SetClassID(id uuid.UUID) *MatchUpdate {
	mu.mutation.SetClassID(id)
	return mu
}

// SetClass sets the "class" edge to the Class entity.
func (mu *MatchUpdate) SetClass(c *Class) *MatchUpdate {
	return mu.SetClassID(c.ID)
}

// SetClassCancelRequestID sets the "class_cancel_request" edge to the ClassCancelRequest entity by ID.
func (mu *MatchUpdate) SetClassCancelRequestID(id uuid.UUID) *MatchUpdate {
	mu.mutation.SetClassCancelRequestID(id)
	return mu
}

// SetNillableClassCancelRequestID sets the "class_cancel_request" edge to the ClassCancelRequest entity by ID if the given value is not nil.
func (mu *MatchUpdate) SetNillableClassCancelRequestID(id *uuid.UUID) *MatchUpdate {
	if id != nil {
		mu = mu.SetClassCancelRequestID(*id)
	}
	return mu
}

// SetClassCancelRequest sets the "class_cancel_request" edge to the ClassCancelRequest entity.
func (mu *MatchUpdate) SetClassCancelRequest(c *ClassCancelRequest) *MatchUpdate {
	return mu.SetClassCancelRequestID(c.ID)
}

// Mutation returns the MatchMutation object of the builder.
func (mu *MatchUpdate) Mutation() *MatchMutation {
	return mu.mutation
}

// ClearStudent clears the "student" edge to the Student entity.
func (mu *MatchUpdate) ClearStudent() *MatchUpdate {
	mu.mutation.ClearStudent()
	return mu
}

// ClearCourse clears the "course" edge to the Course entity.
func (mu *MatchUpdate) ClearCourse() *MatchUpdate {
	mu.mutation.ClearCourse()
	return mu
}

// ClearClass clears the "class" edge to the Class entity.
func (mu *MatchUpdate) ClearClass() *MatchUpdate {
	mu.mutation.ClearClass()
	return mu
}

// ClearClassCancelRequest clears the "class_cancel_request" edge to the ClassCancelRequest entity.
func (mu *MatchUpdate) ClearClassCancelRequest() *MatchUpdate {
	mu.mutation.ClearClassCancelRequest()
	return mu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MatchUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, MatchMutation](ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MatchUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MatchUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MatchUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MatchUpdate) check() error {
	if _, ok := mu.mutation.StudentID(); mu.mutation.StudentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Match.student"`)
	}
	if _, ok := mu.mutation.CourseID(); mu.mutation.CourseCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Match.course"`)
	}
	if _, ok := mu.mutation.ClassID(); mu.mutation.ClassCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Match.class"`)
	}
	return nil
}

func (mu *MatchUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(match.Table, match.Columns, sqlgraph.NewFieldSpec(match.FieldID, field.TypeUUID))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if mu.mutation.StudentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   match.StudentTable,
			Columns: []string{match.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: student.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.StudentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   match.StudentTable,
			Columns: []string{match.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: student.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.CourseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   match.CourseTable,
			Columns: []string{match.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: course.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   match.CourseTable,
			Columns: []string{match.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: course.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.ClassCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   match.ClassTable,
			Columns: []string{match.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: class.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.ClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   match.ClassTable,
			Columns: []string{match.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: class.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.ClassCancelRequestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   match.ClassCancelRequestTable,
			Columns: []string{match.ClassCancelRequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: classcancelrequest.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.ClassCancelRequestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   match.ClassCancelRequestTable,
			Columns: []string{match.ClassCancelRequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: classcancelrequest.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{match.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MatchUpdateOne is the builder for updating a single Match entity.
type MatchUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MatchMutation
}

// SetStudentID sets the "student" edge to the Student entity by ID.
func (muo *MatchUpdateOne) SetStudentID(id uuid.UUID) *MatchUpdateOne {
	muo.mutation.SetStudentID(id)
	return muo
}

// SetStudent sets the "student" edge to the Student entity.
func (muo *MatchUpdateOne) SetStudent(s *Student) *MatchUpdateOne {
	return muo.SetStudentID(s.ID)
}

// SetCourseID sets the "course" edge to the Course entity by ID.
func (muo *MatchUpdateOne) SetCourseID(id uuid.UUID) *MatchUpdateOne {
	muo.mutation.SetCourseID(id)
	return muo
}

// SetCourse sets the "course" edge to the Course entity.
func (muo *MatchUpdateOne) SetCourse(c *Course) *MatchUpdateOne {
	return muo.SetCourseID(c.ID)
}

// SetClassID sets the "class" edge to the Class entity by ID.
func (muo *MatchUpdateOne) SetClassID(id uuid.UUID) *MatchUpdateOne {
	muo.mutation.SetClassID(id)
	return muo
}

// SetClass sets the "class" edge to the Class entity.
func (muo *MatchUpdateOne) SetClass(c *Class) *MatchUpdateOne {
	return muo.SetClassID(c.ID)
}

// SetClassCancelRequestID sets the "class_cancel_request" edge to the ClassCancelRequest entity by ID.
func (muo *MatchUpdateOne) SetClassCancelRequestID(id uuid.UUID) *MatchUpdateOne {
	muo.mutation.SetClassCancelRequestID(id)
	return muo
}

// SetNillableClassCancelRequestID sets the "class_cancel_request" edge to the ClassCancelRequest entity by ID if the given value is not nil.
func (muo *MatchUpdateOne) SetNillableClassCancelRequestID(id *uuid.UUID) *MatchUpdateOne {
	if id != nil {
		muo = muo.SetClassCancelRequestID(*id)
	}
	return muo
}

// SetClassCancelRequest sets the "class_cancel_request" edge to the ClassCancelRequest entity.
func (muo *MatchUpdateOne) SetClassCancelRequest(c *ClassCancelRequest) *MatchUpdateOne {
	return muo.SetClassCancelRequestID(c.ID)
}

// Mutation returns the MatchMutation object of the builder.
func (muo *MatchUpdateOne) Mutation() *MatchMutation {
	return muo.mutation
}

// ClearStudent clears the "student" edge to the Student entity.
func (muo *MatchUpdateOne) ClearStudent() *MatchUpdateOne {
	muo.mutation.ClearStudent()
	return muo
}

// ClearCourse clears the "course" edge to the Course entity.
func (muo *MatchUpdateOne) ClearCourse() *MatchUpdateOne {
	muo.mutation.ClearCourse()
	return muo
}

// ClearClass clears the "class" edge to the Class entity.
func (muo *MatchUpdateOne) ClearClass() *MatchUpdateOne {
	muo.mutation.ClearClass()
	return muo
}

// ClearClassCancelRequest clears the "class_cancel_request" edge to the ClassCancelRequest entity.
func (muo *MatchUpdateOne) ClearClassCancelRequest() *MatchUpdateOne {
	muo.mutation.ClearClassCancelRequest()
	return muo
}

// Where appends a list predicates to the MatchUpdate builder.
func (muo *MatchUpdateOne) Where(ps ...predicate.Match) *MatchUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MatchUpdateOne) Select(field string, fields ...string) *MatchUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Match entity.
func (muo *MatchUpdateOne) Save(ctx context.Context) (*Match, error) {
	return withHooks[*Match, MatchMutation](ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MatchUpdateOne) SaveX(ctx context.Context) *Match {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MatchUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MatchUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MatchUpdateOne) check() error {
	if _, ok := muo.mutation.StudentID(); muo.mutation.StudentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Match.student"`)
	}
	if _, ok := muo.mutation.CourseID(); muo.mutation.CourseCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Match.course"`)
	}
	if _, ok := muo.mutation.ClassID(); muo.mutation.ClassCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Match.class"`)
	}
	return nil
}

func (muo *MatchUpdateOne) sqlSave(ctx context.Context) (_node *Match, err error) {
	if err := muo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(match.Table, match.Columns, sqlgraph.NewFieldSpec(match.FieldID, field.TypeUUID))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Match.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, match.FieldID)
		for _, f := range fields {
			if !match.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != match.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if muo.mutation.StudentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   match.StudentTable,
			Columns: []string{match.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: student.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.StudentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   match.StudentTable,
			Columns: []string{match.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: student.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.CourseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   match.CourseTable,
			Columns: []string{match.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: course.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   match.CourseTable,
			Columns: []string{match.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: course.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.ClassCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   match.ClassTable,
			Columns: []string{match.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: class.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.ClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   match.ClassTable,
			Columns: []string{match.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: class.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.ClassCancelRequestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   match.ClassCancelRequestTable,
			Columns: []string{match.ClassCancelRequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: classcancelrequest.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.ClassCancelRequestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   match.ClassCancelRequestTable,
			Columns: []string{match.ClassCancelRequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: classcancelrequest.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Match{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{match.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}

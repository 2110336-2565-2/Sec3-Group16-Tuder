// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/class"
	"github.com/google/uuid"
)

// Class is the model entity for the Class schema.
type Class struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// ReviewAvaliable holds the value of the "review_avaliable" field.
	ReviewAvaliable bool `json:"review_avaliable,omitempty"`
	// TotalHour holds the value of the "total_hour" field.
	TotalHour string `json:"total_hour,omitempty"`
	// SuccessHour holds the value of the "success_hour" field.
	SuccessHour string `json:"success_hour,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Class) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case class.FieldReviewAvaliable:
			values[i] = new(sql.NullBool)
		case class.FieldTotalHour, class.FieldSuccessHour:
			values[i] = new(sql.NullString)
		case class.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Class", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Class fields.
func (c *Class) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case class.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case class.FieldReviewAvaliable:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field review_avaliable", values[i])
			} else if value.Valid {
				c.ReviewAvaliable = value.Bool
			}
		case class.FieldTotalHour:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field total_hour", values[i])
			} else if value.Valid {
				c.TotalHour = value.String
			}
		case class.FieldSuccessHour:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field success_hour", values[i])
			} else if value.Valid {
				c.SuccessHour = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Class.
// Note that you need to call Class.Unwrap() before calling this method if this Class
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Class) Update() *ClassUpdateOne {
	return NewClassClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Class entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Class) Unwrap() *Class {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Class is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Class) String() string {
	var builder strings.Builder
	builder.WriteString("Class(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("review_avaliable=")
	builder.WriteString(fmt.Sprintf("%v", c.ReviewAvaliable))
	builder.WriteString(", ")
	builder.WriteString("total_hour=")
	builder.WriteString(c.TotalHour)
	builder.WriteString(", ")
	builder.WriteString("success_hour=")
	builder.WriteString(c.SuccessHour)
	builder.WriteByte(')')
	return builder.String()
}

// Classes is a parsable slice of Class.
type Classes []*Class

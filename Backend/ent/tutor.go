// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/tutor"
	"github.com/google/uuid"
)

// Tutor is the model entity for the Tutor schema.
type Tutor struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"-"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// FirstName holds the value of the "first_name" field.
	FirstName string `json:"first_name,omitempty"`
	// LastName holds the value of the "last_name" field.
	LastName string `json:"last_name,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// Phone holds the value of the "phone" field.
	Phone string `json:"phone,omitempty"`
	// BirthDate holds the value of the "birth_date" field.
	BirthDate time.Time `json:"birth_date,omitempty"`
	// Gender holds the value of the "gender" field.
	Gender string `json:"gender,omitempty"`
	// ProfilePictureURL holds the value of the "profile_picture_URL" field.
	ProfilePictureURL *string `json:"profile_picture_URL,omitempty"`
	// Description holds the value of the "description" field.
	Description *string `json:"description,omitempty"`
	// OmiseBankToken holds the value of the "omise_bank_token" field.
	OmiseBankToken *string `json:"omise_bank_token,omitempty"`
	// CitizenID holds the value of the "citizen_id" field.
	CitizenID string `json:"citizen_id,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Tutor) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tutor.FieldUsername, tutor.FieldPassword, tutor.FieldEmail, tutor.FieldFirstName, tutor.FieldLastName, tutor.FieldAddress, tutor.FieldPhone, tutor.FieldGender, tutor.FieldProfilePictureURL, tutor.FieldDescription, tutor.FieldOmiseBankToken, tutor.FieldCitizenID:
			values[i] = new(sql.NullString)
		case tutor.FieldBirthDate:
			values[i] = new(sql.NullTime)
		case tutor.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Tutor", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Tutor fields.
func (t *Tutor) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tutor.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				t.ID = *value
			}
		case tutor.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				t.Username = value.String
			}
		case tutor.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				t.Password = value.String
			}
		case tutor.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				t.Email = value.String
			}
		case tutor.FieldFirstName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field first_name", values[i])
			} else if value.Valid {
				t.FirstName = value.String
			}
		case tutor.FieldLastName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_name", values[i])
			} else if value.Valid {
				t.LastName = value.String
			}
		case tutor.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				t.Address = value.String
			}
		case tutor.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				t.Phone = value.String
			}
		case tutor.FieldBirthDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field birth_date", values[i])
			} else if value.Valid {
				t.BirthDate = value.Time
			}
		case tutor.FieldGender:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gender", values[i])
			} else if value.Valid {
				t.Gender = value.String
			}
		case tutor.FieldProfilePictureURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field profile_picture_URL", values[i])
			} else if value.Valid {
				t.ProfilePictureURL = new(string)
				*t.ProfilePictureURL = value.String
			}
		case tutor.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				t.Description = new(string)
				*t.Description = value.String
			}
		case tutor.FieldOmiseBankToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field omise_bank_token", values[i])
			} else if value.Valid {
				t.OmiseBankToken = new(string)
				*t.OmiseBankToken = value.String
			}
		case tutor.FieldCitizenID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field citizen_id", values[i])
			} else if value.Valid {
				t.CitizenID = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Tutor.
// Note that you need to call Tutor.Unwrap() before calling this method if this Tutor
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Tutor) Update() *TutorUpdateOne {
	return NewTutorClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Tutor entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Tutor) Unwrap() *Tutor {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Tutor is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Tutor) String() string {
	var builder strings.Builder
	builder.WriteString("Tutor(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("username=")
	builder.WriteString(t.Username)
	builder.WriteString(", ")
	builder.WriteString("password=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(t.Email)
	builder.WriteString(", ")
	builder.WriteString("first_name=")
	builder.WriteString(t.FirstName)
	builder.WriteString(", ")
	builder.WriteString("last_name=")
	builder.WriteString(t.LastName)
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(t.Address)
	builder.WriteString(", ")
	builder.WriteString("phone=")
	builder.WriteString(t.Phone)
	builder.WriteString(", ")
	builder.WriteString("birth_date=")
	builder.WriteString(t.BirthDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("gender=")
	builder.WriteString(t.Gender)
	builder.WriteString(", ")
	if v := t.ProfilePictureURL; v != nil {
		builder.WriteString("profile_picture_URL=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := t.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := t.OmiseBankToken; v != nil {
		builder.WriteString("omise_bank_token=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("citizen_id=")
	builder.WriteString(t.CitizenID)
	builder.WriteByte(')')
	return builder.String()
}

// Tutors is a parsable slice of Tutor.
type Tutors []*Tutor

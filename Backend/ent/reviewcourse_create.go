// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/reviewcourse"
)

// ReviewCourseCreate is the builder for creating a ReviewCourse entity.
type ReviewCourseCreate struct {
	config
	mutation *ReviewCourseMutation
	hooks    []Hook
}

// SetScore sets the "score" field.
func (rcc *ReviewCourseCreate) SetScore(f float32) *ReviewCourseCreate {
	rcc.mutation.SetScore(f)
	return rcc
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (rcc *ReviewCourseCreate) SetNillableScore(f *float32) *ReviewCourseCreate {
	if f != nil {
		rcc.SetScore(*f)
	}
	return rcc
}

// SetReviewMsg sets the "review_msg" field.
func (rcc *ReviewCourseCreate) SetReviewMsg(s string) *ReviewCourseCreate {
	rcc.mutation.SetReviewMsg(s)
	return rcc
}

// SetNillableReviewMsg sets the "review_msg" field if the given value is not nil.
func (rcc *ReviewCourseCreate) SetNillableReviewMsg(s *string) *ReviewCourseCreate {
	if s != nil {
		rcc.SetReviewMsg(*s)
	}
	return rcc
}

// Mutation returns the ReviewCourseMutation object of the builder.
func (rcc *ReviewCourseCreate) Mutation() *ReviewCourseMutation {
	return rcc.mutation
}

// Save creates the ReviewCourse in the database.
func (rcc *ReviewCourseCreate) Save(ctx context.Context) (*ReviewCourse, error) {
	return withHooks[*ReviewCourse, ReviewCourseMutation](ctx, rcc.sqlSave, rcc.mutation, rcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rcc *ReviewCourseCreate) SaveX(ctx context.Context) *ReviewCourse {
	v, err := rcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcc *ReviewCourseCreate) Exec(ctx context.Context) error {
	_, err := rcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcc *ReviewCourseCreate) ExecX(ctx context.Context) {
	if err := rcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rcc *ReviewCourseCreate) check() error {
	if v, ok := rcc.mutation.Score(); ok {
		if err := reviewcourse.ScoreValidator(v); err != nil {
			return &ValidationError{Name: "score", err: fmt.Errorf(`ent: validator failed for field "ReviewCourse.score": %w`, err)}
		}
	}
	return nil
}

func (rcc *ReviewCourseCreate) sqlSave(ctx context.Context) (*ReviewCourse, error) {
	if err := rcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rcc.mutation.id = &_node.ID
	rcc.mutation.done = true
	return _node, nil
}

func (rcc *ReviewCourseCreate) createSpec() (*ReviewCourse, *sqlgraph.CreateSpec) {
	var (
		_node = &ReviewCourse{config: rcc.config}
		_spec = sqlgraph.NewCreateSpec(reviewcourse.Table, sqlgraph.NewFieldSpec(reviewcourse.FieldID, field.TypeInt))
	)
	if value, ok := rcc.mutation.Score(); ok {
		_spec.SetField(reviewcourse.FieldScore, field.TypeFloat32, value)
		_node.Score = &value
	}
	if value, ok := rcc.mutation.ReviewMsg(); ok {
		_spec.SetField(reviewcourse.FieldReviewMsg, field.TypeString, value)
		_node.ReviewMsg = &value
	}
	return _node, _spec
}

// ReviewCourseCreateBulk is the builder for creating many ReviewCourse entities in bulk.
type ReviewCourseCreateBulk struct {
	config
	builders []*ReviewCourseCreate
}

// Save creates the ReviewCourse entities in the database.
func (rccb *ReviewCourseCreateBulk) Save(ctx context.Context) ([]*ReviewCourse, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rccb.builders))
	nodes := make([]*ReviewCourse, len(rccb.builders))
	mutators := make([]Mutator, len(rccb.builders))
	for i := range rccb.builders {
		func(i int, root context.Context) {
			builder := rccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ReviewCourseMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rccb *ReviewCourseCreateBulk) SaveX(ctx context.Context) []*ReviewCourse {
	v, err := rccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rccb *ReviewCourseCreateBulk) Exec(ctx context.Context) error {
	_, err := rccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rccb *ReviewCourseCreateBulk) ExecX(ctx context.Context) {
	if err := rccb.Exec(ctx); err != nil {
		panic(err)
	}
}

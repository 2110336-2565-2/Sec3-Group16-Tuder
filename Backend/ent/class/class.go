// Code generated by ent, DO NOT EDIT.

package class

import (
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the class type in the database.
	Label = "class"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldReviewAvaliable holds the string denoting the review_avaliable field in the database.
	FieldReviewAvaliable = "review_avaliable"
	// FieldTotalHour holds the string denoting the total_hour field in the database.
	FieldTotalHour = "total_hour"
	// FieldSuccessHour holds the string denoting the success_hour field in the database.
	FieldSuccessHour = "success_hour"
	// EdgeSchedule holds the string denoting the schedule edge name in mutations.
	EdgeSchedule = "schedule"
	// EdgeStudent holds the string denoting the student edge name in mutations.
	EdgeStudent = "student"
	// EdgeCourse holds the string denoting the course edge name in mutations.
	EdgeCourse = "course"
	// Table holds the table name of the class in the database.
	Table = "classes"
	// ScheduleTable is the table that holds the schedule relation/edge.
	ScheduleTable = "schedules"
	// ScheduleInverseTable is the table name for the Schedule entity.
	// It exists in this package in order to avoid circular dependency with the "schedule" package.
	ScheduleInverseTable = "schedules"
	// ScheduleColumn is the table column denoting the schedule relation/edge.
	ScheduleColumn = "class_schedule"
	// StudentTable is the table that holds the student relation/edge.
	StudentTable = "classes"
	// StudentInverseTable is the table name for the Student entity.
	// It exists in this package in order to avoid circular dependency with the "student" package.
	StudentInverseTable = "students"
	// StudentColumn is the table column denoting the student relation/edge.
	StudentColumn = "student_class"
	// CourseTable is the table that holds the course relation/edge.
	CourseTable = "classes"
	// CourseInverseTable is the table name for the Course entity.
	// It exists in this package in order to avoid circular dependency with the "course" package.
	CourseInverseTable = "courses"
	// CourseColumn is the table column denoting the course relation/edge.
	CourseColumn = "course_class"
)

// Columns holds all SQL columns for class fields.
var Columns = []string{
	FieldID,
	FieldReviewAvaliable,
	FieldTotalHour,
	FieldSuccessHour,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "classes"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"course_class",
	"student_class",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultReviewAvaliable holds the default value on creation for the "review_avaliable" field.
	DefaultReviewAvaliable bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

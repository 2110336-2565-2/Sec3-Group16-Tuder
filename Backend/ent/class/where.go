// Code generated by ent, DO NOT EDIT.

package class

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Class {
	return predicate.Class(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Class {
	return predicate.Class(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Class {
	return predicate.Class(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Class {
	return predicate.Class(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Class {
	return predicate.Class(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Class {
	return predicate.Class(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Class {
	return predicate.Class(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Class {
	return predicate.Class(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Class {
	return predicate.Class(sql.FieldLTE(FieldID, id))
}

// ReviewAvaliable applies equality check predicate on the "review_avaliable" field. It's identical to ReviewAvaliableEQ.
func ReviewAvaliable(v bool) predicate.Class {
	return predicate.Class(sql.FieldEQ(FieldReviewAvaliable, v))
}

// TotalHour applies equality check predicate on the "total_hour" field. It's identical to TotalHourEQ.
func TotalHour(v int) predicate.Class {
	return predicate.Class(sql.FieldEQ(FieldTotalHour, v))
}

// SuccessHour applies equality check predicate on the "success_hour" field. It's identical to SuccessHourEQ.
func SuccessHour(v int) predicate.Class {
	return predicate.Class(sql.FieldEQ(FieldSuccessHour, v))
}

// ReviewAvaliableEQ applies the EQ predicate on the "review_avaliable" field.
func ReviewAvaliableEQ(v bool) predicate.Class {
	return predicate.Class(sql.FieldEQ(FieldReviewAvaliable, v))
}

// ReviewAvaliableNEQ applies the NEQ predicate on the "review_avaliable" field.
func ReviewAvaliableNEQ(v bool) predicate.Class {
	return predicate.Class(sql.FieldNEQ(FieldReviewAvaliable, v))
}

// TotalHourEQ applies the EQ predicate on the "total_hour" field.
func TotalHourEQ(v int) predicate.Class {
	return predicate.Class(sql.FieldEQ(FieldTotalHour, v))
}

// TotalHourNEQ applies the NEQ predicate on the "total_hour" field.
func TotalHourNEQ(v int) predicate.Class {
	return predicate.Class(sql.FieldNEQ(FieldTotalHour, v))
}

// TotalHourIn applies the In predicate on the "total_hour" field.
func TotalHourIn(vs ...int) predicate.Class {
	return predicate.Class(sql.FieldIn(FieldTotalHour, vs...))
}

// TotalHourNotIn applies the NotIn predicate on the "total_hour" field.
func TotalHourNotIn(vs ...int) predicate.Class {
	return predicate.Class(sql.FieldNotIn(FieldTotalHour, vs...))
}

// TotalHourGT applies the GT predicate on the "total_hour" field.
func TotalHourGT(v int) predicate.Class {
	return predicate.Class(sql.FieldGT(FieldTotalHour, v))
}

// TotalHourGTE applies the GTE predicate on the "total_hour" field.
func TotalHourGTE(v int) predicate.Class {
	return predicate.Class(sql.FieldGTE(FieldTotalHour, v))
}

// TotalHourLT applies the LT predicate on the "total_hour" field.
func TotalHourLT(v int) predicate.Class {
	return predicate.Class(sql.FieldLT(FieldTotalHour, v))
}

// TotalHourLTE applies the LTE predicate on the "total_hour" field.
func TotalHourLTE(v int) predicate.Class {
	return predicate.Class(sql.FieldLTE(FieldTotalHour, v))
}

// SuccessHourEQ applies the EQ predicate on the "success_hour" field.
func SuccessHourEQ(v int) predicate.Class {
	return predicate.Class(sql.FieldEQ(FieldSuccessHour, v))
}

// SuccessHourNEQ applies the NEQ predicate on the "success_hour" field.
func SuccessHourNEQ(v int) predicate.Class {
	return predicate.Class(sql.FieldNEQ(FieldSuccessHour, v))
}

// SuccessHourIn applies the In predicate on the "success_hour" field.
func SuccessHourIn(vs ...int) predicate.Class {
	return predicate.Class(sql.FieldIn(FieldSuccessHour, vs...))
}

// SuccessHourNotIn applies the NotIn predicate on the "success_hour" field.
func SuccessHourNotIn(vs ...int) predicate.Class {
	return predicate.Class(sql.FieldNotIn(FieldSuccessHour, vs...))
}

// SuccessHourGT applies the GT predicate on the "success_hour" field.
func SuccessHourGT(v int) predicate.Class {
	return predicate.Class(sql.FieldGT(FieldSuccessHour, v))
}

// SuccessHourGTE applies the GTE predicate on the "success_hour" field.
func SuccessHourGTE(v int) predicate.Class {
	return predicate.Class(sql.FieldGTE(FieldSuccessHour, v))
}

// SuccessHourLT applies the LT predicate on the "success_hour" field.
func SuccessHourLT(v int) predicate.Class {
	return predicate.Class(sql.FieldLT(FieldSuccessHour, v))
}

// SuccessHourLTE applies the LTE predicate on the "success_hour" field.
func SuccessHourLTE(v int) predicate.Class {
	return predicate.Class(sql.FieldLTE(FieldSuccessHour, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Class {
	return predicate.Class(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Class {
	return predicate.Class(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Class {
	return predicate.Class(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Class {
	return predicate.Class(sql.FieldNotIn(FieldStatus, vs...))
}

// HasMatch applies the HasEdge predicate on the "match" edge.
func HasMatch() predicate.Class {
	return predicate.Class(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MatchTable, MatchColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMatchWith applies the HasEdge predicate on the "match" edge with a given conditions (other predicates).
func HasMatchWith(preds ...predicate.Match) predicate.Class {
	return predicate.Class(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MatchInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MatchTable, MatchColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSchedule applies the HasEdge predicate on the "schedule" edge.
func HasSchedule() predicate.Class {
	return predicate.Class(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ScheduleTable, ScheduleColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasScheduleWith applies the HasEdge predicate on the "schedule" edge with a given conditions (other predicates).
func HasScheduleWith(preds ...predicate.Schedule) predicate.Class {
	return predicate.Class(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ScheduleInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ScheduleTable, ScheduleColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPaymentHistory applies the HasEdge predicate on the "payment_history" edge.
func HasPaymentHistory() predicate.Class {
	return predicate.Class(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PaymentHistoryTable, PaymentHistoryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPaymentHistoryWith applies the HasEdge predicate on the "payment_history" edge with a given conditions (other predicates).
func HasPaymentHistoryWith(preds ...predicate.PaymentHistory) predicate.Class {
	return predicate.Class(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PaymentHistoryInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PaymentHistoryTable, PaymentHistoryColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Class) predicate.Class {
	return predicate.Class(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Class) predicate.Class {
	return predicate.Class(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Class) predicate.Class {
	return predicate.Class(func(s *sql.Selector) {
		p(s.Not())
	})
}

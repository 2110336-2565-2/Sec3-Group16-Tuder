// Code generated by ent, DO NOT EDIT.

package review

import (
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the review type in the database.
	Label = "review"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldScore holds the string denoting the score field in the database.
	FieldScore = "score"
	// FieldReviewMsg holds the string denoting the review_msg field in the database.
	FieldReviewMsg = "review_msg"
	// FieldReviewTimeAt holds the string denoting the review_time_at field in the database.
	FieldReviewTimeAt = "review_time_at"
	// EdgeCourse holds the string denoting the course edge name in mutations.
	EdgeCourse = "course"
	// EdgeStudent holds the string denoting the student edge name in mutations.
	EdgeStudent = "student"
	// Table holds the table name of the review in the database.
	Table = "reviews"
	// CourseTable is the table that holds the course relation/edge. The primary key declared below.
	CourseTable = "course_review"
	// CourseInverseTable is the table name for the Course entity.
	// It exists in this package in order to avoid circular dependency with the "course" package.
	CourseInverseTable = "courses"
	// StudentTable is the table that holds the student relation/edge. The primary key declared below.
	StudentTable = "student_review"
	// StudentInverseTable is the table name for the Student entity.
	// It exists in this package in order to avoid circular dependency with the "student" package.
	StudentInverseTable = "students"
)

// Columns holds all SQL columns for review fields.
var Columns = []string{
	FieldID,
	FieldScore,
	FieldReviewMsg,
	FieldReviewTimeAt,
}

var (
	// CoursePrimaryKey and CourseColumn2 are the table columns denoting the
	// primary key for the course relation (M2M).
	CoursePrimaryKey = []string{"course_id", "review_id"}
	// StudentPrimaryKey and StudentColumn2 are the table columns denoting the
	// primary key for the student relation (M2M).
	StudentPrimaryKey = []string{"student_id", "review_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// ScoreValidator is a validator for the "score" field. It is called by the builders before save.
	ScoreValidator func(int8) error
	// DefaultReviewTimeAt holds the default value on creation for the "review_time_at" field.
	DefaultReviewTimeAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/classcancelrequest"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/predicate"
)

// ClassCancelRequestDelete is the builder for deleting a ClassCancelRequest entity.
type ClassCancelRequestDelete struct {
	config
	hooks    []Hook
	mutation *ClassCancelRequestMutation
}

// Where appends a list predicates to the ClassCancelRequestDelete builder.
func (ccrd *ClassCancelRequestDelete) Where(ps ...predicate.ClassCancelRequest) *ClassCancelRequestDelete {
	ccrd.mutation.Where(ps...)
	return ccrd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ccrd *ClassCancelRequestDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, ClassCancelRequestMutation](ctx, ccrd.sqlExec, ccrd.mutation, ccrd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ccrd *ClassCancelRequestDelete) ExecX(ctx context.Context) int {
	n, err := ccrd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ccrd *ClassCancelRequestDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(classcancelrequest.Table, sqlgraph.NewFieldSpec(classcancelrequest.FieldID, field.TypeUUID))
	if ps := ccrd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ccrd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ccrd.mutation.done = true
	return affected, err
}

// ClassCancelRequestDeleteOne is the builder for deleting a single ClassCancelRequest entity.
type ClassCancelRequestDeleteOne struct {
	ccrd *ClassCancelRequestDelete
}

// Where appends a list predicates to the ClassCancelRequestDelete builder.
func (ccrdo *ClassCancelRequestDeleteOne) Where(ps ...predicate.ClassCancelRequest) *ClassCancelRequestDeleteOne {
	ccrdo.ccrd.mutation.Where(ps...)
	return ccrdo
}

// Exec executes the deletion query.
func (ccrdo *ClassCancelRequestDeleteOne) Exec(ctx context.Context) error {
	n, err := ccrdo.ccrd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{classcancelrequest.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ccrdo *ClassCancelRequestDeleteOne) ExecX(ctx context.Context) {
	if err := ccrdo.Exec(ctx); err != nil {
		panic(err)
	}
}

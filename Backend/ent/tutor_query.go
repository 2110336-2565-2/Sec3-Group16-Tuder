// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/course"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/issuereport"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/predicate"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/reviewtutor"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/schedule"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/tutor"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/user"
	"github.com/google/uuid"
)

// TutorQuery is the builder for querying Tutor entities.
type TutorQuery struct {
	config
	ctx             *QueryContext
	order           []OrderFunc
	inters          []Interceptor
	predicates      []predicate.Tutor
	withIssueReport *IssueReportQuery
	withCourse      *CourseQuery
	withReviewTutor *ReviewTutorQuery
	withSchedule    *ScheduleQuery
	withUser        *UserQuery
	withFKs         bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TutorQuery builder.
func (tq *TutorQuery) Where(ps ...predicate.Tutor) *TutorQuery {
	tq.predicates = append(tq.predicates, ps...)
	return tq
}

// Limit the number of records to be returned by this query.
func (tq *TutorQuery) Limit(limit int) *TutorQuery {
	tq.ctx.Limit = &limit
	return tq
}

// Offset to start from.
func (tq *TutorQuery) Offset(offset int) *TutorQuery {
	tq.ctx.Offset = &offset
	return tq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (tq *TutorQuery) Unique(unique bool) *TutorQuery {
	tq.ctx.Unique = &unique
	return tq
}

// Order specifies how the records should be ordered.
func (tq *TutorQuery) Order(o ...OrderFunc) *TutorQuery {
	tq.order = append(tq.order, o...)
	return tq
}

// QueryIssueReport chains the current query on the "issue_report" edge.
func (tq *TutorQuery) QueryIssueReport() *IssueReportQuery {
	query := (&IssueReportClient{config: tq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tutor.Table, tutor.FieldID, selector),
			sqlgraph.To(issuereport.Table, issuereport.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tutor.IssueReportTable, tutor.IssueReportColumn),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCourse chains the current query on the "course" edge.
func (tq *TutorQuery) QueryCourse() *CourseQuery {
	query := (&CourseClient{config: tq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tutor.Table, tutor.FieldID, selector),
			sqlgraph.To(course.Table, course.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tutor.CourseTable, tutor.CourseColumn),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryReviewTutor chains the current query on the "review_tutor" edge.
func (tq *TutorQuery) QueryReviewTutor() *ReviewTutorQuery {
	query := (&ReviewTutorClient{config: tq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tutor.Table, tutor.FieldID, selector),
			sqlgraph.To(reviewtutor.Table, reviewtutor.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tutor.ReviewTutorTable, tutor.ReviewTutorColumn),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySchedule chains the current query on the "schedule" edge.
func (tq *TutorQuery) QuerySchedule() *ScheduleQuery {
	query := (&ScheduleClient{config: tq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tutor.Table, tutor.FieldID, selector),
			sqlgraph.To(schedule.Table, schedule.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tutor.ScheduleTable, tutor.ScheduleColumn),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUser chains the current query on the "user" edge.
func (tq *TutorQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: tq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tutor.Table, tutor.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, tutor.UserTable, tutor.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Tutor entity from the query.
// Returns a *NotFoundError when no Tutor was found.
func (tq *TutorQuery) First(ctx context.Context) (*Tutor, error) {
	nodes, err := tq.Limit(1).All(setContextOp(ctx, tq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{tutor.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (tq *TutorQuery) FirstX(ctx context.Context) *Tutor {
	node, err := tq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Tutor ID from the query.
// Returns a *NotFoundError when no Tutor ID was found.
func (tq *TutorQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = tq.Limit(1).IDs(setContextOp(ctx, tq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{tutor.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (tq *TutorQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := tq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Tutor entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Tutor entity is found.
// Returns a *NotFoundError when no Tutor entities are found.
func (tq *TutorQuery) Only(ctx context.Context) (*Tutor, error) {
	nodes, err := tq.Limit(2).All(setContextOp(ctx, tq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{tutor.Label}
	default:
		return nil, &NotSingularError{tutor.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (tq *TutorQuery) OnlyX(ctx context.Context) *Tutor {
	node, err := tq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Tutor ID in the query.
// Returns a *NotSingularError when more than one Tutor ID is found.
// Returns a *NotFoundError when no entities are found.
func (tq *TutorQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = tq.Limit(2).IDs(setContextOp(ctx, tq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{tutor.Label}
	default:
		err = &NotSingularError{tutor.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (tq *TutorQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := tq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Tutors.
func (tq *TutorQuery) All(ctx context.Context) ([]*Tutor, error) {
	ctx = setContextOp(ctx, tq.ctx, "All")
	if err := tq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Tutor, *TutorQuery]()
	return withInterceptors[[]*Tutor](ctx, tq, qr, tq.inters)
}

// AllX is like All, but panics if an error occurs.
func (tq *TutorQuery) AllX(ctx context.Context) []*Tutor {
	nodes, err := tq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Tutor IDs.
func (tq *TutorQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if tq.ctx.Unique == nil && tq.path != nil {
		tq.Unique(true)
	}
	ctx = setContextOp(ctx, tq.ctx, "IDs")
	if err = tq.Select(tutor.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (tq *TutorQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := tq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (tq *TutorQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, tq.ctx, "Count")
	if err := tq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, tq, querierCount[*TutorQuery](), tq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (tq *TutorQuery) CountX(ctx context.Context) int {
	count, err := tq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (tq *TutorQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, tq.ctx, "Exist")
	switch _, err := tq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (tq *TutorQuery) ExistX(ctx context.Context) bool {
	exist, err := tq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TutorQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (tq *TutorQuery) Clone() *TutorQuery {
	if tq == nil {
		return nil
	}
	return &TutorQuery{
		config:          tq.config,
		ctx:             tq.ctx.Clone(),
		order:           append([]OrderFunc{}, tq.order...),
		inters:          append([]Interceptor{}, tq.inters...),
		predicates:      append([]predicate.Tutor{}, tq.predicates...),
		withIssueReport: tq.withIssueReport.Clone(),
		withCourse:      tq.withCourse.Clone(),
		withReviewTutor: tq.withReviewTutor.Clone(),
		withSchedule:    tq.withSchedule.Clone(),
		withUser:        tq.withUser.Clone(),
		// clone intermediate query.
		sql:  tq.sql.Clone(),
		path: tq.path,
	}
}

// WithIssueReport tells the query-builder to eager-load the nodes that are connected to
// the "issue_report" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TutorQuery) WithIssueReport(opts ...func(*IssueReportQuery)) *TutorQuery {
	query := (&IssueReportClient{config: tq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tq.withIssueReport = query
	return tq
}

// WithCourse tells the query-builder to eager-load the nodes that are connected to
// the "course" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TutorQuery) WithCourse(opts ...func(*CourseQuery)) *TutorQuery {
	query := (&CourseClient{config: tq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tq.withCourse = query
	return tq
}

// WithReviewTutor tells the query-builder to eager-load the nodes that are connected to
// the "review_tutor" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TutorQuery) WithReviewTutor(opts ...func(*ReviewTutorQuery)) *TutorQuery {
	query := (&ReviewTutorClient{config: tq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tq.withReviewTutor = query
	return tq
}

// WithSchedule tells the query-builder to eager-load the nodes that are connected to
// the "schedule" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TutorQuery) WithSchedule(opts ...func(*ScheduleQuery)) *TutorQuery {
	query := (&ScheduleClient{config: tq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tq.withSchedule = query
	return tq
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TutorQuery) WithUser(opts ...func(*UserQuery)) *TutorQuery {
	query := (&UserClient{config: tq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tq.withUser = query
	return tq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Description string `json:"description,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Tutor.Query().
//		GroupBy(tutor.FieldDescription).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (tq *TutorQuery) GroupBy(field string, fields ...string) *TutorGroupBy {
	tq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &TutorGroupBy{build: tq}
	grbuild.flds = &tq.ctx.Fields
	grbuild.label = tutor.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Description string `json:"description,omitempty"`
//	}
//
//	client.Tutor.Query().
//		Select(tutor.FieldDescription).
//		Scan(ctx, &v)
func (tq *TutorQuery) Select(fields ...string) *TutorSelect {
	tq.ctx.Fields = append(tq.ctx.Fields, fields...)
	sbuild := &TutorSelect{TutorQuery: tq}
	sbuild.label = tutor.Label
	sbuild.flds, sbuild.scan = &tq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a TutorSelect configured with the given aggregations.
func (tq *TutorQuery) Aggregate(fns ...AggregateFunc) *TutorSelect {
	return tq.Select().Aggregate(fns...)
}

func (tq *TutorQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range tq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, tq); err != nil {
				return err
			}
		}
	}
	for _, f := range tq.ctx.Fields {
		if !tutor.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if tq.path != nil {
		prev, err := tq.path(ctx)
		if err != nil {
			return err
		}
		tq.sql = prev
	}
	return nil
}

func (tq *TutorQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Tutor, error) {
	var (
		nodes       = []*Tutor{}
		withFKs     = tq.withFKs
		_spec       = tq.querySpec()
		loadedTypes = [5]bool{
			tq.withIssueReport != nil,
			tq.withCourse != nil,
			tq.withReviewTutor != nil,
			tq.withSchedule != nil,
			tq.withUser != nil,
		}
	)
	if tq.withUser != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, tutor.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Tutor).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Tutor{config: tq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, tq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := tq.withIssueReport; query != nil {
		if err := tq.loadIssueReport(ctx, query, nodes,
			func(n *Tutor) { n.Edges.IssueReport = []*IssueReport{} },
			func(n *Tutor, e *IssueReport) { n.Edges.IssueReport = append(n.Edges.IssueReport, e) }); err != nil {
			return nil, err
		}
	}
	if query := tq.withCourse; query != nil {
		if err := tq.loadCourse(ctx, query, nodes,
			func(n *Tutor) { n.Edges.Course = []*Course{} },
			func(n *Tutor, e *Course) { n.Edges.Course = append(n.Edges.Course, e) }); err != nil {
			return nil, err
		}
	}
	if query := tq.withReviewTutor; query != nil {
		if err := tq.loadReviewTutor(ctx, query, nodes,
			func(n *Tutor) { n.Edges.ReviewTutor = []*ReviewTutor{} },
			func(n *Tutor, e *ReviewTutor) { n.Edges.ReviewTutor = append(n.Edges.ReviewTutor, e) }); err != nil {
			return nil, err
		}
	}
	if query := tq.withSchedule; query != nil {
		if err := tq.loadSchedule(ctx, query, nodes,
			func(n *Tutor) { n.Edges.Schedule = []*Schedule{} },
			func(n *Tutor, e *Schedule) { n.Edges.Schedule = append(n.Edges.Schedule, e) }); err != nil {
			return nil, err
		}
	}
	if query := tq.withUser; query != nil {
		if err := tq.loadUser(ctx, query, nodes, nil,
			func(n *Tutor, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (tq *TutorQuery) loadIssueReport(ctx context.Context, query *IssueReportQuery, nodes []*Tutor, init func(*Tutor), assign func(*Tutor, *IssueReport)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Tutor)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.IssueReport(func(s *sql.Selector) {
		s.Where(sql.InValues(tutor.IssueReportColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.tutor_issue_report
		if fk == nil {
			return fmt.Errorf(`foreign-key "tutor_issue_report" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "tutor_issue_report" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (tq *TutorQuery) loadCourse(ctx context.Context, query *CourseQuery, nodes []*Tutor, init func(*Tutor), assign func(*Tutor, *Course)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Tutor)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Course(func(s *sql.Selector) {
		s.Where(sql.InValues(tutor.CourseColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.tutor_course
		if fk == nil {
			return fmt.Errorf(`foreign-key "tutor_course" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "tutor_course" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (tq *TutorQuery) loadReviewTutor(ctx context.Context, query *ReviewTutorQuery, nodes []*Tutor, init func(*Tutor), assign func(*Tutor, *ReviewTutor)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Tutor)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ReviewTutor(func(s *sql.Selector) {
		s.Where(sql.InValues(tutor.ReviewTutorColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.tutor_review_tutor
		if fk == nil {
			return fmt.Errorf(`foreign-key "tutor_review_tutor" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "tutor_review_tutor" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (tq *TutorQuery) loadSchedule(ctx context.Context, query *ScheduleQuery, nodes []*Tutor, init func(*Tutor), assign func(*Tutor, *Schedule)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Tutor)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.InValues(tutor.ScheduleColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.tutor_schedule
		if fk == nil {
			return fmt.Errorf(`foreign-key "tutor_schedule" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "tutor_schedule" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (tq *TutorQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*Tutor, init func(*Tutor), assign func(*Tutor, *User)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*Tutor)
	for i := range nodes {
		if nodes[i].user_tutor == nil {
			continue
		}
		fk := *nodes[i].user_tutor
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_tutor" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (tq *TutorQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := tq.querySpec()
	_spec.Node.Columns = tq.ctx.Fields
	if len(tq.ctx.Fields) > 0 {
		_spec.Unique = tq.ctx.Unique != nil && *tq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, tq.driver, _spec)
}

func (tq *TutorQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(tutor.Table, tutor.Columns, sqlgraph.NewFieldSpec(tutor.FieldID, field.TypeUUID))
	_spec.From = tq.sql
	if unique := tq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if tq.path != nil {
		_spec.Unique = true
	}
	if fields := tq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tutor.FieldID)
		for i := range fields {
			if fields[i] != tutor.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := tq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := tq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := tq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := tq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (tq *TutorQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(tq.driver.Dialect())
	t1 := builder.Table(tutor.Table)
	columns := tq.ctx.Fields
	if len(columns) == 0 {
		columns = tutor.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if tq.sql != nil {
		selector = tq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if tq.ctx.Unique != nil && *tq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range tq.predicates {
		p(selector)
	}
	for _, p := range tq.order {
		p(selector)
	}
	if offset := tq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := tq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// TutorGroupBy is the group-by builder for Tutor entities.
type TutorGroupBy struct {
	selector
	build *TutorQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (tgb *TutorGroupBy) Aggregate(fns ...AggregateFunc) *TutorGroupBy {
	tgb.fns = append(tgb.fns, fns...)
	return tgb
}

// Scan applies the selector query and scans the result into the given value.
func (tgb *TutorGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tgb.build.ctx, "GroupBy")
	if err := tgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TutorQuery, *TutorGroupBy](ctx, tgb.build, tgb, tgb.build.inters, v)
}

func (tgb *TutorGroupBy) sqlScan(ctx context.Context, root *TutorQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(tgb.fns))
	for _, fn := range tgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*tgb.flds)+len(tgb.fns))
		for _, f := range *tgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*tgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// TutorSelect is the builder for selecting fields of Tutor entities.
type TutorSelect struct {
	*TutorQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ts *TutorSelect) Aggregate(fns ...AggregateFunc) *TutorSelect {
	ts.fns = append(ts.fns, fns...)
	return ts
}

// Scan applies the selector query and scans the result into the given value.
func (ts *TutorSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ts.ctx, "Select")
	if err := ts.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TutorQuery, *TutorSelect](ctx, ts.TutorQuery, ts, ts.inters, v)
}

func (ts *TutorSelect) sqlScan(ctx context.Context, root *TutorQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ts.fns))
	for _, fn := range ts.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ts.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

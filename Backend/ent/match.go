// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/match"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/student"
	"github.com/google/uuid"
)

// Match is the model entity for the Match schema.
type Match struct {
	config
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MatchQuery when eager-loading is set.
	Edges         MatchEdges `json:"edges"`
	student_match *uuid.UUID
}

// MatchEdges holds the relations/edges for other nodes in the graph.
type MatchEdges struct {
	// Student holds the value of the student edge.
	Student *Student `json:"student,omitempty"`
	// Course holds the value of the course edge.
	Course []*Course `json:"course,omitempty"`
	// Class holds the value of the class edge.
	Class []*Class `json:"class,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// StudentOrErr returns the Student value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MatchEdges) StudentOrErr() (*Student, error) {
	if e.loadedTypes[0] {
		if e.Student == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: student.Label}
		}
		return e.Student, nil
	}
	return nil, &NotLoadedError{edge: "student"}
}

// CourseOrErr returns the Course value or an error if the edge
// was not loaded in eager-loading.
func (e MatchEdges) CourseOrErr() ([]*Course, error) {
	if e.loadedTypes[1] {
		return e.Course, nil
	}
	return nil, &NotLoadedError{edge: "course"}
}

// ClassOrErr returns the Class value or an error if the edge
// was not loaded in eager-loading.
func (e MatchEdges) ClassOrErr() ([]*Class, error) {
	if e.loadedTypes[2] {
		return e.Class, nil
	}
	return nil, &NotLoadedError{edge: "class"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Match) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case match.FieldID:
			values[i] = new(uuid.UUID)
		case match.ForeignKeys[0]: // student_match
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Match", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Match fields.
func (m *Match) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case match.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				m.ID = *value
			}
		case match.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field student_match", values[i])
			} else if value.Valid {
				m.student_match = new(uuid.UUID)
				*m.student_match = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryStudent queries the "student" edge of the Match entity.
func (m *Match) QueryStudent() *StudentQuery {
	return NewMatchClient(m.config).QueryStudent(m)
}

// QueryCourse queries the "course" edge of the Match entity.
func (m *Match) QueryCourse() *CourseQuery {
	return NewMatchClient(m.config).QueryCourse(m)
}

// QueryClass queries the "class" edge of the Match entity.
func (m *Match) QueryClass() *ClassQuery {
	return NewMatchClient(m.config).QueryClass(m)
}

// Update returns a builder for updating this Match.
// Note that you need to call Match.Unwrap() before calling this method if this Match
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Match) Update() *MatchUpdateOne {
	return NewMatchClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Match entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Match) Unwrap() *Match {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Match is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Match) String() string {
	var builder strings.Builder
	builder.WriteString("Match(")
	builder.WriteString(fmt.Sprintf("id=%v", m.ID))
	builder.WriteByte(')')
	return builder.String()
}

// Matches is a parsable slice of Match.
type Matches []*Match

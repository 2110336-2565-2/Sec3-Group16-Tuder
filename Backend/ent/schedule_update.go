// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/match"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/predicate"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/schedule"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/tutor"
	"github.com/google/uuid"
)

// ScheduleUpdate is the builder for updating Schedule entities.
type ScheduleUpdate struct {
	config
	hooks    []Hook
	mutation *ScheduleMutation
}

// Where appends a list predicates to the ScheduleUpdate builder.
func (su *ScheduleUpdate) Where(ps ...predicate.Schedule) *ScheduleUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetDay0 sets the "day_0" field.
func (su *ScheduleUpdate) SetDay0(b [24]bool) *ScheduleUpdate {
	su.mutation.SetDay0(b)
	return su
}

// SetDay1 sets the "day_1" field.
func (su *ScheduleUpdate) SetDay1(b [24]bool) *ScheduleUpdate {
	su.mutation.SetDay1(b)
	return su
}

// SetDay2 sets the "day_2" field.
func (su *ScheduleUpdate) SetDay2(b [24]bool) *ScheduleUpdate {
	su.mutation.SetDay2(b)
	return su
}

// SetDay3 sets the "day_3" field.
func (su *ScheduleUpdate) SetDay3(b [24]bool) *ScheduleUpdate {
	su.mutation.SetDay3(b)
	return su
}

// SetDay4 sets the "day_4" field.
func (su *ScheduleUpdate) SetDay4(b [24]bool) *ScheduleUpdate {
	su.mutation.SetDay4(b)
	return su
}

// SetDay5 sets the "day_5" field.
func (su *ScheduleUpdate) SetDay5(b [24]bool) *ScheduleUpdate {
	su.mutation.SetDay5(b)
	return su
}

// SetDay6 sets the "day_6" field.
func (su *ScheduleUpdate) SetDay6(b [24]bool) *ScheduleUpdate {
	su.mutation.SetDay6(b)
	return su
}

// SetTutorID sets the "tutor" edge to the Tutor entity by ID.
func (su *ScheduleUpdate) SetTutorID(id uuid.UUID) *ScheduleUpdate {
	su.mutation.SetTutorID(id)
	return su
}

// SetNillableTutorID sets the "tutor" edge to the Tutor entity by ID if the given value is not nil.
func (su *ScheduleUpdate) SetNillableTutorID(id *uuid.UUID) *ScheduleUpdate {
	if id != nil {
		su = su.SetTutorID(*id)
	}
	return su
}

// SetTutor sets the "tutor" edge to the Tutor entity.
func (su *ScheduleUpdate) SetTutor(t *Tutor) *ScheduleUpdate {
	return su.SetTutorID(t.ID)
}

// SetMatchID sets the "match" edge to the Match entity by ID.
func (su *ScheduleUpdate) SetMatchID(id uuid.UUID) *ScheduleUpdate {
	su.mutation.SetMatchID(id)
	return su
}

// SetNillableMatchID sets the "match" edge to the Match entity by ID if the given value is not nil.
func (su *ScheduleUpdate) SetNillableMatchID(id *uuid.UUID) *ScheduleUpdate {
	if id != nil {
		su = su.SetMatchID(*id)
	}
	return su
}

// SetMatch sets the "match" edge to the Match entity.
func (su *ScheduleUpdate) SetMatch(m *Match) *ScheduleUpdate {
	return su.SetMatchID(m.ID)
}

// Mutation returns the ScheduleMutation object of the builder.
func (su *ScheduleUpdate) Mutation() *ScheduleMutation {
	return su.mutation
}

// ClearTutor clears the "tutor" edge to the Tutor entity.
func (su *ScheduleUpdate) ClearTutor() *ScheduleUpdate {
	su.mutation.ClearTutor()
	return su
}

// ClearMatch clears the "match" edge to the Match entity.
func (su *ScheduleUpdate) ClearMatch() *ScheduleUpdate {
	su.mutation.ClearMatch()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *ScheduleUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, ScheduleMutation](ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *ScheduleUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *ScheduleUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *ScheduleUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *ScheduleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(schedule.Table, schedule.Columns, sqlgraph.NewFieldSpec(schedule.FieldID, field.TypeUUID))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Day0(); ok {
		_spec.SetField(schedule.FieldDay0, field.TypeJSON, value)
	}
	if value, ok := su.mutation.Day1(); ok {
		_spec.SetField(schedule.FieldDay1, field.TypeJSON, value)
	}
	if value, ok := su.mutation.Day2(); ok {
		_spec.SetField(schedule.FieldDay2, field.TypeJSON, value)
	}
	if value, ok := su.mutation.Day3(); ok {
		_spec.SetField(schedule.FieldDay3, field.TypeJSON, value)
	}
	if value, ok := su.mutation.Day4(); ok {
		_spec.SetField(schedule.FieldDay4, field.TypeJSON, value)
	}
	if value, ok := su.mutation.Day5(); ok {
		_spec.SetField(schedule.FieldDay5, field.TypeJSON, value)
	}
	if value, ok := su.mutation.Day6(); ok {
		_spec.SetField(schedule.FieldDay6, field.TypeJSON, value)
	}
	if su.mutation.TutorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   schedule.TutorTable,
			Columns: []string{schedule.TutorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tutor.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.TutorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   schedule.TutorTable,
			Columns: []string{schedule.TutorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tutor.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.MatchCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   schedule.MatchTable,
			Columns: []string{schedule.MatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(match.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.MatchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   schedule.MatchTable,
			Columns: []string{schedule.MatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(match.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{schedule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// ScheduleUpdateOne is the builder for updating a single Schedule entity.
type ScheduleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ScheduleMutation
}

// SetDay0 sets the "day_0" field.
func (suo *ScheduleUpdateOne) SetDay0(b [24]bool) *ScheduleUpdateOne {
	suo.mutation.SetDay0(b)
	return suo
}

// SetDay1 sets the "day_1" field.
func (suo *ScheduleUpdateOne) SetDay1(b [24]bool) *ScheduleUpdateOne {
	suo.mutation.SetDay1(b)
	return suo
}

// SetDay2 sets the "day_2" field.
func (suo *ScheduleUpdateOne) SetDay2(b [24]bool) *ScheduleUpdateOne {
	suo.mutation.SetDay2(b)
	return suo
}

// SetDay3 sets the "day_3" field.
func (suo *ScheduleUpdateOne) SetDay3(b [24]bool) *ScheduleUpdateOne {
	suo.mutation.SetDay3(b)
	return suo
}

// SetDay4 sets the "day_4" field.
func (suo *ScheduleUpdateOne) SetDay4(b [24]bool) *ScheduleUpdateOne {
	suo.mutation.SetDay4(b)
	return suo
}

// SetDay5 sets the "day_5" field.
func (suo *ScheduleUpdateOne) SetDay5(b [24]bool) *ScheduleUpdateOne {
	suo.mutation.SetDay5(b)
	return suo
}

// SetDay6 sets the "day_6" field.
func (suo *ScheduleUpdateOne) SetDay6(b [24]bool) *ScheduleUpdateOne {
	suo.mutation.SetDay6(b)
	return suo
}

// SetTutorID sets the "tutor" edge to the Tutor entity by ID.
func (suo *ScheduleUpdateOne) SetTutorID(id uuid.UUID) *ScheduleUpdateOne {
	suo.mutation.SetTutorID(id)
	return suo
}

// SetNillableTutorID sets the "tutor" edge to the Tutor entity by ID if the given value is not nil.
func (suo *ScheduleUpdateOne) SetNillableTutorID(id *uuid.UUID) *ScheduleUpdateOne {
	if id != nil {
		suo = suo.SetTutorID(*id)
	}
	return suo
}

// SetTutor sets the "tutor" edge to the Tutor entity.
func (suo *ScheduleUpdateOne) SetTutor(t *Tutor) *ScheduleUpdateOne {
	return suo.SetTutorID(t.ID)
}

// SetMatchID sets the "match" edge to the Match entity by ID.
func (suo *ScheduleUpdateOne) SetMatchID(id uuid.UUID) *ScheduleUpdateOne {
	suo.mutation.SetMatchID(id)
	return suo
}

// SetNillableMatchID sets the "match" edge to the Match entity by ID if the given value is not nil.
func (suo *ScheduleUpdateOne) SetNillableMatchID(id *uuid.UUID) *ScheduleUpdateOne {
	if id != nil {
		suo = suo.SetMatchID(*id)
	}
	return suo
}

// SetMatch sets the "match" edge to the Match entity.
func (suo *ScheduleUpdateOne) SetMatch(m *Match) *ScheduleUpdateOne {
	return suo.SetMatchID(m.ID)
}

// Mutation returns the ScheduleMutation object of the builder.
func (suo *ScheduleUpdateOne) Mutation() *ScheduleMutation {
	return suo.mutation
}

// ClearTutor clears the "tutor" edge to the Tutor entity.
func (suo *ScheduleUpdateOne) ClearTutor() *ScheduleUpdateOne {
	suo.mutation.ClearTutor()
	return suo
}

// ClearMatch clears the "match" edge to the Match entity.
func (suo *ScheduleUpdateOne) ClearMatch() *ScheduleUpdateOne {
	suo.mutation.ClearMatch()
	return suo
}

// Where appends a list predicates to the ScheduleUpdate builder.
func (suo *ScheduleUpdateOne) Where(ps ...predicate.Schedule) *ScheduleUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *ScheduleUpdateOne) Select(field string, fields ...string) *ScheduleUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Schedule entity.
func (suo *ScheduleUpdateOne) Save(ctx context.Context) (*Schedule, error) {
	return withHooks[*Schedule, ScheduleMutation](ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *ScheduleUpdateOne) SaveX(ctx context.Context) *Schedule {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *ScheduleUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *ScheduleUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *ScheduleUpdateOne) sqlSave(ctx context.Context) (_node *Schedule, err error) {
	_spec := sqlgraph.NewUpdateSpec(schedule.Table, schedule.Columns, sqlgraph.NewFieldSpec(schedule.FieldID, field.TypeUUID))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Schedule.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, schedule.FieldID)
		for _, f := range fields {
			if !schedule.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != schedule.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Day0(); ok {
		_spec.SetField(schedule.FieldDay0, field.TypeJSON, value)
	}
	if value, ok := suo.mutation.Day1(); ok {
		_spec.SetField(schedule.FieldDay1, field.TypeJSON, value)
	}
	if value, ok := suo.mutation.Day2(); ok {
		_spec.SetField(schedule.FieldDay2, field.TypeJSON, value)
	}
	if value, ok := suo.mutation.Day3(); ok {
		_spec.SetField(schedule.FieldDay3, field.TypeJSON, value)
	}
	if value, ok := suo.mutation.Day4(); ok {
		_spec.SetField(schedule.FieldDay4, field.TypeJSON, value)
	}
	if value, ok := suo.mutation.Day5(); ok {
		_spec.SetField(schedule.FieldDay5, field.TypeJSON, value)
	}
	if value, ok := suo.mutation.Day6(); ok {
		_spec.SetField(schedule.FieldDay6, field.TypeJSON, value)
	}
	if suo.mutation.TutorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   schedule.TutorTable,
			Columns: []string{schedule.TutorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tutor.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.TutorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   schedule.TutorTable,
			Columns: []string{schedule.TutorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tutor.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.MatchCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   schedule.MatchTable,
			Columns: []string{schedule.MatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(match.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.MatchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   schedule.MatchTable,
			Columns: []string{schedule.MatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(match.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Schedule{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{schedule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/predicate"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/schedule"
)

// ScheduleUpdate is the builder for updating Schedule entities.
type ScheduleUpdate struct {
	config
	hooks    []Hook
	mutation *ScheduleMutation
}

// Where appends a list predicates to the ScheduleUpdate builder.
func (su *ScheduleUpdate) Where(ps ...predicate.Schedule) *ScheduleUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetDay0 sets the "day_0" field.
func (su *ScheduleUpdate) SetDay0(b bool) *ScheduleUpdate {
	su.mutation.SetDay0(b)
	return su
}

// SetNillableDay0 sets the "day_0" field if the given value is not nil.
func (su *ScheduleUpdate) SetNillableDay0(b *bool) *ScheduleUpdate {
	if b != nil {
		su.SetDay0(*b)
	}
	return su
}

// ClearDay0 clears the value of the "day_0" field.
func (su *ScheduleUpdate) ClearDay0() *ScheduleUpdate {
	su.mutation.ClearDay0()
	return su
}

// SetDay1 sets the "day_1" field.
func (su *ScheduleUpdate) SetDay1(b bool) *ScheduleUpdate {
	su.mutation.SetDay1(b)
	return su
}

// SetNillableDay1 sets the "day_1" field if the given value is not nil.
func (su *ScheduleUpdate) SetNillableDay1(b *bool) *ScheduleUpdate {
	if b != nil {
		su.SetDay1(*b)
	}
	return su
}

// ClearDay1 clears the value of the "day_1" field.
func (su *ScheduleUpdate) ClearDay1() *ScheduleUpdate {
	su.mutation.ClearDay1()
	return su
}

// SetDay2 sets the "day_2" field.
func (su *ScheduleUpdate) SetDay2(b bool) *ScheduleUpdate {
	su.mutation.SetDay2(b)
	return su
}

// SetNillableDay2 sets the "day_2" field if the given value is not nil.
func (su *ScheduleUpdate) SetNillableDay2(b *bool) *ScheduleUpdate {
	if b != nil {
		su.SetDay2(*b)
	}
	return su
}

// ClearDay2 clears the value of the "day_2" field.
func (su *ScheduleUpdate) ClearDay2() *ScheduleUpdate {
	su.mutation.ClearDay2()
	return su
}

// SetDay3 sets the "day_3" field.
func (su *ScheduleUpdate) SetDay3(b bool) *ScheduleUpdate {
	su.mutation.SetDay3(b)
	return su
}

// SetNillableDay3 sets the "day_3" field if the given value is not nil.
func (su *ScheduleUpdate) SetNillableDay3(b *bool) *ScheduleUpdate {
	if b != nil {
		su.SetDay3(*b)
	}
	return su
}

// ClearDay3 clears the value of the "day_3" field.
func (su *ScheduleUpdate) ClearDay3() *ScheduleUpdate {
	su.mutation.ClearDay3()
	return su
}

// SetDay4 sets the "day_4" field.
func (su *ScheduleUpdate) SetDay4(b bool) *ScheduleUpdate {
	su.mutation.SetDay4(b)
	return su
}

// SetNillableDay4 sets the "day_4" field if the given value is not nil.
func (su *ScheduleUpdate) SetNillableDay4(b *bool) *ScheduleUpdate {
	if b != nil {
		su.SetDay4(*b)
	}
	return su
}

// ClearDay4 clears the value of the "day_4" field.
func (su *ScheduleUpdate) ClearDay4() *ScheduleUpdate {
	su.mutation.ClearDay4()
	return su
}

// SetDay5 sets the "day_5" field.
func (su *ScheduleUpdate) SetDay5(b bool) *ScheduleUpdate {
	su.mutation.SetDay5(b)
	return su
}

// SetNillableDay5 sets the "day_5" field if the given value is not nil.
func (su *ScheduleUpdate) SetNillableDay5(b *bool) *ScheduleUpdate {
	if b != nil {
		su.SetDay5(*b)
	}
	return su
}

// ClearDay5 clears the value of the "day_5" field.
func (su *ScheduleUpdate) ClearDay5() *ScheduleUpdate {
	su.mutation.ClearDay5()
	return su
}

// SetDay6 sets the "day_6" field.
func (su *ScheduleUpdate) SetDay6(b bool) *ScheduleUpdate {
	su.mutation.SetDay6(b)
	return su
}

// SetNillableDay6 sets the "day_6" field if the given value is not nil.
func (su *ScheduleUpdate) SetNillableDay6(b *bool) *ScheduleUpdate {
	if b != nil {
		su.SetDay6(*b)
	}
	return su
}

// ClearDay6 clears the value of the "day_6" field.
func (su *ScheduleUpdate) ClearDay6() *ScheduleUpdate {
	su.mutation.ClearDay6()
	return su
}

// Mutation returns the ScheduleMutation object of the builder.
func (su *ScheduleUpdate) Mutation() *ScheduleMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *ScheduleUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, ScheduleMutation](ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *ScheduleUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *ScheduleUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *ScheduleUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *ScheduleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(schedule.Table, schedule.Columns, sqlgraph.NewFieldSpec(schedule.FieldID, field.TypeUUID))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Day0(); ok {
		_spec.SetField(schedule.FieldDay0, field.TypeBool, value)
	}
	if su.mutation.Day0Cleared() {
		_spec.ClearField(schedule.FieldDay0, field.TypeBool)
	}
	if value, ok := su.mutation.Day1(); ok {
		_spec.SetField(schedule.FieldDay1, field.TypeBool, value)
	}
	if su.mutation.Day1Cleared() {
		_spec.ClearField(schedule.FieldDay1, field.TypeBool)
	}
	if value, ok := su.mutation.Day2(); ok {
		_spec.SetField(schedule.FieldDay2, field.TypeBool, value)
	}
	if su.mutation.Day2Cleared() {
		_spec.ClearField(schedule.FieldDay2, field.TypeBool)
	}
	if value, ok := su.mutation.Day3(); ok {
		_spec.SetField(schedule.FieldDay3, field.TypeBool, value)
	}
	if su.mutation.Day3Cleared() {
		_spec.ClearField(schedule.FieldDay3, field.TypeBool)
	}
	if value, ok := su.mutation.Day4(); ok {
		_spec.SetField(schedule.FieldDay4, field.TypeBool, value)
	}
	if su.mutation.Day4Cleared() {
		_spec.ClearField(schedule.FieldDay4, field.TypeBool)
	}
	if value, ok := su.mutation.Day5(); ok {
		_spec.SetField(schedule.FieldDay5, field.TypeBool, value)
	}
	if su.mutation.Day5Cleared() {
		_spec.ClearField(schedule.FieldDay5, field.TypeBool)
	}
	if value, ok := su.mutation.Day6(); ok {
		_spec.SetField(schedule.FieldDay6, field.TypeBool, value)
	}
	if su.mutation.Day6Cleared() {
		_spec.ClearField(schedule.FieldDay6, field.TypeBool)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{schedule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// ScheduleUpdateOne is the builder for updating a single Schedule entity.
type ScheduleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ScheduleMutation
}

// SetDay0 sets the "day_0" field.
func (suo *ScheduleUpdateOne) SetDay0(b bool) *ScheduleUpdateOne {
	suo.mutation.SetDay0(b)
	return suo
}

// SetNillableDay0 sets the "day_0" field if the given value is not nil.
func (suo *ScheduleUpdateOne) SetNillableDay0(b *bool) *ScheduleUpdateOne {
	if b != nil {
		suo.SetDay0(*b)
	}
	return suo
}

// ClearDay0 clears the value of the "day_0" field.
func (suo *ScheduleUpdateOne) ClearDay0() *ScheduleUpdateOne {
	suo.mutation.ClearDay0()
	return suo
}

// SetDay1 sets the "day_1" field.
func (suo *ScheduleUpdateOne) SetDay1(b bool) *ScheduleUpdateOne {
	suo.mutation.SetDay1(b)
	return suo
}

// SetNillableDay1 sets the "day_1" field if the given value is not nil.
func (suo *ScheduleUpdateOne) SetNillableDay1(b *bool) *ScheduleUpdateOne {
	if b != nil {
		suo.SetDay1(*b)
	}
	return suo
}

// ClearDay1 clears the value of the "day_1" field.
func (suo *ScheduleUpdateOne) ClearDay1() *ScheduleUpdateOne {
	suo.mutation.ClearDay1()
	return suo
}

// SetDay2 sets the "day_2" field.
func (suo *ScheduleUpdateOne) SetDay2(b bool) *ScheduleUpdateOne {
	suo.mutation.SetDay2(b)
	return suo
}

// SetNillableDay2 sets the "day_2" field if the given value is not nil.
func (suo *ScheduleUpdateOne) SetNillableDay2(b *bool) *ScheduleUpdateOne {
	if b != nil {
		suo.SetDay2(*b)
	}
	return suo
}

// ClearDay2 clears the value of the "day_2" field.
func (suo *ScheduleUpdateOne) ClearDay2() *ScheduleUpdateOne {
	suo.mutation.ClearDay2()
	return suo
}

// SetDay3 sets the "day_3" field.
func (suo *ScheduleUpdateOne) SetDay3(b bool) *ScheduleUpdateOne {
	suo.mutation.SetDay3(b)
	return suo
}

// SetNillableDay3 sets the "day_3" field if the given value is not nil.
func (suo *ScheduleUpdateOne) SetNillableDay3(b *bool) *ScheduleUpdateOne {
	if b != nil {
		suo.SetDay3(*b)
	}
	return suo
}

// ClearDay3 clears the value of the "day_3" field.
func (suo *ScheduleUpdateOne) ClearDay3() *ScheduleUpdateOne {
	suo.mutation.ClearDay3()
	return suo
}

// SetDay4 sets the "day_4" field.
func (suo *ScheduleUpdateOne) SetDay4(b bool) *ScheduleUpdateOne {
	suo.mutation.SetDay4(b)
	return suo
}

// SetNillableDay4 sets the "day_4" field if the given value is not nil.
func (suo *ScheduleUpdateOne) SetNillableDay4(b *bool) *ScheduleUpdateOne {
	if b != nil {
		suo.SetDay4(*b)
	}
	return suo
}

// ClearDay4 clears the value of the "day_4" field.
func (suo *ScheduleUpdateOne) ClearDay4() *ScheduleUpdateOne {
	suo.mutation.ClearDay4()
	return suo
}

// SetDay5 sets the "day_5" field.
func (suo *ScheduleUpdateOne) SetDay5(b bool) *ScheduleUpdateOne {
	suo.mutation.SetDay5(b)
	return suo
}

// SetNillableDay5 sets the "day_5" field if the given value is not nil.
func (suo *ScheduleUpdateOne) SetNillableDay5(b *bool) *ScheduleUpdateOne {
	if b != nil {
		suo.SetDay5(*b)
	}
	return suo
}

// ClearDay5 clears the value of the "day_5" field.
func (suo *ScheduleUpdateOne) ClearDay5() *ScheduleUpdateOne {
	suo.mutation.ClearDay5()
	return suo
}

// SetDay6 sets the "day_6" field.
func (suo *ScheduleUpdateOne) SetDay6(b bool) *ScheduleUpdateOne {
	suo.mutation.SetDay6(b)
	return suo
}

// SetNillableDay6 sets the "day_6" field if the given value is not nil.
func (suo *ScheduleUpdateOne) SetNillableDay6(b *bool) *ScheduleUpdateOne {
	if b != nil {
		suo.SetDay6(*b)
	}
	return suo
}

// ClearDay6 clears the value of the "day_6" field.
func (suo *ScheduleUpdateOne) ClearDay6() *ScheduleUpdateOne {
	suo.mutation.ClearDay6()
	return suo
}

// Mutation returns the ScheduleMutation object of the builder.
func (suo *ScheduleUpdateOne) Mutation() *ScheduleMutation {
	return suo.mutation
}

// Where appends a list predicates to the ScheduleUpdate builder.
func (suo *ScheduleUpdateOne) Where(ps ...predicate.Schedule) *ScheduleUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *ScheduleUpdateOne) Select(field string, fields ...string) *ScheduleUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Schedule entity.
func (suo *ScheduleUpdateOne) Save(ctx context.Context) (*Schedule, error) {
	return withHooks[*Schedule, ScheduleMutation](ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *ScheduleUpdateOne) SaveX(ctx context.Context) *Schedule {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *ScheduleUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *ScheduleUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *ScheduleUpdateOne) sqlSave(ctx context.Context) (_node *Schedule, err error) {
	_spec := sqlgraph.NewUpdateSpec(schedule.Table, schedule.Columns, sqlgraph.NewFieldSpec(schedule.FieldID, field.TypeUUID))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Schedule.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, schedule.FieldID)
		for _, f := range fields {
			if !schedule.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != schedule.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Day0(); ok {
		_spec.SetField(schedule.FieldDay0, field.TypeBool, value)
	}
	if suo.mutation.Day0Cleared() {
		_spec.ClearField(schedule.FieldDay0, field.TypeBool)
	}
	if value, ok := suo.mutation.Day1(); ok {
		_spec.SetField(schedule.FieldDay1, field.TypeBool, value)
	}
	if suo.mutation.Day1Cleared() {
		_spec.ClearField(schedule.FieldDay1, field.TypeBool)
	}
	if value, ok := suo.mutation.Day2(); ok {
		_spec.SetField(schedule.FieldDay2, field.TypeBool, value)
	}
	if suo.mutation.Day2Cleared() {
		_spec.ClearField(schedule.FieldDay2, field.TypeBool)
	}
	if value, ok := suo.mutation.Day3(); ok {
		_spec.SetField(schedule.FieldDay3, field.TypeBool, value)
	}
	if suo.mutation.Day3Cleared() {
		_spec.ClearField(schedule.FieldDay3, field.TypeBool)
	}
	if value, ok := suo.mutation.Day4(); ok {
		_spec.SetField(schedule.FieldDay4, field.TypeBool, value)
	}
	if suo.mutation.Day4Cleared() {
		_spec.ClearField(schedule.FieldDay4, field.TypeBool)
	}
	if value, ok := suo.mutation.Day5(); ok {
		_spec.SetField(schedule.FieldDay5, field.TypeBool, value)
	}
	if suo.mutation.Day5Cleared() {
		_spec.ClearField(schedule.FieldDay5, field.TypeBool)
	}
	if value, ok := suo.mutation.Day6(); ok {
		_spec.SetField(schedule.FieldDay6, field.TypeBool, value)
	}
	if suo.mutation.Day6Cleared() {
		_spec.ClearField(schedule.FieldDay6, field.TypeBool)
	}
	_node = &Schedule{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{schedule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}

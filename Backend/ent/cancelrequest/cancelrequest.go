// Code generated by ent, DO NOT EDIT.

package cancelrequest

import (
	"fmt"
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the cancelrequest type in the database.
	Label = "cancel_request"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldReportDate holds the string denoting the report_date field in the database.
	FieldReportDate = "report_date"
	// FieldImgURL holds the string denoting the img_url field in the database.
	FieldImgURL = "img_url"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// EdgeMatch holds the string denoting the match edge name in mutations.
	EdgeMatch = "match"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the cancelrequest in the database.
	Table = "cancel_requests"
	// MatchTable is the table that holds the match relation/edge.
	MatchTable = "cancel_requests"
	// MatchInverseTable is the table name for the Match entity.
	// It exists in this package in order to avoid circular dependency with the "match" package.
	MatchInverseTable = "matches"
	// MatchColumn is the table column denoting the match relation/edge.
	MatchColumn = "cancel_request_match"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "cancel_requests"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_cancel_request"
)

// Columns holds all SQL columns for cancelrequest fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldReportDate,
	FieldImgURL,
	FieldDescription,
	FieldStatus,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "cancel_requests"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"cancel_request_match",
	"user_cancel_request",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// DefaultReportDate holds the default value on creation for the "report_date" field.
	DefaultReportDate func() time.Time
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusPending  Status = "pending"
	StatusApproved Status = "approved"
	StatusRejected Status = "rejected"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPending, StatusApproved, StatusRejected:
		return nil
	default:
		return fmt.Errorf("cancelrequest: invalid enum value for status field: %q", s)
	}
}

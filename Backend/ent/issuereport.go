// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/issuereport"
	"github.com/google/uuid"
)

// IssueReport is the model entity for the IssueReport schema.
type IssueReport struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// ReportDate holds the value of the "report_date" field.
	ReportDate string `json:"report_date,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*IssueReport) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case issuereport.FieldTitle, issuereport.FieldDescription, issuereport.FieldReportDate, issuereport.FieldStatus:
			values[i] = new(sql.NullString)
		case issuereport.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type IssueReport", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the IssueReport fields.
func (ir *IssueReport) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case issuereport.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ir.ID = *value
			}
		case issuereport.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				ir.Title = value.String
			}
		case issuereport.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				ir.Description = value.String
			}
		case issuereport.FieldReportDate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field report_date", values[i])
			} else if value.Valid {
				ir.ReportDate = value.String
			}
		case issuereport.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ir.Status = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this IssueReport.
// Note that you need to call IssueReport.Unwrap() before calling this method if this IssueReport
// was returned from a transaction, and the transaction was committed or rolled back.
func (ir *IssueReport) Update() *IssueReportUpdateOne {
	return NewIssueReportClient(ir.config).UpdateOne(ir)
}

// Unwrap unwraps the IssueReport entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ir *IssueReport) Unwrap() *IssueReport {
	_tx, ok := ir.config.driver.(*txDriver)
	if !ok {
		panic("ent: IssueReport is not a transactional entity")
	}
	ir.config.driver = _tx.drv
	return ir
}

// String implements the fmt.Stringer.
func (ir *IssueReport) String() string {
	var builder strings.Builder
	builder.WriteString("IssueReport(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ir.ID))
	builder.WriteString("title=")
	builder.WriteString(ir.Title)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(ir.Description)
	builder.WriteString(", ")
	builder.WriteString("report_date=")
	builder.WriteString(ir.ReportDate)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(ir.Status)
	builder.WriteByte(')')
	return builder.String()
}

// IssueReports is a parsable slice of IssueReport.
type IssueReports []*IssueReport

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/course"
	"github.com/google/uuid"
)

// Course is the model entity for the Course schema.
type Course struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// EstimatedTime holds the value of the "estimated_time" field.
	EstimatedTime string `json:"estimated_time,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// CourseStatus holds the value of the "course_status" field.
	CourseStatus string `json:"course_status,omitempty"`
	// PricePerHour holds the value of the "price_per_hour" field.
	PricePerHour int `json:"price_per_hour,omitempty"`
	// LevelID holds the value of the "level_id" field.
	LevelID string `json:"level_id,omitempty"`
	// CoursePictureURL holds the value of the "course_picture_url" field.
	CoursePictureURL *string `json:"course_picture_url,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Course) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case course.FieldPricePerHour:
			values[i] = new(sql.NullInt64)
		case course.FieldTitle, course.FieldEstimatedTime, course.FieldDescription, course.FieldCourseStatus, course.FieldLevelID, course.FieldCoursePictureURL:
			values[i] = new(sql.NullString)
		case course.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Course", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Course fields.
func (c *Course) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case course.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case course.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				c.Title = value.String
			}
		case course.FieldEstimatedTime:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field estimated_time", values[i])
			} else if value.Valid {
				c.EstimatedTime = value.String
			}
		case course.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				c.Description = value.String
			}
		case course.FieldCourseStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field course_status", values[i])
			} else if value.Valid {
				c.CourseStatus = value.String
			}
		case course.FieldPricePerHour:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field price_per_hour", values[i])
			} else if value.Valid {
				c.PricePerHour = int(value.Int64)
			}
		case course.FieldLevelID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field level_id", values[i])
			} else if value.Valid {
				c.LevelID = value.String
			}
		case course.FieldCoursePictureURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field course_picture_url", values[i])
			} else if value.Valid {
				c.CoursePictureURL = new(string)
				*c.CoursePictureURL = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Course.
// Note that you need to call Course.Unwrap() before calling this method if this Course
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Course) Update() *CourseUpdateOne {
	return NewCourseClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Course entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Course) Unwrap() *Course {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Course is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Course) String() string {
	var builder strings.Builder
	builder.WriteString("Course(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("title=")
	builder.WriteString(c.Title)
	builder.WriteString(", ")
	builder.WriteString("estimated_time=")
	builder.WriteString(c.EstimatedTime)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(c.Description)
	builder.WriteString(", ")
	builder.WriteString("course_status=")
	builder.WriteString(c.CourseStatus)
	builder.WriteString(", ")
	builder.WriteString("price_per_hour=")
	builder.WriteString(fmt.Sprintf("%v", c.PricePerHour))
	builder.WriteString(", ")
	builder.WriteString("level_id=")
	builder.WriteString(c.LevelID)
	builder.WriteString(", ")
	if v := c.CoursePictureURL; v != nil {
		builder.WriteString("course_picture_url=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// Courses is a parsable slice of Course.
type Courses []*Course

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/class"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/course"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/reviewcourse"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/student"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/tutor"
	"github.com/google/uuid"
)

// CourseCreate is the builder for creating a Course entity.
type CourseCreate struct {
	config
	mutation *CourseMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (cc *CourseCreate) SetTitle(s string) *CourseCreate {
	cc.mutation.SetTitle(s)
	return cc
}

// SetSubject sets the "subject" field.
func (cc *CourseCreate) SetSubject(s string) *CourseCreate {
	cc.mutation.SetSubject(s)
	return cc
}

// SetTopic sets the "topic" field.
func (cc *CourseCreate) SetTopic(s string) *CourseCreate {
	cc.mutation.SetTopic(s)
	return cc
}

// SetEstimatedTime sets the "estimated_time" field.
func (cc *CourseCreate) SetEstimatedTime(t time.Time) *CourseCreate {
	cc.mutation.SetEstimatedTime(t)
	return cc
}

// SetDescription sets the "description" field.
func (cc *CourseCreate) SetDescription(s string) *CourseCreate {
	cc.mutation.SetDescription(s)
	return cc
}

// SetCourseStatus sets the "course_status" field.
func (cc *CourseCreate) SetCourseStatus(s string) *CourseCreate {
	cc.mutation.SetCourseStatus(s)
	return cc
}

// SetPricePerHour sets the "price_per_hour" field.
func (cc *CourseCreate) SetPricePerHour(i int) *CourseCreate {
	cc.mutation.SetPricePerHour(i)
	return cc
}

// SetLevel sets the "level" field.
func (cc *CourseCreate) SetLevel(c course.Level) *CourseCreate {
	cc.mutation.SetLevel(c)
	return cc
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (cc *CourseCreate) SetNillableLevel(c *course.Level) *CourseCreate {
	if c != nil {
		cc.SetLevel(*c)
	}
	return cc
}

// SetCoursePictureURL sets the "course_picture_url" field.
func (cc *CourseCreate) SetCoursePictureURL(s string) *CourseCreate {
	cc.mutation.SetCoursePictureURL(s)
	return cc
}

// SetNillableCoursePictureURL sets the "course_picture_url" field if the given value is not nil.
func (cc *CourseCreate) SetNillableCoursePictureURL(s *string) *CourseCreate {
	if s != nil {
		cc.SetCoursePictureURL(*s)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *CourseCreate) SetID(u uuid.UUID) *CourseCreate {
	cc.mutation.SetID(u)
	return cc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cc *CourseCreate) SetNillableID(u *uuid.UUID) *CourseCreate {
	if u != nil {
		cc.SetID(*u)
	}
	return cc
}

// AddReviewCourseIDs adds the "review_course" edge to the ReviewCourse entity by IDs.
func (cc *CourseCreate) AddReviewCourseIDs(ids ...int) *CourseCreate {
	cc.mutation.AddReviewCourseIDs(ids...)
	return cc
}

// AddReviewCourse adds the "review_course" edges to the ReviewCourse entity.
func (cc *CourseCreate) AddReviewCourse(r ...*ReviewCourse) *CourseCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cc.AddReviewCourseIDs(ids...)
}

// AddClasIDs adds the "class" edge to the Class entity by IDs.
func (cc *CourseCreate) AddClasIDs(ids ...uuid.UUID) *CourseCreate {
	cc.mutation.AddClasIDs(ids...)
	return cc
}

// AddClass adds the "class" edges to the Class entity.
func (cc *CourseCreate) AddClass(c ...*Class) *CourseCreate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddClasIDs(ids...)
}

// SetStudentID sets the "student" edge to the Student entity by ID.
func (cc *CourseCreate) SetStudentID(id uuid.UUID) *CourseCreate {
	cc.mutation.SetStudentID(id)
	return cc
}

// SetNillableStudentID sets the "student" edge to the Student entity by ID if the given value is not nil.
func (cc *CourseCreate) SetNillableStudentID(id *uuid.UUID) *CourseCreate {
	if id != nil {
		cc = cc.SetStudentID(*id)
	}
	return cc
}

// SetStudent sets the "student" edge to the Student entity.
func (cc *CourseCreate) SetStudent(s *Student) *CourseCreate {
	return cc.SetStudentID(s.ID)
}

// SetTutorID sets the "tutor" edge to the Tutor entity by ID.
func (cc *CourseCreate) SetTutorID(id uuid.UUID) *CourseCreate {
	cc.mutation.SetTutorID(id)
	return cc
}

// SetTutor sets the "tutor" edge to the Tutor entity.
func (cc *CourseCreate) SetTutor(t *Tutor) *CourseCreate {
	return cc.SetTutorID(t.ID)
}

// Mutation returns the CourseMutation object of the builder.
func (cc *CourseCreate) Mutation() *CourseMutation {
	return cc.mutation
}

// Save creates the Course in the database.
func (cc *CourseCreate) Save(ctx context.Context) (*Course, error) {
	cc.defaults()
	return withHooks[*Course, CourseMutation](ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CourseCreate) SaveX(ctx context.Context) *Course {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CourseCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CourseCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CourseCreate) defaults() {
	if _, ok := cc.mutation.ID(); !ok {
		v := course.DefaultID()
		cc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CourseCreate) check() error {
	if _, ok := cc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Course.title"`)}
	}
	if v, ok := cc.mutation.Title(); ok {
		if err := course.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Course.title": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Subject(); !ok {
		return &ValidationError{Name: "subject", err: errors.New(`ent: missing required field "Course.subject"`)}
	}
	if v, ok := cc.mutation.Subject(); ok {
		if err := course.SubjectValidator(v); err != nil {
			return &ValidationError{Name: "subject", err: fmt.Errorf(`ent: validator failed for field "Course.subject": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Topic(); !ok {
		return &ValidationError{Name: "topic", err: errors.New(`ent: missing required field "Course.topic"`)}
	}
	if v, ok := cc.mutation.Topic(); ok {
		if err := course.TopicValidator(v); err != nil {
			return &ValidationError{Name: "topic", err: fmt.Errorf(`ent: validator failed for field "Course.topic": %w`, err)}
		}
	}
	if _, ok := cc.mutation.EstimatedTime(); !ok {
		return &ValidationError{Name: "estimated_time", err: errors.New(`ent: missing required field "Course.estimated_time"`)}
	}
	if _, ok := cc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Course.description"`)}
	}
	if v, ok := cc.mutation.Description(); ok {
		if err := course.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Course.description": %w`, err)}
		}
	}
	if _, ok := cc.mutation.CourseStatus(); !ok {
		return &ValidationError{Name: "course_status", err: errors.New(`ent: missing required field "Course.course_status"`)}
	}
	if v, ok := cc.mutation.CourseStatus(); ok {
		if err := course.CourseStatusValidator(v); err != nil {
			return &ValidationError{Name: "course_status", err: fmt.Errorf(`ent: validator failed for field "Course.course_status": %w`, err)}
		}
	}
	if _, ok := cc.mutation.PricePerHour(); !ok {
		return &ValidationError{Name: "price_per_hour", err: errors.New(`ent: missing required field "Course.price_per_hour"`)}
	}
	if v, ok := cc.mutation.PricePerHour(); ok {
		if err := course.PricePerHourValidator(v); err != nil {
			return &ValidationError{Name: "price_per_hour", err: fmt.Errorf(`ent: validator failed for field "Course.price_per_hour": %w`, err)}
		}
	}
	if v, ok := cc.mutation.Level(); ok {
		if err := course.LevelValidator(v); err != nil {
			return &ValidationError{Name: "level", err: fmt.Errorf(`ent: validator failed for field "Course.level": %w`, err)}
		}
	}
	if _, ok := cc.mutation.TutorID(); !ok {
		return &ValidationError{Name: "tutor", err: errors.New(`ent: missing required edge "Course.tutor"`)}
	}
	return nil
}

func (cc *CourseCreate) sqlSave(ctx context.Context) (*Course, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CourseCreate) createSpec() (*Course, *sqlgraph.CreateSpec) {
	var (
		_node = &Course{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(course.Table, sqlgraph.NewFieldSpec(course.FieldID, field.TypeUUID))
	)
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cc.mutation.Title(); ok {
		_spec.SetField(course.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := cc.mutation.Subject(); ok {
		_spec.SetField(course.FieldSubject, field.TypeString, value)
		_node.Subject = value
	}
	if value, ok := cc.mutation.Topic(); ok {
		_spec.SetField(course.FieldTopic, field.TypeString, value)
		_node.Topic = value
	}
	if value, ok := cc.mutation.EstimatedTime(); ok {
		_spec.SetField(course.FieldEstimatedTime, field.TypeTime, value)
		_node.EstimatedTime = value
	}
	if value, ok := cc.mutation.Description(); ok {
		_spec.SetField(course.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := cc.mutation.CourseStatus(); ok {
		_spec.SetField(course.FieldCourseStatus, field.TypeString, value)
		_node.CourseStatus = value
	}
	if value, ok := cc.mutation.PricePerHour(); ok {
		_spec.SetField(course.FieldPricePerHour, field.TypeInt, value)
		_node.PricePerHour = value
	}
	if value, ok := cc.mutation.Level(); ok {
		_spec.SetField(course.FieldLevel, field.TypeEnum, value)
		_node.Level = value
	}
	if value, ok := cc.mutation.CoursePictureURL(); ok {
		_spec.SetField(course.FieldCoursePictureURL, field.TypeString, value)
		_node.CoursePictureURL = &value
	}
	if nodes := cc.mutation.ReviewCourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.ReviewCourseTable,
			Columns: []string{course.ReviewCourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: reviewcourse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ClassIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   course.ClassTable,
			Columns: []string{course.ClassColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: class.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.StudentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   course.StudentTable,
			Columns: []string{course.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: student.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.student_course = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.TutorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   course.TutorTable,
			Columns: []string{course.TutorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: tutor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.tutor_course = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CourseCreateBulk is the builder for creating many Course entities in bulk.
type CourseCreateBulk struct {
	config
	builders []*CourseCreate
}

// Save creates the Course entities in the database.
func (ccb *CourseCreateBulk) Save(ctx context.Context) ([]*Course, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Course, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CourseMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CourseCreateBulk) SaveX(ctx context.Context) []*Course {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CourseCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CourseCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

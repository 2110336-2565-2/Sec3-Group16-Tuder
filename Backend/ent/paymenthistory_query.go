// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/class"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/payment"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/paymenthistory"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/predicate"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/user"
	"github.com/google/uuid"
)

// PaymentHistoryQuery is the builder for querying PaymentHistory entities.
type PaymentHistoryQuery struct {
	config
	ctx         *QueryContext
	order       []OrderFunc
	inters      []Interceptor
	predicates  []predicate.PaymentHistory
	withClass   *ClassQuery
	withUser    *UserQuery
	withPayment *PaymentQuery
	withFKs     bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PaymentHistoryQuery builder.
func (phq *PaymentHistoryQuery) Where(ps ...predicate.PaymentHistory) *PaymentHistoryQuery {
	phq.predicates = append(phq.predicates, ps...)
	return phq
}

// Limit the number of records to be returned by this query.
func (phq *PaymentHistoryQuery) Limit(limit int) *PaymentHistoryQuery {
	phq.ctx.Limit = &limit
	return phq
}

// Offset to start from.
func (phq *PaymentHistoryQuery) Offset(offset int) *PaymentHistoryQuery {
	phq.ctx.Offset = &offset
	return phq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (phq *PaymentHistoryQuery) Unique(unique bool) *PaymentHistoryQuery {
	phq.ctx.Unique = &unique
	return phq
}

// Order specifies how the records should be ordered.
func (phq *PaymentHistoryQuery) Order(o ...OrderFunc) *PaymentHistoryQuery {
	phq.order = append(phq.order, o...)
	return phq
}

// QueryClass chains the current query on the "class" edge.
func (phq *PaymentHistoryQuery) QueryClass() *ClassQuery {
	query := (&ClassClient{config: phq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := phq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := phq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(paymenthistory.Table, paymenthistory.FieldID, selector),
			sqlgraph.To(class.Table, class.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, paymenthistory.ClassTable, paymenthistory.ClassColumn),
		)
		fromU = sqlgraph.SetNeighbors(phq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUser chains the current query on the "user" edge.
func (phq *PaymentHistoryQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: phq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := phq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := phq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(paymenthistory.Table, paymenthistory.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, paymenthistory.UserTable, paymenthistory.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(phq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPayment chains the current query on the "payment" edge.
func (phq *PaymentHistoryQuery) QueryPayment() *PaymentQuery {
	query := (&PaymentClient{config: phq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := phq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := phq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(paymenthistory.Table, paymenthistory.FieldID, selector),
			sqlgraph.To(payment.Table, payment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, paymenthistory.PaymentTable, paymenthistory.PaymentColumn),
		)
		fromU = sqlgraph.SetNeighbors(phq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first PaymentHistory entity from the query.
// Returns a *NotFoundError when no PaymentHistory was found.
func (phq *PaymentHistoryQuery) First(ctx context.Context) (*PaymentHistory, error) {
	nodes, err := phq.Limit(1).All(setContextOp(ctx, phq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{paymenthistory.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (phq *PaymentHistoryQuery) FirstX(ctx context.Context) *PaymentHistory {
	node, err := phq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first PaymentHistory ID from the query.
// Returns a *NotFoundError when no PaymentHistory ID was found.
func (phq *PaymentHistoryQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = phq.Limit(1).IDs(setContextOp(ctx, phq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{paymenthistory.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (phq *PaymentHistoryQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := phq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single PaymentHistory entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one PaymentHistory entity is found.
// Returns a *NotFoundError when no PaymentHistory entities are found.
func (phq *PaymentHistoryQuery) Only(ctx context.Context) (*PaymentHistory, error) {
	nodes, err := phq.Limit(2).All(setContextOp(ctx, phq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{paymenthistory.Label}
	default:
		return nil, &NotSingularError{paymenthistory.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (phq *PaymentHistoryQuery) OnlyX(ctx context.Context) *PaymentHistory {
	node, err := phq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only PaymentHistory ID in the query.
// Returns a *NotSingularError when more than one PaymentHistory ID is found.
// Returns a *NotFoundError when no entities are found.
func (phq *PaymentHistoryQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = phq.Limit(2).IDs(setContextOp(ctx, phq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{paymenthistory.Label}
	default:
		err = &NotSingularError{paymenthistory.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (phq *PaymentHistoryQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := phq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of PaymentHistories.
func (phq *PaymentHistoryQuery) All(ctx context.Context) ([]*PaymentHistory, error) {
	ctx = setContextOp(ctx, phq.ctx, "All")
	if err := phq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*PaymentHistory, *PaymentHistoryQuery]()
	return withInterceptors[[]*PaymentHistory](ctx, phq, qr, phq.inters)
}

// AllX is like All, but panics if an error occurs.
func (phq *PaymentHistoryQuery) AllX(ctx context.Context) []*PaymentHistory {
	nodes, err := phq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of PaymentHistory IDs.
func (phq *PaymentHistoryQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if phq.ctx.Unique == nil && phq.path != nil {
		phq.Unique(true)
	}
	ctx = setContextOp(ctx, phq.ctx, "IDs")
	if err = phq.Select(paymenthistory.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (phq *PaymentHistoryQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := phq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (phq *PaymentHistoryQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, phq.ctx, "Count")
	if err := phq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, phq, querierCount[*PaymentHistoryQuery](), phq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (phq *PaymentHistoryQuery) CountX(ctx context.Context) int {
	count, err := phq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (phq *PaymentHistoryQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, phq.ctx, "Exist")
	switch _, err := phq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (phq *PaymentHistoryQuery) ExistX(ctx context.Context) bool {
	exist, err := phq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PaymentHistoryQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (phq *PaymentHistoryQuery) Clone() *PaymentHistoryQuery {
	if phq == nil {
		return nil
	}
	return &PaymentHistoryQuery{
		config:      phq.config,
		ctx:         phq.ctx.Clone(),
		order:       append([]OrderFunc{}, phq.order...),
		inters:      append([]Interceptor{}, phq.inters...),
		predicates:  append([]predicate.PaymentHistory{}, phq.predicates...),
		withClass:   phq.withClass.Clone(),
		withUser:    phq.withUser.Clone(),
		withPayment: phq.withPayment.Clone(),
		// clone intermediate query.
		sql:  phq.sql.Clone(),
		path: phq.path,
	}
}

// WithClass tells the query-builder to eager-load the nodes that are connected to
// the "class" edge. The optional arguments are used to configure the query builder of the edge.
func (phq *PaymentHistoryQuery) WithClass(opts ...func(*ClassQuery)) *PaymentHistoryQuery {
	query := (&ClassClient{config: phq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	phq.withClass = query
	return phq
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (phq *PaymentHistoryQuery) WithUser(opts ...func(*UserQuery)) *PaymentHistoryQuery {
	query := (&UserClient{config: phq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	phq.withUser = query
	return phq
}

// WithPayment tells the query-builder to eager-load the nodes that are connected to
// the "payment" edge. The optional arguments are used to configure the query builder of the edge.
func (phq *PaymentHistoryQuery) WithPayment(opts ...func(*PaymentQuery)) *PaymentHistoryQuery {
	query := (&PaymentClient{config: phq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	phq.withPayment = query
	return phq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
func (phq *PaymentHistoryQuery) GroupBy(field string, fields ...string) *PaymentHistoryGroupBy {
	phq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &PaymentHistoryGroupBy{build: phq}
	grbuild.flds = &phq.ctx.Fields
	grbuild.label = paymenthistory.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
func (phq *PaymentHistoryQuery) Select(fields ...string) *PaymentHistorySelect {
	phq.ctx.Fields = append(phq.ctx.Fields, fields...)
	sbuild := &PaymentHistorySelect{PaymentHistoryQuery: phq}
	sbuild.label = paymenthistory.Label
	sbuild.flds, sbuild.scan = &phq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a PaymentHistorySelect configured with the given aggregations.
func (phq *PaymentHistoryQuery) Aggregate(fns ...AggregateFunc) *PaymentHistorySelect {
	return phq.Select().Aggregate(fns...)
}

func (phq *PaymentHistoryQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range phq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, phq); err != nil {
				return err
			}
		}
	}
	for _, f := range phq.ctx.Fields {
		if !paymenthistory.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if phq.path != nil {
		prev, err := phq.path(ctx)
		if err != nil {
			return err
		}
		phq.sql = prev
	}
	return nil
}

func (phq *PaymentHistoryQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*PaymentHistory, error) {
	var (
		nodes       = []*PaymentHistory{}
		withFKs     = phq.withFKs
		_spec       = phq.querySpec()
		loadedTypes = [3]bool{
			phq.withClass != nil,
			phq.withUser != nil,
			phq.withPayment != nil,
		}
	)
	if phq.withUser != nil || phq.withPayment != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, paymenthistory.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*PaymentHistory).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &PaymentHistory{config: phq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, phq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := phq.withClass; query != nil {
		if err := phq.loadClass(ctx, query, nodes,
			func(n *PaymentHistory) { n.Edges.Class = []*Class{} },
			func(n *PaymentHistory, e *Class) { n.Edges.Class = append(n.Edges.Class, e) }); err != nil {
			return nil, err
		}
	}
	if query := phq.withUser; query != nil {
		if err := phq.loadUser(ctx, query, nodes, nil,
			func(n *PaymentHistory, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	if query := phq.withPayment; query != nil {
		if err := phq.loadPayment(ctx, query, nodes, nil,
			func(n *PaymentHistory, e *Payment) { n.Edges.Payment = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (phq *PaymentHistoryQuery) loadClass(ctx context.Context, query *ClassQuery, nodes []*PaymentHistory, init func(*PaymentHistory), assign func(*PaymentHistory, *Class)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*PaymentHistory)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Class(func(s *sql.Selector) {
		s.Where(sql.InValues(paymenthistory.ClassColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.payment_history_class
		if fk == nil {
			return fmt.Errorf(`foreign-key "payment_history_class" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "payment_history_class" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (phq *PaymentHistoryQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*PaymentHistory, init func(*PaymentHistory), assign func(*PaymentHistory, *User)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*PaymentHistory)
	for i := range nodes {
		if nodes[i].user_payment_history == nil {
			continue
		}
		fk := *nodes[i].user_payment_history
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_payment_history" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (phq *PaymentHistoryQuery) loadPayment(ctx context.Context, query *PaymentQuery, nodes []*PaymentHistory, init func(*PaymentHistory), assign func(*PaymentHistory, *Payment)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*PaymentHistory)
	for i := range nodes {
		if nodes[i].payment_payment_history == nil {
			continue
		}
		fk := *nodes[i].payment_payment_history
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(payment.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "payment_payment_history" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (phq *PaymentHistoryQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := phq.querySpec()
	_spec.Node.Columns = phq.ctx.Fields
	if len(phq.ctx.Fields) > 0 {
		_spec.Unique = phq.ctx.Unique != nil && *phq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, phq.driver, _spec)
}

func (phq *PaymentHistoryQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(paymenthistory.Table, paymenthistory.Columns, sqlgraph.NewFieldSpec(paymenthistory.FieldID, field.TypeUUID))
	_spec.From = phq.sql
	if unique := phq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if phq.path != nil {
		_spec.Unique = true
	}
	if fields := phq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, paymenthistory.FieldID)
		for i := range fields {
			if fields[i] != paymenthistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := phq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := phq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := phq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := phq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (phq *PaymentHistoryQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(phq.driver.Dialect())
	t1 := builder.Table(paymenthistory.Table)
	columns := phq.ctx.Fields
	if len(columns) == 0 {
		columns = paymenthistory.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if phq.sql != nil {
		selector = phq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if phq.ctx.Unique != nil && *phq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range phq.predicates {
		p(selector)
	}
	for _, p := range phq.order {
		p(selector)
	}
	if offset := phq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := phq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// PaymentHistoryGroupBy is the group-by builder for PaymentHistory entities.
type PaymentHistoryGroupBy struct {
	selector
	build *PaymentHistoryQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (phgb *PaymentHistoryGroupBy) Aggregate(fns ...AggregateFunc) *PaymentHistoryGroupBy {
	phgb.fns = append(phgb.fns, fns...)
	return phgb
}

// Scan applies the selector query and scans the result into the given value.
func (phgb *PaymentHistoryGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, phgb.build.ctx, "GroupBy")
	if err := phgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PaymentHistoryQuery, *PaymentHistoryGroupBy](ctx, phgb.build, phgb, phgb.build.inters, v)
}

func (phgb *PaymentHistoryGroupBy) sqlScan(ctx context.Context, root *PaymentHistoryQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(phgb.fns))
	for _, fn := range phgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*phgb.flds)+len(phgb.fns))
		for _, f := range *phgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*phgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := phgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// PaymentHistorySelect is the builder for selecting fields of PaymentHistory entities.
type PaymentHistorySelect struct {
	*PaymentHistoryQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (phs *PaymentHistorySelect) Aggregate(fns ...AggregateFunc) *PaymentHistorySelect {
	phs.fns = append(phs.fns, fns...)
	return phs
}

// Scan applies the selector query and scans the result into the given value.
func (phs *PaymentHistorySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, phs.ctx, "Select")
	if err := phs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PaymentHistoryQuery, *PaymentHistorySelect](ctx, phs.PaymentHistoryQuery, phs, phs.inters, v)
}

func (phs *PaymentHistorySelect) sqlScan(ctx context.Context, root *PaymentHistoryQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(phs.fns))
	for _, fn := range phs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*phs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := phs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

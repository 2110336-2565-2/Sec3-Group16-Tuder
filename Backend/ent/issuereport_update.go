// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/issuereport"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/predicate"
)

// IssueReportUpdate is the builder for updating IssueReport entities.
type IssueReportUpdate struct {
	config
	hooks    []Hook
	mutation *IssueReportMutation
}

// Where appends a list predicates to the IssueReportUpdate builder.
func (iru *IssueReportUpdate) Where(ps ...predicate.IssueReport) *IssueReportUpdate {
	iru.mutation.Where(ps...)
	return iru
}

// SetTitle sets the "title" field.
func (iru *IssueReportUpdate) SetTitle(s string) *IssueReportUpdate {
	iru.mutation.SetTitle(s)
	return iru
}

// SetDescription sets the "description" field.
func (iru *IssueReportUpdate) SetDescription(s string) *IssueReportUpdate {
	iru.mutation.SetDescription(s)
	return iru
}

// SetReportDate sets the "report_date" field.
func (iru *IssueReportUpdate) SetReportDate(s string) *IssueReportUpdate {
	iru.mutation.SetReportDate(s)
	return iru
}

// SetStatus sets the "status" field.
func (iru *IssueReportUpdate) SetStatus(s string) *IssueReportUpdate {
	iru.mutation.SetStatus(s)
	return iru
}

// Mutation returns the IssueReportMutation object of the builder.
func (iru *IssueReportUpdate) Mutation() *IssueReportMutation {
	return iru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iru *IssueReportUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, IssueReportMutation](ctx, iru.sqlSave, iru.mutation, iru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iru *IssueReportUpdate) SaveX(ctx context.Context) int {
	affected, err := iru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iru *IssueReportUpdate) Exec(ctx context.Context) error {
	_, err := iru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iru *IssueReportUpdate) ExecX(ctx context.Context) {
	if err := iru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iru *IssueReportUpdate) check() error {
	if v, ok := iru.mutation.Title(); ok {
		if err := issuereport.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "IssueReport.title": %w`, err)}
		}
	}
	if v, ok := iru.mutation.Description(); ok {
		if err := issuereport.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "IssueReport.description": %w`, err)}
		}
	}
	if v, ok := iru.mutation.ReportDate(); ok {
		if err := issuereport.ReportDateValidator(v); err != nil {
			return &ValidationError{Name: "report_date", err: fmt.Errorf(`ent: validator failed for field "IssueReport.report_date": %w`, err)}
		}
	}
	if v, ok := iru.mutation.Status(); ok {
		if err := issuereport.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "IssueReport.status": %w`, err)}
		}
	}
	return nil
}

func (iru *IssueReportUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(issuereport.Table, issuereport.Columns, sqlgraph.NewFieldSpec(issuereport.FieldID, field.TypeUUID))
	if ps := iru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iru.mutation.Title(); ok {
		_spec.SetField(issuereport.FieldTitle, field.TypeString, value)
	}
	if value, ok := iru.mutation.Description(); ok {
		_spec.SetField(issuereport.FieldDescription, field.TypeString, value)
	}
	if value, ok := iru.mutation.ReportDate(); ok {
		_spec.SetField(issuereport.FieldReportDate, field.TypeString, value)
	}
	if value, ok := iru.mutation.Status(); ok {
		_spec.SetField(issuereport.FieldStatus, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{issuereport.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iru.mutation.done = true
	return n, nil
}

// IssueReportUpdateOne is the builder for updating a single IssueReport entity.
type IssueReportUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IssueReportMutation
}

// SetTitle sets the "title" field.
func (iruo *IssueReportUpdateOne) SetTitle(s string) *IssueReportUpdateOne {
	iruo.mutation.SetTitle(s)
	return iruo
}

// SetDescription sets the "description" field.
func (iruo *IssueReportUpdateOne) SetDescription(s string) *IssueReportUpdateOne {
	iruo.mutation.SetDescription(s)
	return iruo
}

// SetReportDate sets the "report_date" field.
func (iruo *IssueReportUpdateOne) SetReportDate(s string) *IssueReportUpdateOne {
	iruo.mutation.SetReportDate(s)
	return iruo
}

// SetStatus sets the "status" field.
func (iruo *IssueReportUpdateOne) SetStatus(s string) *IssueReportUpdateOne {
	iruo.mutation.SetStatus(s)
	return iruo
}

// Mutation returns the IssueReportMutation object of the builder.
func (iruo *IssueReportUpdateOne) Mutation() *IssueReportMutation {
	return iruo.mutation
}

// Where appends a list predicates to the IssueReportUpdate builder.
func (iruo *IssueReportUpdateOne) Where(ps ...predicate.IssueReport) *IssueReportUpdateOne {
	iruo.mutation.Where(ps...)
	return iruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iruo *IssueReportUpdateOne) Select(field string, fields ...string) *IssueReportUpdateOne {
	iruo.fields = append([]string{field}, fields...)
	return iruo
}

// Save executes the query and returns the updated IssueReport entity.
func (iruo *IssueReportUpdateOne) Save(ctx context.Context) (*IssueReport, error) {
	return withHooks[*IssueReport, IssueReportMutation](ctx, iruo.sqlSave, iruo.mutation, iruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iruo *IssueReportUpdateOne) SaveX(ctx context.Context) *IssueReport {
	node, err := iruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iruo *IssueReportUpdateOne) Exec(ctx context.Context) error {
	_, err := iruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iruo *IssueReportUpdateOne) ExecX(ctx context.Context) {
	if err := iruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iruo *IssueReportUpdateOne) check() error {
	if v, ok := iruo.mutation.Title(); ok {
		if err := issuereport.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "IssueReport.title": %w`, err)}
		}
	}
	if v, ok := iruo.mutation.Description(); ok {
		if err := issuereport.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "IssueReport.description": %w`, err)}
		}
	}
	if v, ok := iruo.mutation.ReportDate(); ok {
		if err := issuereport.ReportDateValidator(v); err != nil {
			return &ValidationError{Name: "report_date", err: fmt.Errorf(`ent: validator failed for field "IssueReport.report_date": %w`, err)}
		}
	}
	if v, ok := iruo.mutation.Status(); ok {
		if err := issuereport.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "IssueReport.status": %w`, err)}
		}
	}
	return nil
}

func (iruo *IssueReportUpdateOne) sqlSave(ctx context.Context) (_node *IssueReport, err error) {
	if err := iruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(issuereport.Table, issuereport.Columns, sqlgraph.NewFieldSpec(issuereport.FieldID, field.TypeUUID))
	id, ok := iruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "IssueReport.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, issuereport.FieldID)
		for _, f := range fields {
			if !issuereport.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != issuereport.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iruo.mutation.Title(); ok {
		_spec.SetField(issuereport.FieldTitle, field.TypeString, value)
	}
	if value, ok := iruo.mutation.Description(); ok {
		_spec.SetField(issuereport.FieldDescription, field.TypeString, value)
	}
	if value, ok := iruo.mutation.ReportDate(); ok {
		_spec.SetField(issuereport.FieldReportDate, field.TypeString, value)
	}
	if value, ok := iruo.mutation.Status(); ok {
		_spec.SetField(issuereport.FieldStatus, field.TypeString, value)
	}
	_node = &IssueReport{config: iruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{issuereport.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iruo.mutation.done = true
	return _node, nil
}

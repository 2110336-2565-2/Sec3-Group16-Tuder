// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/class"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/schedule"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/tutor"
	"github.com/google/uuid"
)

// Schedule is the model entity for the Schedule schema.
type Schedule struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Day0 holds the value of the "day_0" field.
	Day0 *bool `json:"day_0,omitempty"`
	// Day1 holds the value of the "day_1" field.
	Day1 *bool `json:"day_1,omitempty"`
	// Day2 holds the value of the "day_2" field.
	Day2 *bool `json:"day_2,omitempty"`
	// Day3 holds the value of the "day_3" field.
	Day3 *bool `json:"day_3,omitempty"`
	// Day4 holds the value of the "day_4" field.
	Day4 *bool `json:"day_4,omitempty"`
	// Day5 holds the value of the "day_5" field.
	Day5 *bool `json:"day_5,omitempty"`
	// Day6 holds the value of the "day_6" field.
	Day6 *bool `json:"day_6,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ScheduleQuery when eager-loading is set.
	Edges          ScheduleEdges `json:"edges"`
	class_schedule *uuid.UUID
	tutor_schedule *uuid.UUID
}

// ScheduleEdges holds the relations/edges for other nodes in the graph.
type ScheduleEdges struct {
	// Tutor holds the value of the tutor edge.
	Tutor *Tutor `json:"tutor,omitempty"`
	// Class holds the value of the class edge.
	Class *Class `json:"class,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TutorOrErr returns the Tutor value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ScheduleEdges) TutorOrErr() (*Tutor, error) {
	if e.loadedTypes[0] {
		if e.Tutor == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: tutor.Label}
		}
		return e.Tutor, nil
	}
	return nil, &NotLoadedError{edge: "tutor"}
}

// ClassOrErr returns the Class value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ScheduleEdges) ClassOrErr() (*Class, error) {
	if e.loadedTypes[1] {
		if e.Class == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: class.Label}
		}
		return e.Class, nil
	}
	return nil, &NotLoadedError{edge: "class"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Schedule) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case schedule.FieldDay0, schedule.FieldDay1, schedule.FieldDay2, schedule.FieldDay3, schedule.FieldDay4, schedule.FieldDay5, schedule.FieldDay6:
			values[i] = new(sql.NullBool)
		case schedule.FieldID:
			values[i] = new(uuid.UUID)
		case schedule.ForeignKeys[0]: // class_schedule
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case schedule.ForeignKeys[1]: // tutor_schedule
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Schedule", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Schedule fields.
func (s *Schedule) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case schedule.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				s.ID = *value
			}
		case schedule.FieldDay0:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field day_0", values[i])
			} else if value.Valid {
				s.Day0 = new(bool)
				*s.Day0 = value.Bool
			}
		case schedule.FieldDay1:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field day_1", values[i])
			} else if value.Valid {
				s.Day1 = new(bool)
				*s.Day1 = value.Bool
			}
		case schedule.FieldDay2:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field day_2", values[i])
			} else if value.Valid {
				s.Day2 = new(bool)
				*s.Day2 = value.Bool
			}
		case schedule.FieldDay3:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field day_3", values[i])
			} else if value.Valid {
				s.Day3 = new(bool)
				*s.Day3 = value.Bool
			}
		case schedule.FieldDay4:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field day_4", values[i])
			} else if value.Valid {
				s.Day4 = new(bool)
				*s.Day4 = value.Bool
			}
		case schedule.FieldDay5:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field day_5", values[i])
			} else if value.Valid {
				s.Day5 = new(bool)
				*s.Day5 = value.Bool
			}
		case schedule.FieldDay6:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field day_6", values[i])
			} else if value.Valid {
				s.Day6 = new(bool)
				*s.Day6 = value.Bool
			}
		case schedule.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field class_schedule", values[i])
			} else if value.Valid {
				s.class_schedule = new(uuid.UUID)
				*s.class_schedule = *value.S.(*uuid.UUID)
			}
		case schedule.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field tutor_schedule", values[i])
			} else if value.Valid {
				s.tutor_schedule = new(uuid.UUID)
				*s.tutor_schedule = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryTutor queries the "tutor" edge of the Schedule entity.
func (s *Schedule) QueryTutor() *TutorQuery {
	return NewScheduleClient(s.config).QueryTutor(s)
}

// QueryClass queries the "class" edge of the Schedule entity.
func (s *Schedule) QueryClass() *ClassQuery {
	return NewScheduleClient(s.config).QueryClass(s)
}

// Update returns a builder for updating this Schedule.
// Note that you need to call Schedule.Unwrap() before calling this method if this Schedule
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Schedule) Update() *ScheduleUpdateOne {
	return NewScheduleClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Schedule entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Schedule) Unwrap() *Schedule {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Schedule is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Schedule) String() string {
	var builder strings.Builder
	builder.WriteString("Schedule(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	if v := s.Day0; v != nil {
		builder.WriteString("day_0=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := s.Day1; v != nil {
		builder.WriteString("day_1=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := s.Day2; v != nil {
		builder.WriteString("day_2=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := s.Day3; v != nil {
		builder.WriteString("day_3=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := s.Day4; v != nil {
		builder.WriteString("day_4=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := s.Day5; v != nil {
		builder.WriteString("day_5=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := s.Day6; v != nil {
		builder.WriteString("day_6=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Schedules is a parsable slice of Schedule.
type Schedules []*Schedule

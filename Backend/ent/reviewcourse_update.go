// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/course"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/predicate"
	"github.com/2110336-2565-2/Sec3-Group16-Tuder/ent/reviewcourse"
	"github.com/google/uuid"
)

// ReviewCourseUpdate is the builder for updating ReviewCourse entities.
type ReviewCourseUpdate struct {
	config
	hooks    []Hook
	mutation *ReviewCourseMutation
}

// Where appends a list predicates to the ReviewCourseUpdate builder.
func (rcu *ReviewCourseUpdate) Where(ps ...predicate.ReviewCourse) *ReviewCourseUpdate {
	rcu.mutation.Where(ps...)
	return rcu
}

// SetScore sets the "score" field.
func (rcu *ReviewCourseUpdate) SetScore(f float32) *ReviewCourseUpdate {
	rcu.mutation.ResetScore()
	rcu.mutation.SetScore(f)
	return rcu
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (rcu *ReviewCourseUpdate) SetNillableScore(f *float32) *ReviewCourseUpdate {
	if f != nil {
		rcu.SetScore(*f)
	}
	return rcu
}

// AddScore adds f to the "score" field.
func (rcu *ReviewCourseUpdate) AddScore(f float32) *ReviewCourseUpdate {
	rcu.mutation.AddScore(f)
	return rcu
}

// ClearScore clears the value of the "score" field.
func (rcu *ReviewCourseUpdate) ClearScore() *ReviewCourseUpdate {
	rcu.mutation.ClearScore()
	return rcu
}

// SetReviewMsg sets the "review_msg" field.
func (rcu *ReviewCourseUpdate) SetReviewMsg(s string) *ReviewCourseUpdate {
	rcu.mutation.SetReviewMsg(s)
	return rcu
}

// SetNillableReviewMsg sets the "review_msg" field if the given value is not nil.
func (rcu *ReviewCourseUpdate) SetNillableReviewMsg(s *string) *ReviewCourseUpdate {
	if s != nil {
		rcu.SetReviewMsg(*s)
	}
	return rcu
}

// ClearReviewMsg clears the value of the "review_msg" field.
func (rcu *ReviewCourseUpdate) ClearReviewMsg() *ReviewCourseUpdate {
	rcu.mutation.ClearReviewMsg()
	return rcu
}

// SetCourseID sets the "course" edge to the Course entity by ID.
func (rcu *ReviewCourseUpdate) SetCourseID(id uuid.UUID) *ReviewCourseUpdate {
	rcu.mutation.SetCourseID(id)
	return rcu
}

// SetCourse sets the "course" edge to the Course entity.
func (rcu *ReviewCourseUpdate) SetCourse(c *Course) *ReviewCourseUpdate {
	return rcu.SetCourseID(c.ID)
}

// Mutation returns the ReviewCourseMutation object of the builder.
func (rcu *ReviewCourseUpdate) Mutation() *ReviewCourseMutation {
	return rcu.mutation
}

// ClearCourse clears the "course" edge to the Course entity.
func (rcu *ReviewCourseUpdate) ClearCourse() *ReviewCourseUpdate {
	rcu.mutation.ClearCourse()
	return rcu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rcu *ReviewCourseUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, ReviewCourseMutation](ctx, rcu.sqlSave, rcu.mutation, rcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rcu *ReviewCourseUpdate) SaveX(ctx context.Context) int {
	affected, err := rcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rcu *ReviewCourseUpdate) Exec(ctx context.Context) error {
	_, err := rcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcu *ReviewCourseUpdate) ExecX(ctx context.Context) {
	if err := rcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rcu *ReviewCourseUpdate) check() error {
	if v, ok := rcu.mutation.Score(); ok {
		if err := reviewcourse.ScoreValidator(v); err != nil {
			return &ValidationError{Name: "score", err: fmt.Errorf(`ent: validator failed for field "ReviewCourse.score": %w`, err)}
		}
	}
	if _, ok := rcu.mutation.CourseID(); rcu.mutation.CourseCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ReviewCourse.course"`)
	}
	return nil
}

func (rcu *ReviewCourseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := rcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(reviewcourse.Table, reviewcourse.Columns, sqlgraph.NewFieldSpec(reviewcourse.FieldID, field.TypeInt))
	if ps := rcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rcu.mutation.Score(); ok {
		_spec.SetField(reviewcourse.FieldScore, field.TypeFloat32, value)
	}
	if value, ok := rcu.mutation.AddedScore(); ok {
		_spec.AddField(reviewcourse.FieldScore, field.TypeFloat32, value)
	}
	if rcu.mutation.ScoreCleared() {
		_spec.ClearField(reviewcourse.FieldScore, field.TypeFloat32)
	}
	if value, ok := rcu.mutation.ReviewMsg(); ok {
		_spec.SetField(reviewcourse.FieldReviewMsg, field.TypeString, value)
	}
	if rcu.mutation.ReviewMsgCleared() {
		_spec.ClearField(reviewcourse.FieldReviewMsg, field.TypeString)
	}
	if rcu.mutation.CourseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reviewcourse.CourseTable,
			Columns: []string{reviewcourse.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: course.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcu.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reviewcourse.CourseTable,
			Columns: []string{reviewcourse.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: course.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reviewcourse.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rcu.mutation.done = true
	return n, nil
}

// ReviewCourseUpdateOne is the builder for updating a single ReviewCourse entity.
type ReviewCourseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ReviewCourseMutation
}

// SetScore sets the "score" field.
func (rcuo *ReviewCourseUpdateOne) SetScore(f float32) *ReviewCourseUpdateOne {
	rcuo.mutation.ResetScore()
	rcuo.mutation.SetScore(f)
	return rcuo
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (rcuo *ReviewCourseUpdateOne) SetNillableScore(f *float32) *ReviewCourseUpdateOne {
	if f != nil {
		rcuo.SetScore(*f)
	}
	return rcuo
}

// AddScore adds f to the "score" field.
func (rcuo *ReviewCourseUpdateOne) AddScore(f float32) *ReviewCourseUpdateOne {
	rcuo.mutation.AddScore(f)
	return rcuo
}

// ClearScore clears the value of the "score" field.
func (rcuo *ReviewCourseUpdateOne) ClearScore() *ReviewCourseUpdateOne {
	rcuo.mutation.ClearScore()
	return rcuo
}

// SetReviewMsg sets the "review_msg" field.
func (rcuo *ReviewCourseUpdateOne) SetReviewMsg(s string) *ReviewCourseUpdateOne {
	rcuo.mutation.SetReviewMsg(s)
	return rcuo
}

// SetNillableReviewMsg sets the "review_msg" field if the given value is not nil.
func (rcuo *ReviewCourseUpdateOne) SetNillableReviewMsg(s *string) *ReviewCourseUpdateOne {
	if s != nil {
		rcuo.SetReviewMsg(*s)
	}
	return rcuo
}

// ClearReviewMsg clears the value of the "review_msg" field.
func (rcuo *ReviewCourseUpdateOne) ClearReviewMsg() *ReviewCourseUpdateOne {
	rcuo.mutation.ClearReviewMsg()
	return rcuo
}

// SetCourseID sets the "course" edge to the Course entity by ID.
func (rcuo *ReviewCourseUpdateOne) SetCourseID(id uuid.UUID) *ReviewCourseUpdateOne {
	rcuo.mutation.SetCourseID(id)
	return rcuo
}

// SetCourse sets the "course" edge to the Course entity.
func (rcuo *ReviewCourseUpdateOne) SetCourse(c *Course) *ReviewCourseUpdateOne {
	return rcuo.SetCourseID(c.ID)
}

// Mutation returns the ReviewCourseMutation object of the builder.
func (rcuo *ReviewCourseUpdateOne) Mutation() *ReviewCourseMutation {
	return rcuo.mutation
}

// ClearCourse clears the "course" edge to the Course entity.
func (rcuo *ReviewCourseUpdateOne) ClearCourse() *ReviewCourseUpdateOne {
	rcuo.mutation.ClearCourse()
	return rcuo
}

// Where appends a list predicates to the ReviewCourseUpdate builder.
func (rcuo *ReviewCourseUpdateOne) Where(ps ...predicate.ReviewCourse) *ReviewCourseUpdateOne {
	rcuo.mutation.Where(ps...)
	return rcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rcuo *ReviewCourseUpdateOne) Select(field string, fields ...string) *ReviewCourseUpdateOne {
	rcuo.fields = append([]string{field}, fields...)
	return rcuo
}

// Save executes the query and returns the updated ReviewCourse entity.
func (rcuo *ReviewCourseUpdateOne) Save(ctx context.Context) (*ReviewCourse, error) {
	return withHooks[*ReviewCourse, ReviewCourseMutation](ctx, rcuo.sqlSave, rcuo.mutation, rcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rcuo *ReviewCourseUpdateOne) SaveX(ctx context.Context) *ReviewCourse {
	node, err := rcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rcuo *ReviewCourseUpdateOne) Exec(ctx context.Context) error {
	_, err := rcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcuo *ReviewCourseUpdateOne) ExecX(ctx context.Context) {
	if err := rcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rcuo *ReviewCourseUpdateOne) check() error {
	if v, ok := rcuo.mutation.Score(); ok {
		if err := reviewcourse.ScoreValidator(v); err != nil {
			return &ValidationError{Name: "score", err: fmt.Errorf(`ent: validator failed for field "ReviewCourse.score": %w`, err)}
		}
	}
	if _, ok := rcuo.mutation.CourseID(); rcuo.mutation.CourseCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ReviewCourse.course"`)
	}
	return nil
}

func (rcuo *ReviewCourseUpdateOne) sqlSave(ctx context.Context) (_node *ReviewCourse, err error) {
	if err := rcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(reviewcourse.Table, reviewcourse.Columns, sqlgraph.NewFieldSpec(reviewcourse.FieldID, field.TypeInt))
	id, ok := rcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ReviewCourse.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, reviewcourse.FieldID)
		for _, f := range fields {
			if !reviewcourse.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != reviewcourse.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rcuo.mutation.Score(); ok {
		_spec.SetField(reviewcourse.FieldScore, field.TypeFloat32, value)
	}
	if value, ok := rcuo.mutation.AddedScore(); ok {
		_spec.AddField(reviewcourse.FieldScore, field.TypeFloat32, value)
	}
	if rcuo.mutation.ScoreCleared() {
		_spec.ClearField(reviewcourse.FieldScore, field.TypeFloat32)
	}
	if value, ok := rcuo.mutation.ReviewMsg(); ok {
		_spec.SetField(reviewcourse.FieldReviewMsg, field.TypeString, value)
	}
	if rcuo.mutation.ReviewMsgCleared() {
		_spec.ClearField(reviewcourse.FieldReviewMsg, field.TypeString)
	}
	if rcuo.mutation.CourseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reviewcourse.CourseTable,
			Columns: []string{reviewcourse.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: course.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcuo.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reviewcourse.CourseTable,
			Columns: []string{reviewcourse.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: course.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ReviewCourse{config: rcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reviewcourse.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rcuo.mutation.done = true
	return _node, nil
}

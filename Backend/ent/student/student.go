// Code generated by ent, DO NOT EDIT.

package student

import (
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the student type in the database.
	Label = "student"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// EdgeMatch holds the string denoting the match edge name in mutations.
	EdgeMatch = "match"
	// EdgeReviewCourse holds the string denoting the review_course edge name in mutations.
	EdgeReviewCourse = "review_course"
	// EdgeReviewTutor holds the string denoting the review_tutor edge name in mutations.
	EdgeReviewTutor = "review_tutor"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the student in the database.
	Table = "students"
	// MatchTable is the table that holds the match relation/edge. The primary key declared below.
	MatchTable = "student_match"
	// MatchInverseTable is the table name for the Match entity.
	// It exists in this package in order to avoid circular dependency with the "match" package.
	MatchInverseTable = "matches"
	// ReviewCourseTable is the table that holds the review_course relation/edge. The primary key declared below.
	ReviewCourseTable = "student_review_course"
	// ReviewCourseInverseTable is the table name for the ReviewCourse entity.
	// It exists in this package in order to avoid circular dependency with the "reviewcourse" package.
	ReviewCourseInverseTable = "review_courses"
	// ReviewTutorTable is the table that holds the review_tutor relation/edge. The primary key declared below.
	ReviewTutorTable = "student_review_tutor"
	// ReviewTutorInverseTable is the table name for the ReviewTutor entity.
	// It exists in this package in order to avoid circular dependency with the "reviewtutor" package.
	ReviewTutorInverseTable = "review_tutors"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "students"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_student"
)

// Columns holds all SQL columns for student fields.
var Columns = []string{
	FieldID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "students"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_student",
}

var (
	// MatchPrimaryKey and MatchColumn2 are the table columns denoting the
	// primary key for the match relation (M2M).
	MatchPrimaryKey = []string{"student_id", "match_id"}
	// ReviewCoursePrimaryKey and ReviewCourseColumn2 are the table columns denoting the
	// primary key for the review_course relation (M2M).
	ReviewCoursePrimaryKey = []string{"student_id", "review_course_id"}
	// ReviewTutorPrimaryKey and ReviewTutorColumn2 are the table columns denoting the
	// primary key for the review_tutor relation (M2M).
	ReviewTutorPrimaryKey = []string{"student_id", "review_tutor_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

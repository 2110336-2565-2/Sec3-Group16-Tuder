// Code generated by ent, DO NOT EDIT.

package student

import (
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the student type in the database.
	Label = "student"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// EdgeIssueReport holds the string denoting the issue_report edge name in mutations.
	EdgeIssueReport = "issue_report"
	// EdgeClass holds the string denoting the class edge name in mutations.
	EdgeClass = "class"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the student in the database.
	Table = "students"
	// IssueReportTable is the table that holds the issue_report relation/edge.
	IssueReportTable = "issue_reports"
	// IssueReportInverseTable is the table name for the IssueReport entity.
	// It exists in this package in order to avoid circular dependency with the "issuereport" package.
	IssueReportInverseTable = "issue_reports"
	// IssueReportColumn is the table column denoting the issue_report relation/edge.
	IssueReportColumn = "student_issue_report"
	// ClassTable is the table that holds the class relation/edge.
	ClassTable = "classes"
	// ClassInverseTable is the table name for the Class entity.
	// It exists in this package in order to avoid circular dependency with the "class" package.
	ClassInverseTable = "classes"
	// ClassColumn is the table column denoting the class relation/edge.
	ClassColumn = "student_class"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "students"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_student"
)

// Columns holds all SQL columns for student fields.
var Columns = []string{
	FieldID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "students"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_student",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

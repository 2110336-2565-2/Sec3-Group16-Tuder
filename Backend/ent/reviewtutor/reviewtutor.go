// Code generated by ent, DO NOT EDIT.

package reviewtutor

const (
	// Label holds the string label denoting the reviewtutor type in the database.
	Label = "review_tutor"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldScore holds the string denoting the score field in the database.
	FieldScore = "score"
	// FieldReviewMsg holds the string denoting the review_msg field in the database.
	FieldReviewMsg = "review_msg"
	// EdgeTutor holds the string denoting the tutor edge name in mutations.
	EdgeTutor = "tutor"
	// EdgeStudent holds the string denoting the student edge name in mutations.
	EdgeStudent = "student"
	// Table holds the table name of the reviewtutor in the database.
	Table = "review_tutors"
	// TutorTable is the table that holds the tutor relation/edge. The primary key declared below.
	TutorTable = "tutor_review_tutor"
	// TutorInverseTable is the table name for the Tutor entity.
	// It exists in this package in order to avoid circular dependency with the "tutor" package.
	TutorInverseTable = "tutors"
	// StudentTable is the table that holds the student relation/edge. The primary key declared below.
	StudentTable = "student_review_tutor"
	// StudentInverseTable is the table name for the Student entity.
	// It exists in this package in order to avoid circular dependency with the "student" package.
	StudentInverseTable = "students"
)

// Columns holds all SQL columns for reviewtutor fields.
var Columns = []string{
	FieldID,
	FieldScore,
	FieldReviewMsg,
}

var (
	// TutorPrimaryKey and TutorColumn2 are the table columns denoting the
	// primary key for the tutor relation (M2M).
	TutorPrimaryKey = []string{"tutor_id", "review_tutor_id"}
	// StudentPrimaryKey and StudentColumn2 are the table columns denoting the
	// primary key for the student relation (M2M).
	StudentPrimaryKey = []string{"student_id", "review_tutor_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// ScoreValidator is a validator for the "score" field. It is called by the builders before save.
	ScoreValidator func(float32) error
)
